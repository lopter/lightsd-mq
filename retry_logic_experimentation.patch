# HG changeset patch
# Parent  2f9b09a3af203116dc85c297b0a6fa3440eb78b9
Experiment some retry logic on power_on/power_off

diff --git a/core/router.c b/core/router.c
--- a/core/router.c
+++ b/core/router.c
@@ -60,6 +60,15 @@
         );
         assert(pkt_infos);
         lgtd_lifx_gateway_send_packet(gw, &hdr, pkt, pkt_infos->size);
+        struct lgtd_lifx_bulb *bulb;
+        lgtd_time_mono_t now = lgtd_time_monotonic_msecs();
+        SLIST_FOREACH(bulb, &gw->bulbs, link_by_gw) {
+            if (pkt_type == LGTD_LIFX_SET_POWER_STATE) {
+                bulb->dirty_at = now;
+                struct lgtd_lifx_packet_power_state *payload = pkt;
+                bulb->expected_power_on = payload->power;
+            }
+        }
     }
 
     if (pkt_infos) {
diff --git a/lifx/bulb.h b/lifx/bulb.h
--- a/lifx/bulb.h
+++ b/lifx/bulb.h
@@ -51,6 +51,8 @@
     uint8_t                         addr[LGTD_LIFX_ADDR_LENGTH];
     struct lgtd_lifx_light_state    state;
     lgtd_time_mono_t                last_light_state_at;
+    lgtd_time_mono_t                dirty_at;
+    uint16_t                        expected_power_on;
 };
 RB_HEAD(lgtd_lifx_bulb_map, lgtd_lifx_bulb);
 SLIST_HEAD(lgtd_lifx_bulb_list, lgtd_lifx_bulb);
diff --git a/lifx/timer.c b/lifx/timer.c
--- a/lifx/timer.c
+++ b/lifx/timer.c
@@ -44,6 +44,7 @@
 #include "bulb.h"
 #include "gateway.h"
 #include "timer.h"
+#include "core/proto.h"
 #include "core/lightsd.h"
 
 static struct {
@@ -108,6 +109,21 @@
             );
             lgtd_lifx_bulb_close(bulb);
             start_discovery = true;
+            continue;
+        }
+        if (bulb->dirty_at
+            && bulb->last_light_state_at > bulb->dirty_at
+            && bulb->gw->last_pkt_at - bulb->dirty_at > 600) {
+            if (bulb->expected_power_on == bulb->state.power) {
+                lgtd_warnx("clearing dirty_at on %s", bulb->state.label);
+                bulb->dirty_at = 0;
+            } else if (bulb->expected_power_on) {
+                lgtd_warnx("retransmiting power on %s", bulb->state.label);
+                lgtd_proto_power_on("*");
+            } else {
+                lgtd_warnx("retransmiting power off on %s", bulb->state.label);
+                lgtd_proto_power_off("*");
+            }
         }
     }
 
