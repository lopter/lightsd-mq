# HG changeset patch
# Parent 405ca3973da0c043c9f303944419a712eb326f84
# Parent  772eb953c9a1f382eca8723d7eff3b85dc220bf0
Experiment some retry logic on power_on/power_off

diff --git a/core/router.c b/core/router.c
--- a/core/router.c
+++ b/core/router.c
@@ -60,6 +60,15 @@
         );
         assert(pkt_infos);
         lgtd_lifx_gateway_send_packet(gw, &hdr, pkt, pkt_infos->size);
+        struct lgtd_lifx_bulb *bulb;
+        lgtd_time_mono_t now = lgtd_time_monotonic_msecs();
+        SLIST_FOREACH(bulb, &gw->bulbs, link_by_gw) {
+            if (pkt_type == LGTD_LIFX_SET_POWER_STATE) {
+                bulb->dirty_at = now;
+                struct lgtd_lifx_packet_power_state *payload = pkt;
+                bulb->expected_power_on = payload->power;
+            }
+        }
     }
 
     if (pkt_infos) {
diff --git a/lifx/bulb.h b/lifx/bulb.h
--- a/lifx/bulb.h
+++ b/lifx/bulb.h
@@ -51,6 +51,8 @@
     uint8_t                         addr[LGTD_LIFX_ADDR_LENGTH];
     struct lgtd_lifx_light_state    state;
     lgtd_time_mono_t                last_light_state_at;
+    lgtd_time_mono_t                dirty_at;
+    uint16_t                        expected_power_on;
 };
 RB_HEAD(lgtd_lifx_bulb_map, lgtd_lifx_bulb);
 SLIST_HEAD(lgtd_lifx_bulb_list, lgtd_lifx_bulb);
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -344,6 +344,21 @@
         b, (const struct lgtd_lifx_light_state *)pkt, gw->last_pkt_at
     );
 
+    if (b->dirty_at
+        && b->last_light_state_at > b->dirty_at
+        && b->gw->last_pkt_at - b->dirty_at > 400) {
+        if (b->expected_power_on == b->state.power) {
+            lgtd_warnx("clearing dirty_at on %s", b->state.label);
+            b->dirty_at = 0;
+        } else if (b->expected_power_on) {
+            lgtd_warnx("retransmiting power on %s", b->state.label);
+            lgtd_proto_power_on("*");
+        } else {
+            lgtd_warnx("retransmiting power off on %s", b->state.label);
+            lgtd_proto_power_off("*");
+        }
+    }
+
     int latency = gw->last_pkt_at - gw->last_req_at;
     if (latency < LGTD_LIFX_GATEWAY_MIN_REFRESH_INTERVAL_MSECS) {
         int timeout = LGTD_LIFX_GATEWAY_MIN_REFRESH_INTERVAL_MSECS - latency;
diff --git a/lifx/timer.c b/lifx/timer.c
--- a/lifx/timer.c
+++ b/lifx/timer.c
@@ -108,6 +108,7 @@
             );
             lgtd_lifx_bulb_close(bulb);
             start_discovery = true;
+            continue;
         }
     }
 
