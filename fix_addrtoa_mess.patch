# HG changeset patch
# Parent  13b24c5af219c96e98584529bf917d7cef143ab2

diff --git a/core/lightsd.h b/core/lightsd.h
--- a/core/lightsd.h
+++ b/core/lightsd.h
@@ -51,7 +51,9 @@
 extern struct lgtd_opts lgtd_opts;
 extern struct event_base *lgtd_ev_base;
 
-const char *lgtd_addrtoa(const uint8_t *);
+char *lgtd_iee8023mactoa(const uint8_t *addr, char *buf, int buflen);
+#define LGTD_IEEE8023MACTOA(addr, buf) \
+    lgtd_iee8023mactoa((addr), (buf), sizeof(buf))
 void lgtd_sockaddrtoa(const struct sockaddr_storage *, char *buf, int buflen);
 short lgtd_sockaddrport(const struct sockaddr_storage *);
 
diff --git a/core/log.c b/core/log.c
--- a/core/log.c
+++ b/core/log.c
@@ -81,17 +81,18 @@
     fprintf(stderr, "[%s] %s", loglvl, showprogname ? "lightsd: " : "");
 }
 
-const char *
-lgtd_addrtoa(const uint8_t *addr)
+char *
+lgtd_iee8023mactoa(const uint8_t *addr, char *buf, int buflen)
 {
     assert(addr);
+    assert(buf);
+    assert(buflen >= 2 * 6 + 5 + 1);
 
-    static char str[LGTD_LIFX_ADDR_LENGTH * 2 + LGTD_LIFX_ADDR_LENGTH - 1 + 1];
     snprintf(
-        str, sizeof(str), "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx",
+        buf, buflen, "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx",
         addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]
     );
-    return str;
+    return buf;
 }
 
 void
diff --git a/core/proto.c b/core/proto.c
--- a/core/proto.c
+++ b/core/proto.c
@@ -217,19 +217,22 @@
         PRINT_COMPONENT(bulb->state.saturation, s, 0, 1);
         PRINT_COMPONENT(bulb->state.brightness, b, 0, 1);
 
-        char buf[3072];
+        char buf[3072],
+             bulb_addr[LGTD_LIFX_ADDR_STRLEN],
+             site_addr[LGTD_LIFX_ADDR_STRLEN];
+        LGTD_IEEE8023MACTOA(bulb->addr, bulb_addr);
+        LGTD_IEEE8023MACTOA(bulb->gw->site.as_array, site_addr);
         int written = snprintf(
             buf, sizeof(buf), state_fmt,
             h, s, b, bulb->state.kelvin,
             bulb->state.power == LGTD_LIFX_POWER_ON ? "true" : "false",
-            bulb->state.label[0] ? bulb->state.label : lgtd_addrtoa(bulb->addr)
+            bulb->state.label[0] ? bulb->state.label : bulb_addr
         );
         if (written >= (int)sizeof(buf)) {
             lgtd_warnx(
                 "can't send state of bulb %s (%s) to client "
                 "[%s]:%hu: output buffer to small",
-                bulb->state.label, lgtd_addrtoa(bulb->addr),
-                client->ip_addr, client->port
+                bulb->state.label, bulb_addr, client->ip_addr, client->port
             );
             continue;
         }
@@ -248,8 +251,7 @@
                     "tag_id %d on bulb %.*s (%s) doesn't "
                     "exist on gw [%s]:%hu (site %s)",
                     tag_id, (int)sizeof(bulb->state.label), bulb->state.label,
-                    lgtd_addrtoa(bulb->addr), bulb->gw->ip_addr, bulb->gw->port,
-                    lgtd_addrtoa(bulb->gw->site.as_array)
+                    bulb_addr, bulb->gw->ip_addr, bulb->gw->port, site_addr
                 );
             }
         }
diff --git a/core/router.c b/core/router.c
--- a/core/router.c
+++ b/core/router.c
@@ -106,7 +106,9 @@
         bulb->expected_power_on = payload->power;
     }
 
-    lgtd_info("sending %s to %s", pkt_info->name, lgtd_addrtoa(bulb->addr));
+    char addr[LGTD_LIFX_ADDR_STRLEN];
+    LGTD_IEEE8023MACTOA(bulb->addr, addr);
+    lgtd_info("sending %s to %s", pkt_info->name, addr);
 }
 
 void
diff --git a/lifx/bulb.c b/lifx/bulb.c
--- a/lifx/bulb.c
+++ b/lifx/bulb.c
@@ -100,11 +100,12 @@
         LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(bulbs_powered_on, -1);
     }
     RB_REMOVE(lgtd_lifx_bulb_map, &lgtd_lifx_bulbs_table, bulb);
+    char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_info(
         "closed bulb \"%.*s\" (%s) on [%s]:%hu",
         LGTD_LIFX_LABEL_SIZE,
         bulb->state.label,
-        lgtd_addrtoa(bulb->addr),
+        LGTD_IEEE8023MACTOA(bulb->addr, addr),
         bulb->gw->ip_addr,
         bulb->gw->port
     );
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -76,9 +76,10 @@
         lgtd_lifx_gateway_remove_and_close_bulb(gw, bulb);
     }
 
+    char site[LGTD_LIFX_ADDR_STRLEN];
     lgtd_info(
         "connection with gateway bulb [%s]:%hu (site %s) closed",
-        gw->ip_addr, gw->port, lgtd_addrtoa(gw->site.as_array)
+        gw->ip_addr, gw->port, LGTD_IEEE8023MACTOA(gw->site.as_array, site)
     );
     free(gw);
 }
@@ -197,9 +198,10 @@
         gw, pkt_type, pkt, &pkt_info
     );
 
+    char site[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "sending %s to site %s",
-        pkt_info->name, lgtd_addrtoa(gw->site.as_array)
+        pkt_info->name, LGTD_IEEE8023MACTOA(gw->site.as_array, site)
     );
 
     return rv; // FIXME, have real return values on the send paths...
@@ -215,9 +217,10 @@
         gw, pkt_type, pkt, &pkt_info
     );
 
+    char site[LGTD_LIFX_ADDR_STRLEN];
     lgtd_info(
         "sending %s to site %s",
-        pkt_info->name, lgtd_addrtoa(gw->site.as_array)
+        pkt_info->name, LGTD_IEEE8023MACTOA(gw->site.as_array, site)
     );
 
     return rv; // FIXME, have real return values on the send paths...
@@ -266,9 +269,10 @@
         bulb = lgtd_lifx_bulb_open(gw, bulb_addr);
         if (bulb) {
             SLIST_INSERT_HEAD(&gw->bulbs, bulb, link_by_gw);
+            char addr[LGTD_LIFX_ADDR_STRLEN];
             lgtd_info(
                 "bulb %s on [%s]:%hu",
-                lgtd_addrtoa(bulb_addr), gw->ip_addr, gw->port
+                LGTD_IEEE8023MACTOA(bulb->addr, addr), gw->ip_addr, gw->port
             );
         }
     }
@@ -328,9 +332,11 @@
         goto error_allocate;
     }
 
+    char site_addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_info(
         "gateway for site %s at [%s]:%hu",
-        lgtd_addrtoa(gw->site.as_array), gw->ip_addr, gw->port
+        LGTD_IEEE8023MACTOA(gw->site.as_array, site_addr),
+        gw->ip_addr, gw->port
     );
     LIST_INSERT_HEAD(&lgtd_lifx_gateways, gw, link);
 
@@ -444,10 +450,12 @@
     LGTD_LIFX_WIRE_FOREACH_TAG_ID(tag_id, removed_tags) {
         assert(gw->tag_refcounts[tag_id] > 0);
         if (--gw->tag_refcounts[tag_id] == 0) {
+            char site[LGTD_LIFX_ADDR_STRLEN];
             lgtd_info(
                 "deleting unused tag [%s] (%d) from gw [%s]:%hu (site %s)",
-                gw->tags[tag_id] ? gw->tags[tag_id]->label : NULL, tag_id,
-                gw->ip_addr, gw->port, lgtd_addrtoa(gw->site.as_array)
+                gw->tags[tag_id] ? gw->tags[tag_id]->label : NULL,
+                tag_id, gw->ip_addr, gw->port,
+                LGTD_IEEE8023MACTOA(gw->site.as_array, site)
             );
             struct lgtd_lifx_packet_tag_labels pkt = {
                 .tags = ~(gw->tag_ids & ~LGTD_LIFX_WIRE_TAG_ID_TO_VALUE(tag_id))
@@ -465,10 +473,12 @@
 {
     assert(gw && hdr && pkt);
 
+    char addr[LGTD_LIFX_ADDR_STRLEN], site[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "SET_PAN_GATEWAY <-- [%s]:%hu - %s site=%s, service_type=%d",
-        gw->ip_addr, gw->port, lgtd_addrtoa(hdr->target.device_addr),
-        lgtd_addrtoa(hdr->site), pkt->service_type
+        gw->ip_addr, gw->port,
+        LGTD_IEEE8023MACTOA(hdr->target.device_addr, addr),
+        LGTD_IEEE8023MACTOA(hdr->site, site), pkt->service_type
     );
 }
 
@@ -479,11 +489,13 @@
 {
     assert(gw && hdr && pkt);
 
+    char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "SET_LIGHT_STATE <-- [%s]:%hu - %s "
         "hue=%#hx, saturation=%#hx, brightness=%#hx, "
         "kelvin=%d, dim=%#hx, power=%#hx, label=%.*s, tags=%#jx",
-        gw->ip_addr, gw->port, lgtd_addrtoa(hdr->target.device_addr),
+        gw->ip_addr, gw->port,
+        LGTD_IEEE8023MACTOA(hdr->target.device_addr, addr),
         pkt->hue, pkt->saturation, pkt->brightness, pkt->kelvin,
         pkt->dim, pkt->power, LGTD_LIFX_LABEL_SIZE, pkt->label,
         (uintmax_t)pkt->tags
@@ -554,9 +566,11 @@
 {
     assert(gw && hdr && pkt);
 
+    char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "SET_POWER_STATE <-- [%s]:%hu - %s power=%#hx",
-        gw->ip_addr, gw->port, lgtd_addrtoa(hdr->target.device_addr), pkt->power
+        gw->ip_addr, gw->port,
+        LGTD_IEEE8023MACTOA(hdr->target.device_addr, addr), pkt->power
     );
 
     struct lgtd_lifx_bulb *b = lgtd_lifx_gateway_get_or_open_bulb(
@@ -596,13 +610,15 @@
     assert(tag_id >= -1);
     assert(tag_id < LGTD_LIFX_GATEWAY_MAX_TAGS);
 
+    char site[LGTD_LIFX_ADDR_STRLEN];
+    LGTD_IEEE8023MACTOA(gw->site.as_array, site);
+
     if (tag_id == -1) {
         tag_id = lgtd_lifx_wire_bitscan64_forward(~gw->tag_ids);
         if (tag_id == -1) {
             lgtd_warnx(
                 "no tag_id left for new tag [%s] on gw [%s]:%hu (site %s)",
-                tag_label, gw->ip_addr, gw->port,
-                lgtd_addrtoa(gw->site.as_array)
+                tag_label, gw->ip_addr, gw->port, site
             );
             return -1;
         }
@@ -614,14 +630,13 @@
         if (!tag) {
             lgtd_warn(
                 "couldn't allocate a new reference to tag [%s] (site %s)",
-                tag_label, lgtd_addrtoa(gw->site.as_array)
+                tag_label, site
             );
             return -1;
         }
         lgtd_debug(
             "tag_id %d allocated for tag [%s] on gw [%s]:%hu (site %s)",
-            tag_id, tag_label, gw->ip_addr, gw->port,
-            lgtd_addrtoa(gw->site.as_array)
+            tag_id, tag_label, gw->ip_addr, gw->port, site
         );
         gw->tag_ids |= LGTD_LIFX_WIRE_TAG_ID_TO_VALUE(tag_id);
         gw->tags[tag_id] = tag;
@@ -638,11 +653,12 @@
     assert(tag_id < LGTD_LIFX_GATEWAY_MAX_TAGS);
 
     if (gw->tag_ids & LGTD_LIFX_WIRE_TAG_ID_TO_VALUE(tag_id)) {
+        char site[LGTD_LIFX_ADDR_STRLEN];
         lgtd_debug(
             "tag_id %d deallocated for tag [%s] on gw [%s]:%hu (site %s)",
             tag_id, gw->tags[tag_id]->label,
             gw->ip_addr, gw->port,
-            lgtd_addrtoa(gw->site.as_array)
+            LGTD_IEEE8023MACTOA(gw->site.as_array, site)
         );
         lgtd_lifx_tagging_decref(gw->tags[tag_id], gw);
         gw->tag_ids &= ~LGTD_LIFX_WIRE_TAG_ID_TO_VALUE(tag_id);
@@ -657,9 +673,11 @@
 {
     assert(gw && hdr && pkt);
 
+    char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "SET_TAG_LABELS <-- [%s]:%hu - %s label=%.*s, tags=%jx",
-        gw->ip_addr, gw->port, lgtd_addrtoa(hdr->target.device_addr),
+        gw->ip_addr, gw->port,
+        LGTD_IEEE8023MACTOA(hdr->target.device_addr, addr),
         LGTD_LIFX_LABEL_SIZE, pkt->label, (uintmax_t)pkt->tags
     );
 
@@ -679,9 +697,11 @@
 {
     assert(gw && hdr && pkt);
 
+    char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "SET_TAGS <-- [%s]:%hu - %s tags=%#jx",
-        gw->ip_addr, gw->port, lgtd_addrtoa(hdr->target.device_addr),
+        gw->ip_addr, gw->port,
+        LGTD_IEEE8023MACTOA(hdr->target.device_addr, addr),
         (uintmax_t)pkt->tags
     );
 
@@ -692,6 +712,7 @@
         return;
     }
 
+    char bulb_addr[LGTD_LIFX_ADDR_STRLEN], site_addr[LGTD_LIFX_ADDR_STRLEN];
     int tag_id;
     LGTD_LIFX_WIRE_FOREACH_TAG_ID(tag_id, pkt->tags) {
         if (!(gw->tag_ids & LGTD_LIFX_WIRE_TAG_ID_TO_VALUE(tag_id))) {
@@ -699,8 +720,9 @@
                 "trying to set unknown tag_id %d (%#jx) "
                 "on bulb %s (%.*s), gw [%s]:%hu (site %s)",
                 tag_id, LGTD_LIFX_WIRE_TAG_ID_TO_VALUE(tag_id),
-                lgtd_addrtoa(b->addr), LGTD_LIFX_LABEL_SIZE, b->state.label,
-                gw->ip_addr, gw->port, lgtd_addrtoa(gw->site.as_array)
+                LGTD_IEEE8023MACTOA(b->addr, bulb_addr),
+                LGTD_LIFX_LABEL_SIZE, b->state.label, gw->ip_addr, gw->port,
+                LGTD_IEEE8023MACTOA(gw->site.as_array, site_addr)
             );
         }
     }
diff --git a/lifx/tagging.c b/lifx/tagging.c
--- a/lifx/tagging.c
+++ b/lifx/tagging.c
@@ -123,10 +123,11 @@
         if (dealloc_tag) {
             lgtd_info("discovered tag [%s]", tag_label);
         }
+        char site_addr[LGTD_LIFX_ADDR_STRLEN];
         lgtd_info(
             "tag [%s] added to gw [%s]:%hu (site %s) with tag_id %d",
             tag_label, gw->ip_addr, gw->port,
-            lgtd_addrtoa(gw->site.as_array), tag_id
+            LGTD_IEEE8023MACTOA(gw->site.as_array, site_addr), tag_id
         );
         site->gw = gw;
         site->tag_id = tag_id;
@@ -147,10 +148,11 @@
     struct lgtd_lifx_site *site;
     site = lgtd_lifx_tagging_find_site(&tag->sites, gw);
     if (site) {
+        char site_addr[LGTD_LIFX_ADDR_STRLEN];
         lgtd_debug(
             "tag [%s] removed from gw [%s]:%hu (site %s)",
             tag->label, gw->ip_addr, gw->port,
-            lgtd_addrtoa(gw->site.as_array)
+            LGTD_IEEE8023MACTOA(gw->site.as_array, site_addr)
         );
         LIST_REMOVE(site, link);
         free(site);
diff --git a/lifx/wire_proto.h b/lifx/wire_proto.h
--- a/lifx/wire_proto.h
+++ b/lifx/wire_proto.h
@@ -44,6 +44,7 @@
 enum { LGTD_LIFX_PROTOCOL_PORT = 56700 };
 
 enum { LGTD_LIFX_ADDR_LENGTH = 6 };
+enum { LGTD_LIFX_ADDR_STRLEN = 32 };
 
 #pragma pack(push, 1)
 
diff --git a/tests/core/proto/test_proto_tag_create.c b/tests/core/proto/test_proto_tag_create.c
--- a/tests/core/proto/test_proto_tag_create.c
+++ b/tests/core/proto/test_proto_tag_create.c
@@ -31,10 +31,12 @@
     }
 
     uint8_t expected_addr[LGTD_LIFX_ADDR_LENGTH] = { 1, 2, 3, 4, 5 };
+    char addr[LGTD_LIFX_ADDR_STRLEN], expected[LGTD_LIFX_ADDR_STRLEN];
     if (memcmp(bulb->addr, expected_addr, LGTD_LIFX_ADDR_LENGTH)) {
         errx(
             1, "got bulb with addr %s (expected %s)",
-            lgtd_addrtoa(bulb->addr), lgtd_addrtoa(expected_addr)
+            LGTD_IEEE8023MACTOA(bulb->addr, addr),
+            LGTD_IEEE8023MACTOA(expected_addr, expected)
         );
     }
 
diff --git a/tests/core/proto/test_proto_tag_update.c b/tests/core/proto/test_proto_tag_update.c
--- a/tests/core/proto/test_proto_tag_update.c
+++ b/tests/core/proto/test_proto_tag_update.c
@@ -33,10 +33,12 @@
     }
 
     uint8_t expected_addr[LGTD_LIFX_ADDR_LENGTH] = { 5, 4, 3, 2, 1 };
+    char addr[LGTD_LIFX_ADDR_STRLEN], expected[LGTD_LIFX_ADDR_STRLEN];
     if (memcmp(bulb->addr, expected_addr, LGTD_LIFX_ADDR_LENGTH)) {
         errx(
             1, "got bulb with addr %s (expected %s)",
-            lgtd_addrtoa(bulb->addr), lgtd_addrtoa(expected_addr)
+            LGTD_IEEE8023MACTOA(bulb->addr, addr),
+            LGTD_IEEE8023MACTOA(expected_addr, expected)
         );
     }
 
diff --git a/tests/core/proto/test_proto_untag.c b/tests/core/proto/test_proto_untag.c
--- a/tests/core/proto/test_proto_untag.c
+++ b/tests/core/proto/test_proto_untag.c
@@ -101,10 +101,12 @@
     }
 
     uint8_t expected_addr[LGTD_LIFX_ADDR_LENGTH] = { 5, 4, 3, 2, 1 };
+    char addr[LGTD_LIFX_ADDR_STRLEN], expected[LGTD_LIFX_ADDR_STRLEN];
     if (memcmp(bulb->addr, expected_addr, LGTD_LIFX_ADDR_LENGTH)) {
         errx(
             1, "got bulb with addr %s (expected %s)",
-            lgtd_addrtoa(bulb->addr), lgtd_addrtoa(expected_addr)
+            LGTD_IEEE8023MACTOA(bulb->addr, addr),
+            LGTD_IEEE8023MACTOA(expected_addr, expected)
         );
     }
 
diff --git a/tests/lifx/bulb/test_bulb_open.c b/tests/lifx/bulb/test_bulb_open.c
--- a/tests/lifx/bulb/test_bulb_open.c
+++ b/tests/lifx/bulb/test_bulb_open.c
@@ -14,10 +14,12 @@
         errx(1, "lgtd_lifx_bulb_open didn't return any bulb");
     }
 
+    char addr[LGTD_LIFX_ADDR_STRLEN], expected[LGTD_LIFX_ADDR_STRLEN];
     if (memcmp(bulb->addr, bulb_addr, LGTD_LIFX_ADDR_LENGTH)) {
         errx(
             1, "got bulb addr %s (expected %s)",
-            lgtd_addrtoa(bulb->addr), lgtd_addrtoa(bulb_addr)
+            LGTD_IEEE8023MACTOA(bulb->addr, addr),
+            LGTD_IEEE8023MACTOA(bulb_addr, expected)
         );
     }
 
diff --git a/tests/lifx/wire_proto/test_wire_proto_encode_decode_header.c b/tests/lifx/wire_proto/test_wire_proto_encode_decode_header.c
--- a/tests/lifx/wire_proto/test_wire_proto_encode_decode_header.c
+++ b/tests/lifx/wire_proto/test_wire_proto_encode_decode_header.c
@@ -78,10 +78,13 @@
     uint8_t expected_addr[LGTD_LIFX_ADDR_LENGTH] = {
         0, 0, 44, 0, 0, 0
     };
+    char expected_addr_buf[LGTD_LIFX_ADDR_STRLEN];
+    char dev_addr[LGTD_LIFX_ADDR_STRLEN];
     if (memcmp(hdr.target.device_addr, expected_addr, LGTD_LIFX_ADDR_LENGTH)) {
         lgtd_errx(
             1, "device addr = %s (expected = %s)",
-            lgtd_addrtoa(hdr.target.device_addr), lgtd_addrtoa(expected_addr)
+            LGTD_IEEE8023MACTOA(hdr.target.device_addr, dev_addr),
+            LGTD_IEEE8023MACTOA(expected_addr, expected_addr_buf)
         );
     }
     if (le16toh(hdr.packet_type) != LGTD_LIFX_ECHO_REQUEST) {
@@ -109,7 +112,8 @@
     if (memcmp(hdr.target.device_addr, expected_addr, LGTD_LIFX_ADDR_LENGTH)) {
         lgtd_errx(
             1, "device addr = %s (expected = %s)",
-            lgtd_addrtoa(hdr.target.device_addr), lgtd_addrtoa(expected_addr)
+            LGTD_IEEE8023MACTOA(hdr.target.device_addr, dev_addr),
+            LGTD_IEEE8023MACTOA(expected_addr, expected_addr_buf)
         );
     }
     if (hdr.size != 42) {
