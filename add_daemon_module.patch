# HG changeset patch
# Parent  fa84fd51301cf3bf3786f7e3c03031488f31d1ef
Actual support for daemonization with a nice process name

diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
+CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)  # first version TARGET_INCLUDE_DIRECTORIES
 
 PROJECT(LIGHTSD C)
 
@@ -22,28 +22,34 @@
 # TODO: we need at least 2.0.19-stable because of the logging defines
 FIND_PACKAGE(Event2 REQUIRED COMPONENTS core)
 FIND_PACKAGE(Endian REQUIRED)
+
+INCLUDE(CheckFunctionExists)
 INCLUDE(TestBigEndian)
+INCLUDE(CompatSetProctitle)
 INCLUDE(CompatTimeMonotonic)
 
-TEST_BIG_ENDIAN(LGTD_BIG_ENDIAN_SYSTEM)
+TEST_BIG_ENDIAN(BIG_ENDIAN_SYSTEM)
 
 ### Global definitions #########################################################
 
 INCLUDE(AddAllSubdirectories)
 INCLUDE(AddTestFromSources)
 
-SET(CMAKE_C_FLAGS "-pipe -Wextra -Wall -Wstrict-prototypes -std=c99")
+SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pipe -Wextra -Wall -Wstrict-prototypes -std=c99")
 
-ADD_DEFINITIONS("-DLGTD_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P}")
-ADD_DEFINITIONS("-DLGTD_BIG_ENDIAN_SYSTEM=${LGTD_BIG_ENDIAN_SYSTEM}")
-
-# Only relevant for the GNU libc:
 ADD_DEFINITIONS(
+    # Only relevant for the GNU libc:
     "-D_POSIX_C_SOURCE=200809L"
     "-D_BSD_SOURCE=1"
     "-D_DEFAULT_SOURCE=1"
 
     "-D_DARWIN_C_SOURCE=1"
+
+    "-DLGTD_BIG_ENDIAN_SYSTEM=${BIG_ENDIAN_SYSTEM}"
+    "-DLGTD_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P}"
+
+    "-DLGTD_HAVE_LIBBSD=${HAVE_LIBBSD}"
+    "-DLGTD_HAVE_PROCTITLE=${HAVE_PROCTITLE}"
 )
 
 IF (CMAKE_BUILD_TYPE MATCHES "DEBUG")
@@ -54,10 +60,11 @@
 ENDIF ()
 
 INCLUDE_DIRECTORIES(
-    ${LIGHTSD_SOURCE_DIR}/compat/generic
     ${LIGHTSD_BINARY_DIR}/compat
+    ${LIGHTSD_BINARY_DIR}/compat/generic
 )
 
+ADD_SUBDIRECTORY(compat)
 ADD_SUBDIRECTORY(core)
 ADD_SUBDIRECTORY(lifx)
 ADD_SUBDIRECTORY(tests)
diff --git a/CMakeScripts/AddTestFromSources.cmake b/CMakeScripts/AddTestFromSources.cmake
--- a/CMakeScripts/AddTestFromSources.cmake
+++ b/CMakeScripts/AddTestFromSources.cmake
@@ -1,11 +1,11 @@
-FUNCTION(ADD_TEST_FROM_C_SOURCES TEST_SOURCE TEST_LIB)
+FUNCTION(ADD_TEST_FROM_C_SOURCES TEST_SOURCE)
     STRING(LENGTH ${TEST_SOURCE} TEST_NAME_LEN)
     STRING(LENGTH "test_" PREFIX_LEN)
     MATH(EXPR TEST_NAME_LEN "${TEST_NAME_LEN} - 2 - ${PREFIX_LEN}")
     STRING(SUBSTRING ${ARGV0} ${PREFIX_LEN} ${TEST_NAME_LEN} TEST_NAME)
-    ADD_EXECUTABLE(${TEST_NAME} ${TEST_SOURCE} ${ARGN})
-    IF (TEST_LIB)
-        TARGET_LINK_LIBRARIES(${TEST_NAME} ${TEST_LIB})
+    ADD_EXECUTABLE(${TEST_NAME} ${TEST_SOURCE})
+    IF (ARGN)
+        TARGET_LINK_LIBRARIES(${TEST_NAME} ${ARGN})
     ENDIF ()
     ADD_TEST(test_${TEST_NAME} ${TEST_NAME})
 ENDFUNCTION()
diff --git a/CMakeScripts/CompatSetProctitle.cmake b/CMakeScripts/CompatSetProctitle.cmake
new file mode 100644
--- /dev/null
+++ b/CMakeScripts/CompatSetProctitle.cmake
@@ -0,0 +1,20 @@
+IF (NOT HAVE_PROCTITLE)
+    SET(CMAKE_REQUIRED_QUIET TRUE)
+    SET(HAVE_PROCTITLE 0 CACHE INTERNAL "setproctitle found in libbsd")
+    SET(HAVE_LIBBSD 0 CACHE INTERNAL "libbsd found")
+    MESSAGE(STATUS "Looking for setproctitle")
+    CHECK_FUNCTION_EXISTS("setproctitle" HAVE_PROCTITLE)
+    IF (NOT HAVE_PROCTITLE)
+        MESSAGE(STATUS "Looking for setproctitle - not found, falling back on libbsd")
+        FIND_PACKAGE(LibBSD)
+        IF (NOT LibBSD_FOUND)
+            MESSAGE(STATUS "Couldn't find setproctitle, no fancy report in the process list")
+        ELSE ()
+            SET(HAVE_PROCTITLE 1 CACHE INTERNAL "setproctitle found in libbsd")
+            SET(HAVE_LIBBSD 1 CACHE INTERNAL "libbsd found")
+        ENDIF ()
+    ELSE ()
+        SET(HAVE_PROCTITLE 1 CACHE INTERNAL "setproctitle found on the system")
+    ENDIF ()
+    UNSET(CMAKE_REQUIRED_QUIET)
+ENDIF ()
diff --git a/CMakeScripts/CompatTimeMonotonic.cmake b/CMakeScripts/CompatTimeMonotonic.cmake
--- a/CMakeScripts/CompatTimeMonotonic.cmake
+++ b/CMakeScripts/CompatTimeMonotonic.cmake
@@ -1,5 +1,3 @@
-INCLUDE(CheckFunctionExists)
-
 IF (NOT TIME_MONOTONIC_LIBRARY)
     SET(COMPAT_TIME_MONOTONIC_IMPL "${LIGHTSD_SOURCE_DIR}/compat/${CMAKE_SYSTEM_NAME}/time_monotonic.c")
     SET(COMPAT_TIME_MONOTONIC_H "${LIGHTSD_SOURCE_DIR}/compat/${CMAKE_SYSTEM_NAME}/time_monotonic.h")
diff --git a/CMakeScripts/FindLibBSD.cmake b/CMakeScripts/FindLibBSD.cmake
new file mode 100644
--- /dev/null
+++ b/CMakeScripts/FindLibBSD.cmake
@@ -0,0 +1,10 @@
+FIND_PATH(LIBBSD_INCLUDE_DIR bsd.h PATH_SUFFIXES bsd)
+
+FIND_LIBRARY(LIBBSD_LIBRARY bsd)
+IF(LIBBSD_LIBRARY)
+    SET(LibBSD_FOUND TRUE)
+ENDIF()
+
+INCLUDE(FindPackageHandleStandardArgs)
+
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibBSD DEFAULT_MSG LIBBSD_LIBRARY LIBBSD_INCLUDE_DIR)
diff --git a/README.rst b/README.rst
--- a/README.rst
+++ b/README.rst
@@ -65,6 +65,9 @@
 - CMake ≥ 2.8;
 - libevent ≥ 2.0.19.
 
+lightsd optionally depends on libbsd ≥ 0.5.0 on platforms missing
+``setproctitle`` (pretty much any non-BSD system, including Mac OS X).
+
 lightsd is actively developed and tested from Arch Linux, Debian and Mac OS X;
 both for 32/64 bits and little/big endian architectures.
 
@@ -86,4 +89,19 @@
 
    .../lightsd/build$ core/lightsd -v info -l ::1:1234
 
+lightsd forks in the background by default, display running processes and check
+how we are doing:
+
+::
+
+   ps aux | grep lightsd
+
+You can stop lightsd with:
+
+::
+
+   pkill lightsd
+
+Use the ``-f`` option to run lightsd in the foreground.
+
 .. vim: set tw=80 spelllang=en spell:
diff --git a/compat/CMakeLists.txt b/compat/CMakeLists.txt
new file mode 100644
--- /dev/null
+++ b/compat/CMakeLists.txt
@@ -0,0 +1,1 @@
+ADD_SUBDIRECTORY(generic)
diff --git a/compat/generic/CMakeLists.txt b/compat/generic/CMakeLists.txt
new file mode 100644
--- /dev/null
+++ b/compat/generic/CMakeLists.txt
@@ -0,0 +1,1 @@
+FILE(COPY sys DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
diff --git a/core/CMakeLists.txt b/core/CMakeLists.txt
--- a/core/CMakeLists.txt
+++ b/core/CMakeLists.txt
@@ -15,6 +15,7 @@
 ADD_EXECUTABLE(
     lightsd
     client.c
+    daemon.c
     jsmn.c
     jsonrpc.c
     listen.c
@@ -23,6 +24,7 @@
     pipe.c
     proto.c
     router.c
+    stats.c
 )
 
 TARGET_LINK_LIBRARIES(
@@ -31,3 +33,7 @@
     ${EVENT2_CORE_LIBRARY}
     ${TIME_MONOTONIC_LIBRARY}
 )
+
+IF (HAVE_LIBBSD)
+    TARGET_LINK_LIBRARIES(lightsd ${LIBBSD_LIBRARY})
+ENDIF (HAVE_LIBBSD)
diff --git a/core/client.c b/core/client.c
--- a/core/client.c
+++ b/core/client.c
@@ -34,6 +34,8 @@
 #include "jsonrpc.h"
 #include "client.h"
 #include "proto.h"
+#include "stats.h"
+#include "daemon.h"
 #include "lightsd.h"
 
 struct lgtd_client_list lgtd_clients = LIST_HEAD_INITIALIZER(&lgtd_clients);
@@ -44,6 +46,8 @@
     assert(client);
     assert(client->io);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(clients, -1);
+
     LIST_REMOVE(client, link);
     bufferevent_free(client->io);
     free(client);
@@ -217,6 +221,8 @@
 
     LIST_INSERT_HEAD(&lgtd_clients, client, link);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(clients, 1);
+
     return client;
 }
 
diff --git a/core/daemon.c b/core/daemon.c
new file mode 100644
--- /dev/null
+++ b/core/daemon.c
@@ -0,0 +1,155 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+//
+// This file is part of lighstd.
+//
+// lighstd is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// lighstd is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with lighstd.  If not, see <http://www.gnu.org/licenses/>.
+
+#include <sys/queue.h>
+#include <sys/tree.h>
+#include <sys/types.h>
+#include <endian.h>
+#include <fcntl.h>
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#if LGTD_HAVE_LIBBSD
+#include <bsd/bsd.h>
+#endif
+
+#include <event2/util.h>
+
+#include "time_monotonic.h"
+#include "lifx/wire_proto.h"
+#include "lifx/bulb.h"
+#include "lifx/gateway.h"
+#include "jsmn.h"
+#include "jsonrpc.h"
+#include "client.h"
+#include "listen.h"
+#include "daemon.h"
+#include "pipe.h"
+#include "stats.h"
+#include "lightsd.h"
+
+bool
+lgtd_daemon_unleash(void)
+{
+    if (chdir("/")) {
+        return false;
+    }
+
+    int null = open("/dev/null", O_RDWR);
+    if (null == -1) {
+        return false;
+    }
+
+    const int fds[] = { STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO };
+    for (int i = 0; i != LGTD_ARRAY_SIZE(fds); ++i) {
+        if (dup2(null, fds[i]) == -1) {
+            close(null);
+            return false;
+        }
+    }
+    close(null);
+
+#define SUMMON()  do {        \
+    switch (fork()) {       \
+        case 0:             \
+            break;          \
+        case -1:            \
+            return false;   \
+        default:            \
+            exit(0);        \
+    }                       \
+} while (0)
+
+    SUMMON(); // \_o< !
+    setsid();
+
+    SUMMON(); // \_o< !!
+
+    return true; // welcome to UNIX!
+}
+
+void
+lgtd_daemon_setup_proctitle(int argc, char *argv[], char *envp[])
+{
+#if LGTD_HAVE_LIBBSD
+    setproctitle_init(argc, argv, envp);
+    lgtd_daemon_update_proctitle();
+#else
+    (void)argc;
+    (void)argv;
+    (void)envp;
+#endif
+}
+
+void
+lgtd_daemon_update_proctitle(void)
+{
+#if LGTD_HAVE_PROCTITLE
+    char title[LGTD_DAEMON_TITLE_SIZE] = { 0 };
+    int i = 0;
+
+#define TITLE_APPEND(fmt, ...) do {                                         \
+    int n = snprintf((&title[i]), (sizeof(title) - i), (fmt), __VA_ARGS__); \
+    i = LGTD_MIN(i + n, (int)sizeof(title));                                \
+} while (0)
+
+#define PREFIX(fmt, ...) TITLE_APPEND(                              \
+    "%s" fmt, (i && title[i - 1] == ')' ? "; " : ""), __VA_ARGS__   \
+)
+
+#define ADD_ITEM(fmt, ...) TITLE_APPEND(                            \
+    "%s" fmt, (i && title[i - 1] != '(' ? ", " : ""), __VA_ARGS__   \
+)
+#define LOOP(list_type, list, elem_type, prefix, ...) do {    \
+    if (!list_type ## _EMPTY(list)) {                         \
+        PREFIX("%s(", prefix);                                \
+        elem_type *it;                                        \
+        list_type ## _FOREACH(it, list, link) {               \
+            ADD_ITEM(__VA_ARGS__);                            \
+        }                                                     \
+        TITLE_APPEND("%s", ")");                              \
+    }                                                         \
+} while (0)
+
+    LOOP(
+        SLIST, &lgtd_listeners, struct lgtd_listen,
+        "listening_on", "%s:[%s]", it->addr, it->port
+    );
+
+    LOOP(
+        SLIST, &lgtd_command_pipes, struct lgtd_command_pipe,
+        "command_pipes", "%s", it->path
+    );
+
+    if (!LIST_EMPTY(&lgtd_lifx_gateways)) {
+        PREFIX("lifx_gateways(found=%d)", LGTD_STATS_GET(gateways));
+    }
+
+    PREFIX(
+        "bulbs(found=%d, on=%d)",
+        LGTD_STATS_GET(bulbs), LGTD_STATS_GET(bulbs_powered_on)
+    );
+
+    PREFIX("clients(connected=%d)", LGTD_STATS_GET(clients));
+
+    setproctitle("%s", title);
+#endif
+}
diff --git a/core/daemon.h b/core/daemon.h
new file mode 100644
--- /dev/null
+++ b/core/daemon.h
@@ -0,0 +1,24 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+//
+// This file is part of lighstd.
+//
+// lighstd is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// lighstd is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with lighstd.  If not, see <http://www.gnu.org/licenses/>.
+
+#pragma once
+
+enum { LGTD_DAEMON_TITLE_SIZE = 2048 };
+
+bool lgtd_daemon_unleash(void); // \_o<
+void lgtd_daemon_setup_proctitle(int, char *[], char *[]);
+void lgtd_daemon_update_proctitle(void);
diff --git a/core/lightsd.c b/core/lightsd.c
--- a/core/lightsd.c
+++ b/core/lightsd.c
@@ -47,6 +47,7 @@
 #include "client.h"
 #include "pipe.h"
 #include "listen.h"
+#include "daemon.h"
 #include "lightsd.h"
 
 struct lgtd_opts lgtd_opts = {
@@ -142,8 +143,10 @@
 }
 
 int
-main(int argc, char *argv[])
+main(int argc, char *argv[], char *envp[])
 {
+    lgtd_daemon_setup_proctitle(argc, argv, envp);
+
     lgtd_configure_libevent();
     lgtd_configure_signal_handling();
 
@@ -217,6 +220,10 @@
         lgtd_err(1, "can't setup lightsd");
     }
 
+    if (!lgtd_opts.foreground && !lgtd_daemon_unleash()) {
+        lgtd_err(1, "can't fork to the background");
+    }
+
     lgtd_lifx_timer_start_discovery();
 
     event_base_dispatch(lgtd_ev_base);
diff --git a/core/listen.c b/core/listen.c
--- a/core/listen.c
+++ b/core/listen.c
@@ -30,6 +30,7 @@
 #include "jsonrpc.h"
 #include "client.h"
 #include "listen.h"
+#include "daemon.h"
 #include "lightsd.h"
 
 struct lgtd_listen_list lgtd_listeners =
@@ -69,6 +70,8 @@
         evconnlistener_free(listener->evlistener);
         free(listener);
     }
+
+    lgtd_daemon_update_proctitle();
 }
 
 bool
@@ -130,6 +133,8 @@
 
     evutil_freeaddrinfo(res);
 
+    lgtd_daemon_update_proctitle();
+
     return true;
 
 error:
diff --git a/core/listen.h b/core/listen.h
--- a/core/listen.h
+++ b/core/listen.h
@@ -17,6 +17,8 @@
 
 #pragma once
 
+struct evconnlistener;
+
 struct lgtd_listen {
     SLIST_ENTRY(lgtd_listen)    link;
     const char                  *addr;
@@ -25,5 +27,7 @@
 };
 SLIST_HEAD(lgtd_listen_list, lgtd_listen);
 
+extern struct lgtd_listen_list lgtd_listeners;
+
 bool lgtd_listen_open(const char *, const char *);
 void lgtd_listen_close_all(void);
diff --git a/core/log.c b/core/log.c
--- a/core/log.c
+++ b/core/log.c
@@ -28,9 +28,14 @@
 #include <stdio.h>
 #include <time.h>
 
+#if LGTD_HAVE_LIBBSD
+#include <bsd/unistd.h>
+#endif
+
 #include <event2/event.h>
 
 #include "lifx/wire_proto.h"
+#include "stats.h"
 #include "lightsd.h"
 
 static void
diff --git a/core/stats.c b/core/stats.c
new file mode 100644
--- /dev/null
+++ b/core/stats.c
@@ -0,0 +1,47 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+//
+// This file is part of lighstd.
+//
+// lighstd is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// lighstd is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with lighstd.  If not, see <http://www.gnu.org/licenses/>.
+
+#include <assert.h>
+#include <stdint.h>
+
+#include "stats.h"
+
+struct lgtd_stats lgtd_counters = { .gateways = 0 };
+
+void
+lgtd_stats_add(int offset, int value)
+{
+    assert(offset >= 0);
+    assert(offset < (int)sizeof(lgtd_counters));
+    assert(offset % sizeof(int) == 0);
+
+    int *counter = (int *)((uint8_t *)&lgtd_counters + offset);
+
+    assert(*counter + value >= 0);
+
+    *counter += value;
+}
+
+int
+lgtd_stats_get(int offset)
+{
+    assert(offset >= 0);
+    assert(offset < (int)sizeof(lgtd_counters));
+    assert(offset % sizeof(int) == 0);
+
+    return *(int *)((uint8_t *)&lgtd_counters + offset);
+}
diff --git a/core/stats.h b/core/stats.h
new file mode 100644
--- /dev/null
+++ b/core/stats.h
@@ -0,0 +1,35 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+//
+// This file is part of lighstd.
+//
+// lighstd is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// lighstd is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with lighstd.  If not, see <http://www.gnu.org/licenses/>.
+
+#pragma once
+
+struct lgtd_stats {
+    int gateways;
+    int bulbs;
+    int bulbs_powered_on;
+    int clients;
+};
+
+void lgtd_stats_add(int, int);
+int lgtd_stats_get(int);
+
+#define LGTD_STATS_GET(name) lgtd_stats_get(offsetof(struct lgtd_stats, name))
+
+#define LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(name, value) do {           \
+    lgtd_stats_add(offsetof(struct lgtd_stats, name), (value));         \
+    lgtd_daemon_update_proctitle();                                     \
+} while (0)
diff --git a/lifx/bulb.c b/lifx/bulb.c
--- a/lifx/bulb.c
+++ b/lifx/bulb.c
@@ -32,6 +32,8 @@
 #include "core/time_monotonic.h"
 #include "bulb.h"
 #include "gateway.h"
+#include "core/daemon.h"
+#include "core/stats.h"
 #include "core/lightsd.h"
 
 struct lgtd_lifx_bulb_map lgtd_lifx_bulbs_table =
@@ -62,6 +64,7 @@
     bulb->gw = gw;
     memcpy(bulb->addr, addr, sizeof(bulb->addr));
     RB_INSERT(lgtd_lifx_bulb_map, &lgtd_lifx_bulbs_table, bulb);
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(bulbs, 1);
 
     bulb->last_light_state_at = lgtd_time_monotonic_msecs();
 
@@ -74,6 +77,10 @@
     assert(bulb);
     assert(bulb->gw);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(bulbs, -1);
+    if (bulb->state.power == LGTD_LIFX_POWER_ON) {
+        LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(bulbs_powered_on, -1);
+    }
     RB_REMOVE(lgtd_lifx_bulb_map, &lgtd_lifx_bulbs_table, bulb);
     SLIST_REMOVE(&bulb->gw->bulbs, bulb, lgtd_lifx_bulb, link_by_gw);
     lgtd_info(
@@ -94,6 +101,13 @@
 {
     assert(bulb);
     assert(state);
+
+    if (state->power != bulb->state.power) {
+        LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(
+            bulbs_powered_on, state->power == LGTD_LIFX_POWER_ON ? 1 : -1
+        );
+    }
+
     bulb->last_light_state_at = received_at;
     memcpy(&bulb->state, state, sizeof(bulb->state));
 }
@@ -102,5 +116,12 @@
 lgtd_lifx_bulb_set_power_state(struct lgtd_lifx_bulb *bulb, uint16_t power)
 {
     assert(bulb);
+
+    if (power != bulb->state.power) {
+        LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(
+            bulbs_powered_on, power == LGTD_LIFX_POWER_ON ? 1 : -1
+        );
+    }
+
     bulb->state.power = power;
 }
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -44,6 +44,8 @@
 #include "core/client.h"
 #include "core/proto.h"
 #include "core/router.h"
+#include "core/stats.h"
+#include "core/daemon.h"
 #include "core/lightsd.h"
 
 struct lgtd_lifx_gateway_list lgtd_lifx_gateways =
@@ -54,6 +56,7 @@
 {
     assert(gw);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(gateways, -1);
     event_del(gw->refresh_ev);
     event_del(gw->write_ev);
     if (gw->socket != -1) {
@@ -284,6 +287,8 @@
     // will stop by itself:
     lgtd_lifx_timer_start_watchdog();
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(gateways, 1);
+
     return gw;
 
 error_allocate:
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -1,1 +1,14 @@
+FUNCTION(ADD_CORE_LIBRARY LIBNAME)
+    ADD_LIBRARY(${LIBNAME} ${ARGN})
+    TARGET_LINK_LIBRARIES(${LIBNAME} ${TIME_MONOTONIC_LIBRARY})
+    TARGET_INCLUDE_DIRECTORIES(
+        ${LIBNAME} PUBLIC
+        ${LIGHTSD_SOURCE_DIR}/core/
+        ${LIGHTSD_BINARY_DIR}/core/
+    )
+    IF (HAVE_LIBBSD)
+        TARGET_LINK_LIBRARIES(${LIBNAME} ${LIBBSD_LIBRARY})
+    ENDIF (HAVE_LIBBSD)
+ENDFUNCTION()
+
 ADD_ALL_SUBDIRECTORIES()
diff --git a/tests/core/daemon/CMakeLists.txt b/tests/core/daemon/CMakeLists.txt
new file mode 100644
--- /dev/null
+++ b/tests/core/daemon/CMakeLists.txt
@@ -0,0 +1,24 @@
+INCLUDE_DIRECTORIES(
+    ${CMAKE_CURRENT_SOURCE_DIR}
+    ${CMAKE_CURRENT_BINARY_DIR}
+)
+
+ADD_CORE_LIBRARY(
+    test_core_daemon STATIC
+    ${LIGHTSD_SOURCE_DIR}/core/log.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
+    ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
+    ${LIGHTSD_SOURCE_DIR}/lifx/tagging.c
+    ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
+)
+
+FUNCTION(ADD_DAEMON_TEST TEST_SOURCE)
+    ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_core_daemon)
+ENDFUNCTION()
+
+FILE(GLOB TESTS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "test_*.c")
+FOREACH(TEST ${TESTS})
+    ADD_DAEMON_TEST(${TEST})
+ENDFOREACH()
diff --git a/tests/core/daemon/mock_pipe.h b/tests/core/daemon/mock_pipe.h
new file mode 100644
--- /dev/null
+++ b/tests/core/daemon/mock_pipe.h
@@ -0,0 +1,4 @@
+#pragma once
+
+struct lgtd_command_pipe_list lgtd_command_pipes =
+    SLIST_HEAD_INITIALIZER(&lgtd_command_pipes);
diff --git a/tests/core/daemon/test_daemon_update_proctitle.c b/tests/core/daemon/test_daemon_update_proctitle.c
new file mode 100644
--- /dev/null
+++ b/tests/core/daemon/test_daemon_update_proctitle.c
@@ -0,0 +1,109 @@
+void mock_setproctitle(const char *fmt, ...)
+    __attribute__((format(printf, 1, 2)));
+
+#undef LGTD_HAVE_LIBBSD
+#undef LGTD_HAVE_PROCTITLE
+#define LGTD_HAVE_PROCTITLE 1
+#define setproctitle mock_setproctitle
+#include "daemon.c"
+
+#include <err.h>
+
+#include "mock_gateway.h"
+#include "mock_pipe.h"
+
+#include "tests_utils.h"
+
+const char *expected = "";
+int setproctitle_call_count = 0;
+
+void
+mock_setproctitle(const char *fmt, ...)
+{
+    if (strcmp(fmt, "%s")) {
+        errx(1, "unexepected format %s (expected %%s)", fmt);
+    }
+
+    va_list ap;
+    va_start(ap, fmt);
+    const char *title = va_arg(ap, const char *);
+    va_end(ap);
+
+    if (strcmp(title, expected)) {
+        errx(1, "unexpected title: %s (expected %s)", title, expected);
+    }
+
+    setproctitle_call_count++;
+}
+
+int
+main(void)
+{
+    expected = "bulbs(found=0, on=0); clients(connected=0)";
+    lgtd_daemon_update_proctitle();
+    if (setproctitle_call_count != 1) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    expected = (
+        "lifx_gateways(found=1); "
+        "bulbs(found=0, on=0); "
+        "clients(connected=0)"
+    );
+    struct lgtd_lifx_gateway *gw_1 = lgtd_tests_insert_mock_gateway(1);
+    if (setproctitle_call_count != 2) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    expected = (
+        "lifx_gateways(found=1); "
+        "bulbs(found=1, on=0); "
+        "clients(connected=0)"
+    );
+    lgtd_tests_insert_mock_bulb(gw_1, 2);
+    expected = (
+        "lifx_gateways(found=1); "
+        "bulbs(found=2, on=0); "
+        "clients(connected=0)"
+    );
+    lgtd_tests_insert_mock_bulb(gw_1, 3);
+    if (setproctitle_call_count != 4) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    expected = (
+        "listening_on(foobar.com:[1234]); "
+        "lifx_gateways(found=1); "
+        "bulbs(found=2, on=0); "
+        "clients(connected=0)"
+    );
+    lgtd_tests_insert_mock_listener("foobar.com", "1234");
+    lgtd_daemon_update_proctitle();
+    if (setproctitle_call_count != 5) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    expected = (
+        "listening_on(foobar.com:[1234]); "
+        "lifx_gateways(found=1); "
+        "bulbs(found=2, on=1); "
+        "clients(connected=0)"
+    );
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(bulbs_powered_on, 1);
+    if (setproctitle_call_count != 6) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    expected = (
+        "listening_on(foobar.com:[1234]); "
+        "lifx_gateways(found=1); "
+        "bulbs(found=2, on=1); "
+        "clients(connected=1)"
+    );
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(clients, 1);
+    if (setproctitle_call_count != 7) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    return 0;
+}
diff --git a/tests/core/jsonrpc/CMakeLists.txt b/tests/core/jsonrpc/CMakeLists.txt
--- a/tests/core/jsonrpc/CMakeLists.txt
+++ b/tests/core/jsonrpc/CMakeLists.txt
@@ -3,16 +3,16 @@
     ${CMAKE_CURRENT_BINARY_DIR}
 )
 
-ADD_LIBRARY(
+ADD_CORE_LIBRARY(
     test_core_jsonrpc STATIC
     ${LIGHTSD_SOURCE_DIR}/core/jsmn.c
     ${LIGHTSD_SOURCE_DIR}/core/log.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
-TARGET_LINK_LIBRARIES(test_core_jsonrpc ${TIME_MONOTONIC_LIBRARY})
 
 FUNCTION(ADD_JSONRPC_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_core_jsonrpc)
diff --git a/tests/core/mock_daemon.h b/tests/core/mock_daemon.h
new file mode 100644
--- /dev/null
+++ b/tests/core/mock_daemon.h
@@ -0,0 +1,8 @@
+#pragma once
+
+#ifndef MOCKED_DAEMON_UPDATE_PROCTITLE
+void
+lgtd_daemon_update_proctitle(void)
+{
+}
+#endif
diff --git a/tests/core/pipe/CMakeLists.txt b/tests/core/pipe/CMakeLists.txt
--- a/tests/core/pipe/CMakeLists.txt
+++ b/tests/core/pipe/CMakeLists.txt
@@ -7,6 +7,7 @@
     test_core_pipe STATIC
     ${LIGHTSD_SOURCE_DIR}/core/jsmn.c
     ${LIGHTSD_SOURCE_DIR}/core/log.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/tagging.c
     ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
diff --git a/tests/core/pipe/tests_pipe_utils.h b/tests/core/pipe/tests_pipe_utils.h
--- a/tests/core/pipe/tests_pipe_utils.h
+++ b/tests/core/pipe/tests_pipe_utils.h
@@ -1,5 +1,7 @@
 #pragma once
 
+#include "mock_daemon.h"
+
 #ifndef MOCKED_CLIENT_OPEN_FROM_PIPE
 void
 lgtd_client_open_from_pipe(struct lgtd_client *pipe_client)
diff --git a/tests/core/proto/CMakeLists.txt b/tests/core/proto/CMakeLists.txt
--- a/tests/core/proto/CMakeLists.txt
+++ b/tests/core/proto/CMakeLists.txt
@@ -3,10 +3,11 @@
     ${CMAKE_CURRENT_BINARY_DIR}
 )
 
-ADD_LIBRARY(
+ADD_CORE_LIBRARY(
     test_core_proto STATIC
     ${LIGHTSD_SOURCE_DIR}/core/log.c
     ${LIGHTSD_SOURCE_DIR}/core/jsonrpc.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/tagging.c
     ${LIGHTSD_SOURCE_DIR}/lifx/timer.c
@@ -14,7 +15,6 @@
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
-TARGET_LINK_LIBRARIES(test_core_proto ${TIME_MONOTONIC_LIBRARY})
 
 FUNCTION(ADD_PROTO_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_core_proto)
diff --git a/tests/core/proto/test_proto_get_light_state.c b/tests/core/proto/test_proto_get_light_state.c
--- a/tests/core/proto/test_proto_get_light_state.c
+++ b/tests/core/proto/test_proto_get_light_state.c
@@ -1,6 +1,8 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
+#include "mock_gateway.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_get_light_state_empty_device_list.c b/tests/core/proto/test_proto_get_light_state_empty_device_list.c
--- a/tests/core/proto/test_proto_get_light_state_empty_device_list.c
+++ b/tests/core/proto/test_proto_get_light_state_empty_device_list.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_get_light_state_null_device_list.c b/tests/core/proto/test_proto_get_light_state_null_device_list.c
--- a/tests/core/proto/test_proto_get_light_state_null_device_list.c
+++ b/tests/core/proto/test_proto_get_light_state_null_device_list.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_power_off.c b/tests/core/proto/test_proto_power_off.c
--- a/tests/core/proto/test_proto_power_off.c
+++ b/tests/core/proto/test_proto_power_off.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
@@ -38,7 +39,7 @@
 lgtd_client_send_response(struct lgtd_client *client, const char *msg)
 {
     if (!client) {
-        errx(1, "client shouldn't ne NULL");
+        errx(1, "client shouldn't be NULL");
     }
 
     if (strcmp(msg, "true")) {
diff --git a/tests/core/proto/test_proto_power_off_routing_error.c b/tests/core/proto/test_proto_power_off_routing_error.c
--- a/tests/core/proto/test_proto_power_off_routing_error.c
+++ b/tests/core/proto/test_proto_power_off_routing_error.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_power_on.c b/tests/core/proto/test_proto_power_on.c
--- a/tests/core/proto/test_proto_power_on.c
+++ b/tests/core/proto/test_proto_power_on.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_power_on_routing_error.c b/tests/core/proto/test_proto_power_on_routing_error.c
--- a/tests/core/proto/test_proto_power_on_routing_error.c
+++ b/tests/core/proto/test_proto_power_on_routing_error.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_set_light_from_hsbk.c b/tests/core/proto/test_proto_set_light_from_hsbk.c
--- a/tests/core/proto/test_proto_set_light_from_hsbk.c
+++ b/tests/core/proto/test_proto_set_light_from_hsbk.c
@@ -3,6 +3,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c b/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
--- a/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
+++ b/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
@@ -3,6 +3,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_set_waveform.c b/tests/core/proto/test_proto_set_waveform.c
--- a/tests/core/proto/test_proto_set_waveform.c
+++ b/tests/core/proto/test_proto_set_waveform.c
@@ -3,6 +3,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_set_waveform_on_routing_error.c b/tests/core/proto/test_proto_set_waveform_on_routing_error.c
--- a/tests/core/proto/test_proto_set_waveform_on_routing_error.c
+++ b/tests/core/proto/test_proto_set_waveform_on_routing_error.c
@@ -3,6 +3,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/router/CMakeLists.txt b/tests/core/router/CMakeLists.txt
--- a/tests/core/router/CMakeLists.txt
+++ b/tests/core/router/CMakeLists.txt
@@ -3,10 +3,11 @@
     ${CMAKE_CURRENT_BINARY_DIR}
 )
 
-ADD_LIBRARY(
+ADD_CORE_LIBRARY(
     test_core_router STATIC
     ${LIGHTSD_SOURCE_DIR}/core/log.c
     ${LIGHTSD_SOURCE_DIR}/core/proto.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/tagging.c
     ${LIGHTSD_SOURCE_DIR}/lifx/timer.c
@@ -15,11 +16,7 @@
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
 
-TARGET_LINK_LIBRARIES(
-    test_core_router
-    ${EVENT2_CORE_LIBRARY}
-    ${TIME_MONOTONIC_LIBRARY}
-)
+TARGET_LINK_LIBRARIES(test_core_router ${EVENT2_CORE_LIBRARY})
 
 FUNCTION(ADD_ROUTER_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_core_router)
diff --git a/tests/core/router/test_router_send_to_broadcast.c b/tests/core/router/test_router_send_to_broadcast.c
--- a/tests/core/router/test_router_send_to_broadcast.c
+++ b/tests/core/router/test_router_send_to_broadcast.c
@@ -1,6 +1,8 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
+
 #include "tests_router_utils.h"
 
 int
diff --git a/tests/core/router/test_router_send_to_device.c b/tests/core/router/test_router_send_to_device.c
--- a/tests/core/router/test_router_send_to_device.c
+++ b/tests/core/router/test_router_send_to_device.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/router/test_router_send_to_invalid_targets.c b/tests/core/router/test_router_send_to_invalid_targets.c
--- a/tests/core/router/test_router_send_to_invalid_targets.c
+++ b/tests/core/router/test_router_send_to_invalid_targets.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/router/test_router_send_to_label.c b/tests/core/router/test_router_send_to_label.c
--- a/tests/core/router/test_router_send_to_label.c
+++ b/tests/core/router/test_router_send_to_label.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/router/test_router_send_to_tag.c b/tests/core/router/test_router_send_to_tag.c
--- a/tests/core/router/test_router_send_to_tag.c
+++ b/tests/core/router/test_router_send_to_tag.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/router/test_router_targets_to_devices.c b/tests/core/router/test_router_targets_to_devices.c
--- a/tests/core/router/test_router_targets_to_devices.c
+++ b/tests/core/router/test_router_targets_to_devices.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/tests_utils.c b/tests/core/tests_utils.c
--- a/tests/core/tests_utils.c
+++ b/tests/core/tests_utils.c
@@ -24,6 +24,9 @@
 #include "core/jsonrpc.h"
 #include "core/client.h"
 #include "core/proto.h"
+#include "core/listen.h"
+#include "core/daemon.h"
+#include "core/stats.h"
 #include "lifx/bulb.h"
 #include "lifx/gateway.h"
 #include "tests_utils.h"
@@ -31,6 +34,9 @@
 struct lgtd_lifx_gateway_list lgtd_lifx_gateways =
     LIST_HEAD_INITIALIZER(&lgtd_lifx_gateways);
 
+struct lgtd_listen_list lgtd_listeners =
+    SLIST_HEAD_INITIALIZER(&lgtd_listeners);
+
 struct lgtd_lifx_gateway *
 lgtd_tests_insert_mock_gateway(int id)
 {
@@ -41,6 +47,8 @@
 
     LIST_INSERT_HEAD(&lgtd_lifx_gateways, gw, link);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(gateways, 1);
+
     return gw;
 }
 
@@ -115,6 +123,17 @@
     return site;
 }
 
+struct lgtd_listen *
+lgtd_tests_insert_mock_listener(const char *addr, const char *port)
+{
+    struct lgtd_listen *listener = calloc(1, sizeof(*listener));
+    listener->addr = addr;
+    listener->port = port;
+    SLIST_INSERT_HEAD(&lgtd_listeners, listener, link);
+
+    return listener;
+}
+
 char *
 lgtd_tests_make_temp_dir(void)
 {
diff --git a/tests/core/tests_utils.h b/tests/core/tests_utils.h
--- a/tests/core/tests_utils.h
+++ b/tests/core/tests_utils.h
@@ -40,3 +40,4 @@
 struct lgtd_lifx_site *lgtd_tests_add_tag_to_gw(struct lgtd_lifx_tag *,
                                                 struct lgtd_lifx_gateway *,
                                                 int);
+struct lgtd_listen *lgtd_tests_insert_mock_listener(const char *addr, const char *port);
diff --git a/tests/lifx/gateway/CMakeLists.txt b/tests/lifx/gateway/CMakeLists.txt
--- a/tests/lifx/gateway/CMakeLists.txt
+++ b/tests/lifx/gateway/CMakeLists.txt
@@ -3,21 +3,27 @@
     ${CMAKE_CURRENT_BINARY_DIR}
 )
 
-ADD_LIBRARY(
-    test_lifx_gateway STATIC
+ADD_CORE_LIBRARY(
+    test_lifx_gateway_core STATIC
     ${LIGHTSD_SOURCE_DIR}/core/log.c
     ${LIGHTSD_SOURCE_DIR}/core/proto.c
     ${LIGHTSD_SOURCE_DIR}/core/router.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
+)
+
+ADD_LIBRARY(
+    test_lifx_gateway STATIC
     ${LIGHTSD_SOURCE_DIR}/lifx/broadcast.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/timer.c
     ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
-    ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
 )
-TARGET_LINK_LIBRARIES(test_lifx_gateway ${TIME_MONOTONIC_LIBRARY})
 
 FUNCTION(ADD_GATEWAY_TEST TEST_SOURCE)
-    ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_lifx_gateway)
+    ADD_TEST_FROM_C_SOURCES(
+        ${TEST_SOURCE} test_lifx_gateway_core test_lifx_gateway
+    )
 ENDFUNCTION()
 
 FILE(GLOB TESTS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "test_*.c")
diff --git a/tests/lifx/tagging/CMakeLists.txt b/tests/lifx/tagging/CMakeLists.txt
--- a/tests/lifx/tagging/CMakeLists.txt
+++ b/tests/lifx/tagging/CMakeLists.txt
@@ -6,8 +6,12 @@
 ADD_LIBRARY(
     test_lifx_tagging STATIC
     ${LIGHTSD_SOURCE_DIR}/core/log.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
 )
+IF (HAVE_LIBBSD)
+    TARGET_LINK_LIBRARIES(test_lifx_tagging ${LIBBSD_LIBRARY})
+ENDIF (HAVE_LIBBSD)
 
 FUNCTION(ADD_TAGGING_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_lifx_tagging)
diff --git a/tests/lifx/tests_shims.c b/tests/lifx/tests_shims.c
--- a/tests/lifx/tests_shims.c
+++ b/tests/lifx/tests_shims.c
@@ -35,3 +35,8 @@
         return ntohs(in6_peer->sin6_port);
     }
 }
+
+void
+lgtd_daemon_update_proctitle(void)
+{
+}
diff --git a/tests/lifx/wire_proto/CMakeLists.txt b/tests/lifx/wire_proto/CMakeLists.txt
--- a/tests/lifx/wire_proto/CMakeLists.txt
+++ b/tests/lifx/wire_proto/CMakeLists.txt
@@ -3,14 +3,15 @@
     ${CMAKE_CURRENT_BINARY_DIR}
 )
 
-ADD_LIBRARY(
-    test_lifx_wire_proto STATIC
+ADD_CORE_LIBRARY(
+    test_lifx_wire_proto_core STATIC
     ${LIGHTSD_SOURCE_DIR}/core/log.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
 )
 
 FUNCTION(ADD_WIRE_PROTO_TEST TEST_SOURCE)
-    ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_lifx_wire_proto)
+    ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_lifx_wire_proto_core)
 ENDFUNCTION()
 
 FILE(GLOB TESTS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "test_*.c")
