# HG changeset patch
# Parent  2bc416fb62377071c8f807f1fc4a02fce316f293
Add daemonization with a nice process title

NOTE: the -f argument is now actually required to start lightsd in the
      foreground.

diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,10 +22,13 @@
 # TODO: we need at least 2.0.19-stable because of the logging defines
 FIND_PACKAGE(Event2 REQUIRED COMPONENTS core)
 FIND_PACKAGE(Endian REQUIRED)
+
+INCLUDE(CheckFunctionExists)
 INCLUDE(TestBigEndian)
+INCLUDE(CompatSetProctitle)
 INCLUDE(CompatTimeMonotonic)
 
-TEST_BIG_ENDIAN(LGTD_BIG_ENDIAN_SYSTEM)
+TEST_BIG_ENDIAN(BIG_ENDIAN_SYSTEM)
 
 ### Global definitions #########################################################
 
@@ -34,14 +37,17 @@
 
 SET(CMAKE_C_FLAGS "-pipe -Wextra -Wall -Wstrict-prototypes -std=c99")
 
-ADD_DEFINITIONS("-DLGTD_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P}")
-ADD_DEFINITIONS("-DLGTD_BIG_ENDIAN_SYSTEM=${LGTD_BIG_ENDIAN_SYSTEM}")
-
-# Only relevant for the GNU libc:
 ADD_DEFINITIONS(
+    # Only relevant for the GNU libc:
     "-D_POSIX_C_SOURCE=200809L"
     "-D_BSD_SOURCE=1"
     "-D_DEFAULT_SOURCE=1"
+
+    "-DLGTD_BIG_ENDIAN_SYSTEM=${BIG_ENDIAN_SYSTEM}"
+    "-DLGTD_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P}"
+
+    "-DLGTD_HAVE_LIBBSD=${HAVE_LIBBSD}"
+    "-DLGTD_HAVE_PROCTITLE=${HAVE_PROCTITLE}"
 )
 
 IF (CMAKE_BUILD_TYPE MATCHES "DEBUG")
diff --git a/CMakeScripts/CompatSetProctitle.cmake b/CMakeScripts/CompatSetProctitle.cmake
new file mode 100644
--- /dev/null
+++ b/CMakeScripts/CompatSetProctitle.cmake
@@ -0,0 +1,18 @@
+IF (NOT HAVE_PROCTITLE)
+    SET(CMAKE_REQUIRED_QUIET TRUE)
+    MESSAGE(STATUS "Looking for setproctitle")
+    CHECK_FUNCTION_EXISTS("setproctitle" HAVE_PROCTITLE)
+    IF (NOT HAVE_PROCTITLE)
+        MESSAGE(STATUS "Looking for setproctitle again in libbsd")
+        FIND_PACKAGE(LibBSD)
+        IF (NOT LibBSD_FOUND)
+            MESSAGE(STATUS "couldn't find setproctitle, no fancy report in the process status")
+        ELSE ()
+            SET(HAVE_PROCTITLE 1 CACHE INTERNAL "setproctitle found in libbsd")
+            SET(HAVE_LIBBSD 1 CACHE INTERNAL "libbsd found")
+        ENDIF ()
+    ELSE ()
+        SET(HAVE_PROCTITLE 1 CACHE INTERNAL "setproctitle found on the system")
+    ENDIF ()
+    UNSET(CMAKE_REQUIRED_QUIET)
+ENDIF ()
diff --git a/CMakeScripts/CompatTimeMonotonic.cmake b/CMakeScripts/CompatTimeMonotonic.cmake
--- a/CMakeScripts/CompatTimeMonotonic.cmake
+++ b/CMakeScripts/CompatTimeMonotonic.cmake
@@ -1,5 +1,3 @@
-INCLUDE(CheckFunctionExists)
-
 IF (NOT TIME_MONOTONIC_LIBRARY)
     SET(COMPAT_TIME_MONOTONIC_IMPL "${LIGHTSD_SOURCE_DIR}/compat/${CMAKE_SYSTEM_NAME}/time_monotonic.c")
     SET(COMPAT_TIME_MONOTONIC_H "${LIGHTSD_SOURCE_DIR}/compat/${CMAKE_SYSTEM_NAME}/time_monotonic.h")
diff --git a/CMakeScripts/FindLibBSD.cmake b/CMakeScripts/FindLibBSD.cmake
new file mode 100644
--- /dev/null
+++ b/CMakeScripts/FindLibBSD.cmake
@@ -0,0 +1,10 @@
+FIND_PATH(LIBBSD_INCLUDE_DIR bsd.h PATH_SUFFIXES bsd)
+
+FIND_LIBRARY(LIBBSD_LIBRARY bsd)
+IF(LIBBSD_LIBRARY)
+    SET(LibBSD_FOUND TRUE)
+ENDIF()
+
+INCLUDE(FindPackageHandleStandardArgs)
+
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibBSD DEFAULT_MSG LIBBSD_LIBRARY LIBBSD_INCLUDE_DIR)
diff --git a/core/CMakeLists.txt b/core/CMakeLists.txt
--- a/core/CMakeLists.txt
+++ b/core/CMakeLists.txt
@@ -22,6 +22,7 @@
     log.c
     proto.c
     router.c
+    stats.c
 )
 
 TARGET_LINK_LIBRARIES(
@@ -29,4 +30,5 @@
     lifx
     ${EVENT2_CORE_LIBRARY}
     ${TIME_MONOTONIC_LIBRARY}
+    ${LIBBSD_LIBRARY}
 )
diff --git a/core/lightsd.c b/core/lightsd.c
--- a/core/lightsd.c
+++ b/core/lightsd.c
@@ -17,10 +17,12 @@
 
 #include <sys/queue.h>
 #include <sys/tree.h>
+#include <sys/types.h>
 #include <arpa/inet.h>
 #include <assert.h>
 #include <err.h>
 #include <errno.h>
+#include <fcntl.h>
 #include <getopt.h>
 #include <signal.h>
 #include <stdarg.h>
@@ -30,6 +32,11 @@
 #include <stdlib.h>
 #include <string.h>
 #include <strings.h>
+#include <unistd.h>
+
+#if LGTD_HAVE_LIBBSD
+#include <bsd/bsd.h>
+#endif
 
 #include <event2/event.h>
 #include <event2/event_struct.h>
@@ -55,6 +62,8 @@
 
 struct event_base *lgtd_ev_base = NULL;
 
+const char *lgtd_binds;
+
 void
 lgtd_cleanup(void)
 {
@@ -132,9 +141,55 @@
     exit(0);
 }
 
+static bool
+lgtd_daemonize(void)
+{
+    if (chdir("/")) {
+        return false;
+    }
+
+    int null = open("/dev/null", O_RDWR);
+    if (null == -1) {
+        return false;
+    }
+
+    const int fds[] = { STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO };
+    for (int i = 0; i != LGTD_ARRAY_SIZE(fds); ++i) {
+        if (dup2(null, fds[i]) == -1) {
+            close(null);
+            return false;
+        }
+    }
+    close(null);
+
+#define FORK()  do {        \
+    switch (fork()) {       \
+        case 0:             \
+            break;          \
+        case -1:            \
+            return false;   \
+        default:            \
+            exit(0);        \
+    }                       \
+} while (0)
+
+    FORK();
+    setsid();
+
+    FORK();
+
+    return true;
+}
+
 int
-main(int argc, char *argv[])
+main(int argc, char *argv[], char *envp[])
 {
+    char binds[512] = { 0 };
+    lgtd_binds = binds;
+
+#if LGTD_HAVE_LIBBSD
+    setproctitle_init(argc, argv, envp);
+#endif
     lgtd_configure_libevent();
     lgtd_configure_signal_handling();
 
@@ -159,10 +214,19 @@
             if (!sep || !sep[1]) {
                 lgtd_usage(argv[0]);
             }
+            strncat(binds, optarg, LGTD_MIN(
+                sizeof(binds) - strlen(binds) - 1,
+                strlen(optarg)
+            ));
+            strncat(binds, ", ", LGTD_MIN(
+                sizeof(binds) - strlen(binds) - 1, 2
+            ));
             *sep = '\0';
             if (!lgtd_listen_open(optarg, sep + 1)) {
                 exit(1);
             }
+            *sep = ':';
+            break;
         case 'f':
             lgtd_opts.foreground = true;
             break;
@@ -193,6 +257,12 @@
         }
     }
 
+    binds[LGTD_MAX(strlen(binds) - 1, 0)] = '\0';
+    binds[LGTD_MAX(strlen(binds) - 2, 0)] = '\0';
+    if (binds[sizeof(binds) - 2]) {
+        memset(binds + sizeof(binds) - 4, '.', 3);
+    }
+
     argc -= optind;
     argv += optind;
 
@@ -201,6 +271,10 @@
         lgtd_err(1, "can't setup lightsd");
     }
 
+    if (!lgtd_opts.foreground && !lgtd_daemonize()) {
+        lgtd_err(1, "can't fork to the background");
+    }
+
     lgtd_lifx_timer_start_discovery();
 
     event_base_dispatch(lgtd_ev_base);
diff --git a/core/lightsd.h b/core/lightsd.h
--- a/core/lightsd.h
+++ b/core/lightsd.h
@@ -23,6 +23,7 @@
 
 #define LGTD_ABS(v) ((v) >= 0 ? (v) : (v) * -1)
 #define LGTD_MIN(a, b) ((a) < (b) ? (a) : (b))
+#define LGTD_MAX(a, b) ((a) > (b) ? (a) : (b))
 #define LGTD_ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))
 #define LGTD_MSECS_TO_TIMEVAL(v) { \
     .tv_sec = (v) / 1000,           \
@@ -44,6 +45,7 @@
     enum lgtd_verbosity verbosity;
 };
 
+extern const char *lgtd_binds;
 extern struct lgtd_opts lgtd_opts;
 extern struct event_base *lgtd_ev_base;
 
@@ -62,5 +64,6 @@
 void lgtd_info(const char *, ...) __attribute__((format(printf, 1, 2)));
 void lgtd_debug(const char *, ...) __attribute__((format(printf, 1, 2)));
 void lgtd_libevent_log(int, const char *);
+void lgtd_update_proctitle(void);
 
 void lgtd_cleanup(void);
diff --git a/core/log.c b/core/log.c
--- a/core/log.c
+++ b/core/log.c
@@ -17,6 +17,7 @@
 
 #include <sys/tree.h>
 #include <sys/time.h>
+#include <sys/types.h>
 #include <arpa/inet.h>
 #include <assert.h>
 #include <err.h>
@@ -25,11 +26,17 @@
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdio.h>
+#include <stdlib.h>
 #include <time.h>
 
+#if LGTD_HAVE_LIBBSD
+#include <bsd/unistd.h>
+#endif
+
 #include <event2/event.h>
 
 #include "lifx/wire_proto.h"
+#include "stats.h"
 #include "lightsd.h"
 
 static void
@@ -172,3 +179,17 @@
     default:                                        break;
     }
 }
+
+void
+lgtd_update_proctitle(void)
+{
+#if LGTD_HAVE_PROCTITLE
+    setproctitle(
+        "listening_on(%s); gateways(found=%d); bulbs(found=%d, on=%d)",
+        lgtd_binds,
+        LGTD_STATS_GET(gateways),
+        LGTD_STATS_GET(bulbs),
+        LGTD_STATS_GET(bulbs_powered_on)
+    );
+#endif
+}
diff --git a/core/stats.c b/core/stats.c
new file mode 100644
--- /dev/null
+++ b/core/stats.c
@@ -0,0 +1,44 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+//
+// This file is part of lighstd.
+//
+// lighstd is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// lighstd is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with lighstd.  If not, see <http://www.gnu.org/licenses/>.
+
+#include <assert.h>
+#include <stdint.h>
+
+#include "stats.h"
+
+struct lgtd_stats lgtd_counters = { .gateways = 0 };
+
+void
+lgtd_stats_add(int offset, int value)
+{
+    assert(offset >= 0);
+    assert(offset < (int)sizeof(lgtd_counters));
+    assert(offset % sizeof(int) == 0);
+
+    int *counter = (int *)((uint8_t *)&lgtd_counters + offset);
+    *counter += value;
+}
+
+int
+lgtd_stats_get(int offset)
+{
+    assert(offset >= 0);
+    assert(offset < (int)sizeof(lgtd_counters));
+    assert(offset % sizeof(int) == 0);
+
+    return *(int *)((uint8_t *)&lgtd_counters + offset);
+}
diff --git a/core/stats.h b/core/stats.h
new file mode 100644
--- /dev/null
+++ b/core/stats.h
@@ -0,0 +1,33 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+//
+// This file is part of lighstd.
+//
+// lighstd is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// lighstd is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with lighstd.  If not, see <http://www.gnu.org/licenses/>.
+
+#pragma once
+
+struct lgtd_stats {
+    int gateways;
+    int bulbs;
+    int bulbs_powered_on;
+};
+
+void lgtd_stats_add(int, int);
+int lgtd_stats_get(int);
+
+#define LGTD_STATS_GET(name) lgtd_stats_get(offsetof(struct lgtd_stats, name))
+#define LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(name, value) do {                        \
+    lgtd_stats_add(offsetof(struct lgtd_stats, name), (value)); \
+    lgtd_update_proctitle();                                    \
+} while (0)
diff --git a/lifx/bulb.c b/lifx/bulb.c
--- a/lifx/bulb.c
+++ b/lifx/bulb.c
@@ -31,6 +31,7 @@
 #include "core/time_monotonic.h"
 #include "bulb.h"
 #include "gateway.h"
+#include "core/stats.h"
 #include "core/lightsd.h"
 
 struct lgtd_lifx_bulb_map lgtd_lifx_bulbs_table =
@@ -61,6 +62,7 @@
     bulb->gw = gw;
     memcpy(bulb->addr, addr, sizeof(bulb->addr));
     RB_INSERT(lgtd_lifx_bulb_map, &lgtd_lifx_bulbs_table, bulb);
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(bulbs, 1);
 
     bulb->last_light_state_at = lgtd_time_monotonic_msecs();
 
@@ -73,6 +75,7 @@
     assert(bulb);
     assert(bulb->gw);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(bulbs, -1);
     RB_REMOVE(lgtd_lifx_bulb_map, &lgtd_lifx_bulbs_table, bulb);
     SLIST_REMOVE(&bulb->gw->bulbs, bulb, lgtd_lifx_bulb, link_by_gw);
     lgtd_info(
@@ -93,6 +96,13 @@
 {
     assert(bulb);
     assert(state);
+
+    if (state->power != bulb->state.power) {
+        LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(
+            bulbs_powered_on, state->power ? 1 : -1
+        );
+    }
+
     bulb->last_light_state_at = received_at;
     memcpy(&bulb->state, state, sizeof(bulb->state));
 }
@@ -101,5 +111,12 @@
 lgtd_lifx_bulb_set_power_state(struct lgtd_lifx_bulb *bulb, uint16_t power)
 {
     assert(bulb);
+
+    if (power != bulb->state.power) {
+        LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(
+            bulbs_powered_on, power ? 1 : -1
+        );
+    }
+
     bulb->state.power = power;
 }
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -44,6 +44,7 @@
 #include "core/client.h"
 #include "core/proto.h"
 #include "core/router.h"
+#include "core/stats.h"
 #include "core/lightsd.h"
 
 struct lgtd_lifx_gateway_list lgtd_lifx_gateways =
@@ -54,6 +55,7 @@
 {
     assert(gw);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(gateways, -1);
     event_del(gw->refresh_ev);
     event_del(gw->write_ev);
     if (gw->socket != -1) {
@@ -284,6 +286,8 @@
     // will stop by itself:
     lgtd_lifx_timer_start_watchdog();
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(gateways, 1);
+
     return gw;
 
 error_allocate:
diff --git a/tests/core/jsonrpc/CMakeLists.txt b/tests/core/jsonrpc/CMakeLists.txt
--- a/tests/core/jsonrpc/CMakeLists.txt
+++ b/tests/core/jsonrpc/CMakeLists.txt
@@ -7,12 +7,15 @@
     test_core_jsonrpc STATIC
     ${LIGHTSD_SOURCE_DIR}/core/jsmn.c
     ${LIGHTSD_SOURCE_DIR}/core/log.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
-TARGET_LINK_LIBRARIES(test_core_jsonrpc ${TIME_MONOTONIC_LIBRARY})
+TARGET_LINK_LIBRARIES(
+    test_core_jsonrpc ${TIME_MONOTONIC_LIBRARY} ${LIBBSD_LIBRARY}
+)
 
 FUNCTION(ADD_JSONRPC_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_core_jsonrpc)
diff --git a/tests/core/proto/CMakeLists.txt b/tests/core/proto/CMakeLists.txt
--- a/tests/core/proto/CMakeLists.txt
+++ b/tests/core/proto/CMakeLists.txt
@@ -7,13 +7,16 @@
     test_core_proto STATIC
     ${LIGHTSD_SOURCE_DIR}/core/log.c
     ${LIGHTSD_SOURCE_DIR}/core/jsonrpc.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/timer.c
     ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
-TARGET_LINK_LIBRARIES(test_core_proto ${TIME_MONOTONIC_LIBRARY})
+TARGET_LINK_LIBRARIES(
+    test_core_proto ${TIME_MONOTONIC_LIBRARY} ${LIBBSD_LIBRARY}
+)
 
 FUNCTION(ADD_ROUTER_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_core_proto)
diff --git a/tests/core/router/CMakeLists.txt b/tests/core/router/CMakeLists.txt
--- a/tests/core/router/CMakeLists.txt
+++ b/tests/core/router/CMakeLists.txt
@@ -7,6 +7,7 @@
     test_core_router STATIC
     ${LIGHTSD_SOURCE_DIR}/core/log.c
     ${LIGHTSD_SOURCE_DIR}/core/proto.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/timer.c
     ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
@@ -18,6 +19,7 @@
     test_core_router
     ${EVENT2_CORE_LIBRARY}
     ${TIME_MONOTONIC_LIBRARY}
+    ${LIBBSD_LIBRARY}
 )
 
 FUNCTION(ADD_ROUTER_TEST TEST_SOURCE)
diff --git a/tests/core/tests_shims.c b/tests/core/tests_shims.c
--- a/tests/core/tests_shims.c
+++ b/tests/core/tests_shims.c
@@ -25,6 +25,8 @@
 
 struct event_base *lgtd_ev_base = NULL;
 
+const char *lgtd_binds = NULL;
+
 void
 lgtd_cleanup(void)
 {
diff --git a/tests/lifx/gateway/CMakeLists.txt b/tests/lifx/gateway/CMakeLists.txt
--- a/tests/lifx/gateway/CMakeLists.txt
+++ b/tests/lifx/gateway/CMakeLists.txt
@@ -8,13 +8,16 @@
     ${LIGHTSD_SOURCE_DIR}/core/log.c
     ${LIGHTSD_SOURCE_DIR}/core/proto.c
     ${LIGHTSD_SOURCE_DIR}/core/router.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/lifx/broadcast.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/timer.c
     ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
 )
-TARGET_LINK_LIBRARIES(test_lifx_gateway ${TIME_MONOTONIC_LIBRARY})
+TARGET_LINK_LIBRARIES(
+    test_lifx_gateway ${TIME_MONOTONIC_LIBRARY} ${LIBBSD_LIBRARY}
+)
 
 FUNCTION(ADD_GATEWAY_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_lifx_gateway)
diff --git a/tests/lifx/tagging/CMakeLists.txt b/tests/lifx/tagging/CMakeLists.txt
--- a/tests/lifx/tagging/CMakeLists.txt
+++ b/tests/lifx/tagging/CMakeLists.txt
@@ -6,8 +6,10 @@
 ADD_LIBRARY(
     test_lifx_tagging STATIC
     ${LIGHTSD_SOURCE_DIR}/core/log.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
 )
+TARGET_LINK_LIBRARIES(test_lifx_tagging ${LIBBSD_LIBRARY})
 
 FUNCTION(ADD_TAGGING_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_lifx_tagging)
diff --git a/tests/lifx/tests_shims.c b/tests/lifx/tests_shims.c
--- a/tests/lifx/tests_shims.c
+++ b/tests/lifx/tests_shims.c
@@ -15,6 +15,8 @@
 
 struct event_base *lgtd_ev_base = NULL;
 
+const char *lgtd_binds = NULL;
+
 void
 lgtd_cleanup(void)
 {
diff --git a/tests/lifx/wire_proto/CMakeLists.txt b/tests/lifx/wire_proto/CMakeLists.txt
--- a/tests/lifx/wire_proto/CMakeLists.txt
+++ b/tests/lifx/wire_proto/CMakeLists.txt
@@ -6,8 +6,10 @@
 ADD_LIBRARY(
     test_lifx_wire_proto STATIC
     ${LIGHTSD_SOURCE_DIR}/core/log.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
 )
+TARGET_LINK_LIBRARIES(test_lifx_wire_proto ${LIBBSD_LIBRARY})
 
 FUNCTION(ADD_WIRE_PROTO_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_lifx_wire_proto)
