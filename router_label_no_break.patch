# HG changeset patch
# Parent  f0fbe12d52770de54bbd6279519462e0e43cf5d7
Do not stop at the first match when targeting a label

People should use tags, but that seems like the correct behavior to
have.

diff --git a/core/router.c b/core/router.c
--- a/core/router.c
+++ b/core/router.c
@@ -341,20 +341,26 @@
             struct lgtd_lifx_bulb *bulb = NULL;
             if (isxdigit(target->target[0])) {
                 bulb = lgtd_router_device_addr_to_device(target->target);
+                if (bulb) {
+                    bool ok = lgtd_router_insert_device_if_not_in_list(
+                        devices, bulb
+                    );
+                    if (!ok) {
+                        goto device_alloc_error;
+                    }
+                    continue;
+                }
             }
-            if (!bulb) {
-                RB_FOREACH(bulb, lgtd_lifx_bulb_map, &lgtd_lifx_bulbs_table) {
-                    if (!strcmp(bulb->state.label, target->target)) {
-                        break;
+            RB_FOREACH(bulb, lgtd_lifx_bulb_map, &lgtd_lifx_bulbs_table) {
+                if (!strcmp(bulb->state.label, target->target)) {
+                    bool ok = lgtd_router_insert_device_if_not_in_list(
+                        devices, bulb
+                    );
+                    if (!ok) {
+                        goto device_alloc_error;
                     }
                 }
             }
-            if (!bulb) {
-                continue;
-            }
-            if (!lgtd_router_insert_device_if_not_in_list(devices, bulb)) {
-                goto device_alloc_error;
-            }
         }
     }
 
diff --git a/tests/core/router/test_router_targets_to_devices.c b/tests/core/router/test_router_targets_to_devices.c
--- a/tests/core/router/test_router_targets_to_devices.c
+++ b/tests/core/router/test_router_targets_to_devices.c
@@ -169,5 +169,20 @@
         lgtd_errx(1, "expected 4 device but got %d", count);
     }
 
+    // targeting a label shouldn't break at the first match:
+    struct lgtd_lifx_bulb *bulb_3_gw_2 = lgtd_tests_insert_mock_bulb(gw_2, 7);
+    strcpy(bulb_3_gw_2->state.label, "desk");
+    targets = lgtd_tests_build_target_list("desk", NULL);
+    devices = lgtd_router_targets_to_devices(targets);
+    if ((count = count_device(devices, bulb_1_gw_2)) != 1) {
+        lgtd_errx(1, "bulb bulb_1_gw_2 found %d times, expected 1", count);
+    }
+    if ((count = count_device(devices, bulb_3_gw_2)) != 1) {
+        lgtd_errx(1, "bulb bulb_3_gw_2 found %d times, expected 1", count);
+    }
+    if ((count = len(devices)) != 2) {
+        lgtd_errx(1, "expected 2 device but got %d", count);
+    }
+
     return 0;
 }
