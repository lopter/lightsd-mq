# HG changeset patch
# Parent  89bb450c4b8ef5efaf6477ce4cd0a1df6e20ce28

diff --git a/core/proto.c b/core/proto.c
--- a/core/proto.c
+++ b/core/proto.c
@@ -155,10 +155,10 @@
     lgtd_client_start_send_response(client);
 
     LGTD_CLIENT_WRITE_STRING(client, "[");
-    struct lgtd_lifx_label_sites_tags *label;
-    LIST_FOREACH(label, &lgtd_lifx_labels, link) {
-        LGTD_CLIENT_WRITE_STRING(client, label->label);
-        if (LIST_NEXT(label, link) != LIST_END(lgtd_lifx_labels)) {
+    struct lgtd_lifx_tag *tag;
+    LIST_FOREACH(tag, &lgtd_lifx_tags, link) {
+        LGTD_CLIENT_WRITE_STRING(client, tag->tag);
+        if (LIST_NEXT(tag, link) != LIST_END(lgtd_lifx_labels)) {
             LGTD_CLIENT_WRITE_STRING(client, ",");
         }
     }
diff --git a/core/router.c b/core/router.c
--- a/core/router.c
+++ b/core/router.c
@@ -52,7 +52,11 @@
     struct lgtd_lifx_gateway *gw;
     LIST_FOREACH(gw, &lgtd_lifx_gateways, link) {
         pkt_infos = lgtd_lifx_wire_setup_header(
-            &hdr, LGTD_LIFX_TARGET_ALL_DEVICES, target, gw->site, pkt_type
+            &hdr,
+            LGTD_LIFX_TARGET_ALL_DEVICES,
+            target,
+            gw->site.as_array,
+            pkt_type
         );
         assert(pkt_infos);
         lgtd_lifx_gateway_enqueue_packet(
@@ -86,7 +90,11 @@
 
     const struct lgtd_lifx_packet_infos *pkt_infos;
     pkt_infos = lgtd_lifx_wire_setup_header(
-        &hdr, LGTD_LIFX_TARGET_DEVICE, target, bulb->gw->site, pkt_type
+        &hdr,
+        LGTD_LIFX_TARGET_DEVICE,
+        target,
+        bulb->gw->site.as_array,
+        pkt_type
     );
     assert(pkt_infos);
 
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -68,16 +68,6 @@
         lgtd_lifx_bulb_close(bulb);
     }
 
-    struct lgtd_lifx_gateway *it;
-    LIST_FOREACH(it, &lgtd_lifx_gateways, link) {
-        if (!memcmp(it->site, gw->site, sizeof(it->site))) {
-            break;
-        }
-    }
-    if (it == LIST_END(&lgtd_lifx_gateways)) {
-        lgtd_lifx_tagging_remove_site(gw->site);
-    }
-
     lgtd_info(
         "connection with gateway bulb [%s]:%hu closed", gw->ip_addr, gw->port
     );
@@ -158,10 +148,14 @@
     assert(gw);
 
     struct lgtd_lifx_packet_header hdr;
-    union lgtd_lifx_target target = { .addr = gw->site };
+    union lgtd_lifx_target target = { .addr = gw->site.as_array };
 
     lgtd_lifx_wire_setup_header(
-        &hdr, LGTD_LIFX_TARGET_SITE, target, gw->site, LGTD_LIFX_GET_LIGHT_STATE
+        &hdr,
+        LGTD_LIFX_TARGET_SITE,
+        target,
+        gw->site.as_array,
+        LGTD_LIFX_GET_LIGHT_STATE
     );
     lgtd_lifx_gateway_enqueue_packet(
         gw, &hdr, LGTD_LIFX_GET_LIGHT_STATE, NULL, 0
@@ -169,7 +163,11 @@
 
     struct lgtd_lifx_packet_get_tag_labels pkt = { .tags = LGTD_LIFX_ALL_TAGS };
     lgtd_lifx_wire_setup_header(
-        &hdr, LGTD_LIFX_TARGET_SITE, target, gw->site, LGTD_LIFX_GET_TAG_LABELS
+        &hdr,
+        LGTD_LIFX_TARGET_SITE,
+        target,
+        gw->site.as_array,
+        LGTD_LIFX_GET_TAG_LABELS
     );
     lgtd_lifx_gateway_enqueue_packet(
         gw, &hdr, LGTD_LIFX_GET_TAG_LABELS, &pkt, sizeof(pkt)
@@ -255,7 +253,7 @@
     memcpy(&gw->peer, peer, sizeof(gw->peer));
     lgtd_sockaddrtoa(peer, gw->ip_addr, sizeof(gw->ip_addr));
     gw->port = lgtd_sockaddrport(peer);
-    memcpy(gw->site, site, sizeof(gw->site));
+    memcpy(gw->site.as_array, site, sizeof(gw->site.as_array));
     gw->last_req_at = received_at;
     gw->next_req_at = received_at;
     gw->last_pkt_at = received_at;
@@ -270,16 +268,9 @@
         goto error_allocate;
     }
 
-    if (!lgtd_lifx_tagging_add_site(gw->site)) {
-        lgtd_warn(
-            "can't allocate a new tag table for site %s", lgtd_addrtoa(gw->site)
-        );
-        goto error_allocate;
-    }
-
     lgtd_info(
         "gateway for site %s at [%s]:%hu",
-        lgtd_addrtoa(gw->site), gw->ip_addr, gw->port
+        lgtd_addrtoa(gw->site.as_array), gw->ip_addr, gw->port
     );
     LIST_INSERT_HEAD(&lgtd_lifx_gateways, gw, link);
 
@@ -341,7 +332,7 @@
     assert(gw);
     assert(hdr);
     assert(pkt_size >= 0 && pkt_size < LGTD_LIFX_MAX_PACKET_SIZE);
-    assert(!memcmp(hdr->site, gw->site, LGTD_LIFX_ADDR_LENGTH));
+    assert(!memcmp(hdr->site, gw->site.as_array, LGTD_LIFX_ADDR_LENGTH));
     assert(gw->pkt_ring_head >= 0);
     assert(gw->pkt_ring_head < (int)LGTD_ARRAY_SIZE(gw->pkt_ring));
 
@@ -492,5 +483,21 @@
         pkt->label, (uintmax_t)pkt->tags
     );
 
-    lgtd_lifx_tagging_update(gw->site, pkt->label, pkt->tags);
+    while (true) {
+        int i = lgtd_lifx_wire_bitscan64_forward(tags);
+        if (i == -1) {
+            break;
+        }
+        if (pkt->label[0]) {
+            struct lgtd_lifx_tag *tag;
+            tag = lgtd_lifx_tagging_incref(pkt->label, gw);
+            if (tag) {
+                lgtd_lifx_gateway_allocate_tag_id(gw, i, tag);
+            }
+        } else {
+            lgtd_lifx_tagging_decref(pkt->label, gw);
+            lgtd_lifx_gateway_deallocate_tag_id(gw, i);
+        }
+        tags &= ~(1 << i);
+    }
 }
diff --git a/lifx/gateway.h b/lifx/gateway.h
--- a/lifx/gateway.h
+++ b/lifx/gateway.h
@@ -42,7 +42,13 @@
     struct sockaddr_storage         peer;
     char                            ip_addr[INET6_ADDRSTRLEN];
     uint16_t                        port;
-    uint8_t                         site[LGTD_LIFX_ADDR_LENGTH];
+    // TODO: just use an integer and rename it to site_id:
+    union {
+        uint8_t                     as_array[LGTD_LIFX_ADDR_LENGTH];
+        uint64_t                    as_integer;
+    }                               site;
+    uint64_t                        tag_ids;
+    struct lgtd_lifx_tag            *tags[64];
     evutil_socket_t                 socket;
     // Those three timers let us measure the latency of the gateway. If we
     // aren't the only client on the network then this won't be accurate since
@@ -85,6 +91,9 @@
                                       const void *,
                                       int);
 
+int lgtd_lifx_gateway_allocate_tag_id(struct lgtd_lifx_gateway *, int, struct lgtd_lifx_tag *);
+void lgtd_lifx_gateway_deallocate_tag_id(struct lgtd_lifx_gateway *, int);
+
 void lgtd_lifx_gateway_handle_pan_gateway(struct lgtd_lifx_gateway *,
                                           const struct lgtd_lifx_packet_header *,
                                           const struct lgtd_lifx_packet_pan_gateway *);
diff --git a/lifx/tagging.c b/lifx/tagging.c
--- a/lifx/tagging.c
+++ b/lifx/tagging.c
@@ -33,183 +33,6 @@
 #include "tagging.h"
 #include "core/lightsd.h"
 
-static struct lgtd_lifx_site_tags_list lgtd_lifx_site_tags_map =
-    LIST_HEAD_INITIALIZER(&lgtd_lifx_site_tags_map);
-struct lgtd_lifx_label_sites_tags_list lgtd_lifx_labels =
-    LIST_HEAD_INITIALIZER(&lgtd_lifx_labels);
+struct lgtd_lifx_tag_list lgtd_lifx_tags =
+    LIST_HEAD_INITIALIZER(&lgtd_lifx_tags);
 
-// Kim Walisch (2012)
-// http://chessprogramming.wikispaces.com/BitScan#DeBruijnMultiplation
-static inline int
-lgtd_lifx_tagging_bitscan64_forward(uint64_t n)
-{
-    enum { DEBRUIJN_NUMBER = 0x03f79d71b4cb0a89 };
-    static const int DEBRUIJN_SEQUENCE[64] = {
-        0, 47,  1, 56, 48, 27,  2, 60,
-       57, 49, 41, 37, 28, 16,  3, 61,
-       54, 58, 35, 52, 50, 42, 21, 44,
-       38, 32, 29, 23, 17, 11,  4, 62,
-       46, 55, 26, 59, 40, 36, 15, 53,
-       34, 51, 20, 43, 31, 22, 10, 45,
-       25, 39, 14, 33, 19, 30,  9, 24,
-       13, 18,  8, 12,  7,  6,  5, 63
-    };
-
-    return n ? DEBRUIJN_SEQUENCE[((n ^ (n - 1)) * DEBRUIJN_NUMBER) >> 58] : -1;
-}
-
-bool
-lgtd_lifx_tagging_add_site(const uint8_t *site)
-{
-    assert(site);
-
-    struct lgtd_lifx_site_tags *site_tags;
-    LIST_FOREACH(site_tags, &lgtd_lifx_site_tags_map, link) {
-        if (!memcmp(site_tags->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH)) {
-            return true; // site already exists
-        }
-    }
-
-    site_tags = calloc(1, sizeof(*site_tags));
-    memcpy(site_tags->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH);
-    LIST_INSERT_HEAD(&lgtd_lifx_site_tags_map, site_tags, link);
-
-    return true;
-}
-
-void
-lgtd_lifx_tagging_remove_site(const uint8_t *site)
-{
-    assert(site);
-
-    struct lgtd_lifx_site_tags *site_tags, *next_site_tags;
-    LIST_FOREACH_SAFE(site_tags, &lgtd_lifx_site_tags_map, link, next_site_tags) {
-        if (!memcmp(site_tags->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH)) {
-            LIST_REMOVE(site_tags, link);
-            free(site_tags);
-            return;
-        }
-    }
-
-#ifndef NDEBUG
-    assert(site_tags != LIST_END(&lgtd_lifx_site_tags_map));
-#else
-    lgtd_warnx(
-        "tried to remove unknown site %s from the tags list", lgtd_addrtoa(site)
-    );
-#endif
-}
-
-static struct lgtd_lifx_label_sites_tags *
-lgtd_lifx_tagging_labels_list_find(const char *label)
-{
-    struct lgtd_lifx_label_sites_tags *label_sites_tags = NULL;
-    LIST_FOREACH(label_sites_tags, &lgtd_lifx_labels, link) {
-        if (strcmp(label_sites_tags->label, label)) {
-            break;
-        }
-    }
-    return label_sites_tags;
-}
-
-static bool
-lgtd_lifx_tagging_labels_list_add(const char *label,
-                                  struct lgtd_lifx_site_tags *site_tags)
-{
-    struct lgtd_lifx_label_sites_tags *label_sites_tags =
-        lgtd_lifx_tagging_labels_list_find(label);
-
-    if (!label_sites_tags) {
-        label_sites_tags = calloc(1, sizeof(*label_sites_tags));
-        if (!label_sites_tags) {
-            return false;
-        }
-        label_sites_tags->label_len = strlen(label);
-        memcpy(label_sites_tags->label, label, label_sites_tags->label_len);
-        LIST_INSERT_HEAD(&lgtd_lifx_labels, label_sites_tags, link);
-    }
-
-#ifndef NDEBUG
-    const struct lgtd_lifx_site_tags *it;
-    LIST_FOREACH(it, &label_sites_tags->sites_tags, link_by_label) {
-        assert(it != site_tags);
-    }
-#endif
-
-    LIST_INSERT_HEAD(&label_sites_tags->sites_tags, site_tags, link_by_label);
-    return true;
-}
-
-static void
-lgtd_lifx_tagging_labels_list_remove(const char *label,
-                                     struct lgtd_lifx_site_tags *site_tags)
-{
-    struct lgtd_lifx_label_sites_tags *label_sites_tags =
-        lgtd_lifx_tagging_labels_list_find(label);
-    assert(label_sites_tags);
-
-    LIST_REMOVE(site_tags, link_by_label);
-}
-
-void
-lgtd_lifx_tagging_update(const uint8_t *site, const char *label, uint64_t tags)
-{
-    assert(site);
-    assert(label);
-    assert(label[LGTD_LIFX_LABEL_SIZE - 1] == '\0');
-
-    struct lgtd_lifx_site_tags *site_tags;
-    LIST_FOREACH(site_tags, &lgtd_lifx_site_tags_map, link) {
-        if (!memcmp(site_tags->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH)) {
-            break;
-        }
-    }
-
-#ifndef NDEBUG
-    assert(site_tags != LIST_END(&lgtd_lifx_site_tags_map));
-#else
-    if (site_tags == LIST_END(&lgtd_lifx_site_tags_map)) {
-        lgtd_warnx(
-            "tried to add tag %s on unknown site %s", label, lgtd_addrtoa(site)
-        );
-        return;
-    }
-#endif
-
-    while (true) {
-        int i = lgtd_lifx_tagging_bitscan64_forward(tags);
-        if (i == -1) {
-            break;
-        }
-        int len = strlen(label); // len ? adding a label : removing a label
-        if (len) {
-            if (!site_tags->labels[i][0]) {
-                if (lgtd_lifx_tagging_labels_list_add(label, site_tags)) {
-                    lgtd_info(
-                        "adding tag %s (id %d) on site %s",
-                        label, i, lgtd_addrtoa(site)
-                    );
-                    memcpy(site_tags->labels[i], label, len);
-                } else {
-                    lgtd_warn(
-                        "can't add tag %s (id %d) on site %s",
-                        label, i, lgtd_addrtoa(site)
-                    );
-                }
-            } else if (!memcmp(site_tags->labels[i], label, len)) {
-                lgtd_warnx(
-                    "tried to overwrite tag %s (id %d) on site %s with tag %s",
-                    site_tags->labels[i], i, lgtd_addrtoa(site), label
-                );
-            }
-        } else if (site_tags->labels[i][0]) {
-            lgtd_info(
-                "removing tag %s (id %d) on site %s",
-                site_tags->labels[i], i, lgtd_addrtoa(site)
-            );
-            lgtd_lifx_tagging_labels_list_remove(label, site_tags);
-            memset(site_tags->labels[i], 0, sizeof(site_tags->labels[i]));
-        }
-        tags &= ~(1 << i);
-    }
-}
diff --git a/lifx/tagging.h b/lifx/tagging.h
--- a/lifx/tagging.h
+++ b/lifx/tagging.h
@@ -17,29 +17,19 @@
 
 #pragma once
 
-struct lgtd_lifx_site_tags {
-    LIST_ENTRY(lgtd_lifx_site_tags) link;
-    LIST_ENTRY(lgtd_lifx_site_tags) link_by_label;
-    union {
-        uint8_t                     as_array[LGTD_LIFX_ADDR_LENGTH];
-        uint64_t                    as_integer;
-    }                               site_id;
-    // TODO?: uint64_t              tag_ids;
-    char                            labels[64][LGTD_LIFX_LABEL_SIZE];
+extern struct lgtd_lifx_tag_list lgtd_lifx_tags;
+
+struct lgtd_lifx_site {
+    LIST_ENTRY(lgtd_lifx_site)  link;
+    struct lgtd_lifx_gateway    *site;
 };
-LIST_HEAD(lgtd_lifx_site_tags_list, lgtd_lifx_site_tags);
 
-struct lgtd_lifx_label_sites_tags {
-    LIST_ENTRY(lgtd_lifx_label_sites_tags)  link;
-    char                                    label[LGTD_LIFX_LABEL_SIZE];
-    int                                     label_len;
-    struct lgtd_lifx_site_tags_list         sites_tags;
+struct lgtd_lifx_tag {
+    LIST_ENTRY(lgtd_lifx_tag)   link;
+    char                        tag[LGTD_LIFX_LABEL_SIZE];
+    struct lgtd_lifx_site_list  sites;
 };
-LIST_HEAD(lgtd_lifx_label_sites_tags_list, lgtd_lifx_label_sites_tags);
+LIST_HEAD(lgtd_lifx_tag_list, lgtd_lifx_tag);
 
-extern struct lgtd_lifx_label_sites_tags_list lgtd_lifx_labels;
-
-bool lgtd_lifx_tagging_add_site(const uint8_t *site);
-void lgtd_lifx_tagging_remove_site(const uint8_t *site);
-
-void lgtd_lifx_tagging_update(const uint8_t *, const char *, uint64_t);
+struct lgtd_lifx_tag *lgtd_lifx_tagging_incref(const char *, struct lgtd_lifx_gateway *);
+void lgtd_lifx_tagging_decref(const char *, struct lgtd_lifx_gateway *);
diff --git a/lifx/wire_proto.h b/lifx/wire_proto.h
--- a/lifx/wire_proto.h
+++ b/lifx/wire_proto.h
@@ -211,6 +211,26 @@
 
 #pragma pack(pop)
 
+// Kim Walisch (2012)
+// http://chessprogramming.wikispaces.com/BitScan#DeBruijnMultiplation
+static inline int
+lgtd_lifx_wire_bitscan64_forward(uint64_t n)
+{
+    enum { DEBRUIJN_NUMBER = 0x03f79d71b4cb0a89 };
+    static const int DEBRUIJN_SEQUENCE[64] = {
+        0, 47,  1, 56, 48, 27,  2, 60,
+       57, 49, 41, 37, 28, 16,  3, 61,
+       54, 58, 35, 52, 50, 42, 21, 44,
+       38, 32, 29, 23, 17, 11,  4, 62,
+       46, 55, 26, 59, 40, 36, 15, 53,
+       34, 51, 20, 43, 31, 22, 10, 45,
+       25, 39, 14, 33, 19, 30,  9, 24,
+       13, 18,  8, 12,  7,  6,  5, 63
+    };
+
+    return n ? DEBRUIJN_SEQUENCE[((n ^ (n - 1)) * DEBRUIJN_NUMBER) >> 58] : -1;
+}
+
 struct lgtd_lifx_waveform_string_id {
     const char  *str;
     int         len;
diff --git a/tests/core/tests_utils.c b/tests/core/tests_utils.c
--- a/tests/core/tests_utils.c
+++ b/tests/core/tests_utils.c
@@ -26,16 +26,13 @@
 struct lgtd_lifx_gateway_list lgtd_lifx_gateways =
     LIST_HEAD_INITIALIZER(&lgtd_lifx_gateways);
 
-struct lgtd_lifx_label_sites_tags_list lgtd_lifx_labels =
-    LIST_HEAD_INITIALIZER(&lgtd_lifx_labels);
-
 struct lgtd_lifx_gateway *
 lgtd_tests_insert_mock_gateway(int id)
 {
     struct lgtd_lifx_gateway *gw = calloc(1, sizeof(*gw));
 
     gw->socket = id;
-    gw->site[0] = id;
+    gw->site.as_array[0] = id;
 
     LIST_INSERT_HEAD(&lgtd_lifx_gateways, gw, link);
 
