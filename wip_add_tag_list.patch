# HG changeset patch
# Parent  8c48cb51feb8a52fb3c0ba7a001b0accb67dceb7

diff --git a/core/proto.c b/core/proto.c
--- a/core/proto.c
+++ b/core/proto.c
@@ -155,11 +155,14 @@
     lgtd_client_start_send_response(client);
 
     LGTD_CLIENT_WRITE_STRING(client, "[");
-    struct lgtd_lifx_label_site_tags *label;
+    struct lgtd_lifx_label_sites_tags *label;
     LIST_FOREACH(label, &lgtd_lifx_labels, link) {
+        LGTD_CLIENT_WRITE_STRING(client, "\"");
         LGTD_CLIENT_WRITE_STRING(client, label->label);
         if (LIST_NEXT(label, link) != LIST_END(lgtd_lifx_labels)) {
-            LGTD_CLIENT_WRITE_STRING(client, ",");
+            LGTD_CLIENT_WRITE_STRING(client, "\",");
+        } else {
+            LGTD_CLIENT_WRITE_STRING(client, "\"");
         }
     }
     LGTD_CLIENT_WRITE_STRING(client, "]");
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -487,8 +487,10 @@
     assert(gw && hdr && pkt);
 
     lgtd_debug(
-        "SET_TAG_LABELS <-- [%s]:%hu - %s label=%.*s, tags=%jx",
+        "SET_TAG_LABELS <-- [%s]:%hu - %s label=%s, tags=%jx",
         gw->ip_addr, gw->port, lgtd_addrtoa(hdr->target.device_addr),
-        (int)sizeof(pkt->label), pkt->label, (uintmax_t)pkt->tags
+        pkt->label, (uintmax_t)pkt->tags
     );
+
+    lgtd_lifx_tagging_update(gw->site, pkt->label, pkt->tags);
 }
diff --git a/lifx/tagging.c b/lifx/tagging.c
--- a/lifx/tagging.c
+++ b/lifx/tagging.c
@@ -35,7 +35,7 @@
 
 static struct lgtd_lifx_site_tags_list lgtd_lifx_site_tags_map =
     LIST_HEAD_INITIALIZER(&lgtd_lifx_site_tags_map);
-struct lgtd_lifx_label_site_tags_list lgtd_lifx_labels =
+struct lgtd_lifx_label_sites_tags_list lgtd_lifx_labels =
     LIST_HEAD_INITIALIZER(&lgtd_lifx_labels);
 
 // Kim Walisch (2012)
@@ -63,16 +63,16 @@
 {
     assert(site);
 
-    struct lgtd_lifx_site_tags *site_map;
-    LIST_FOREACH(site_map, &lgtd_lifx_site_tags_map, link) {
-        if (!memcmp(site_map->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH)) {
+    struct lgtd_lifx_site_tags *site_tags;
+    LIST_FOREACH(site_tags, &lgtd_lifx_site_tags_map, link) {
+        if (!memcmp(site_tags->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH)) {
             return true; // site already exists
         }
     }
 
-    site_map = calloc(1, sizeof(*site_map));
-    memcpy(site_map->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH);
-    LIST_INSERT_HEAD(&lgtd_lifx_site_tags_map, site_map, link);
+    site_tags = calloc(1, sizeof(*site_tags));
+    memcpy(site_tags->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH);
+    LIST_INSERT_HEAD(&lgtd_lifx_site_tags_map, site_tags, link);
 
     return true;
 }
@@ -82,17 +82,17 @@
 {
     assert(site);
 
-    struct lgtd_lifx_site_tags *site_map, *next_site_map;
-    LIST_FOREACH_SAFE(site_map, &lgtd_lifx_site_tags_map, link, next_site_map) {
-        if (!memcmp(site_map->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH)) {
-            LIST_REMOVE(site_map, link);
-            free(site_map);
+    struct lgtd_lifx_site_tags *site_tags, *next_site_tags;
+    LIST_FOREACH_SAFE(site_tags, &lgtd_lifx_site_tags_map, link, next_site_tags) {
+        if (!memcmp(site_tags->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH)) {
+            LIST_REMOVE(site_tags, link);
+            free(site_tags);
             return;
         }
     }
 
 #ifndef NDEBUG
-    assert(site_map != LIST_END(&lgtd_lifx_site_tags_map));
+    assert(site_tags != LIST_END(&lgtd_lifx_site_tags_map));
 #else
     lgtd_warnx(
         "tried to remove unknown site %s from the tags list", lgtd_addrtoa(site)
@@ -100,23 +100,72 @@
 #endif
 }
 
+static struct lgtd_lifx_label_sites_tags *
+lgtd_lifx_tagging_labels_list_find(const char *label)
+{
+    struct lgtd_lifx_label_sites_tags *label_sites_tags = NULL;
+    LIST_FOREACH(label_sites_tags, &lgtd_lifx_labels, link) {
+        if (!strcmp(label_sites_tags->label, label)) {
+            break;
+        }
+    }
+    return label_sites_tags;
+}
+
+static bool
+lgtd_lifx_tagging_labels_list_add(const char *label,
+                                  struct lgtd_lifx_site_tags *site_tags)
+{
+    struct lgtd_lifx_label_sites_tags *label_sites_tags =
+        lgtd_lifx_tagging_labels_list_find(label);
+
+    if (!label_sites_tags) {
+        label_sites_tags = calloc(1, sizeof(*label_sites_tags));
+        if (!label_sites_tags) {
+            return false;
+        }
+        label_sites_tags->label_len = strlen(label);
+        memcpy(label_sites_tags->label, label, label_sites_tags->label_len);
+        LIST_INSERT_HEAD(&lgtd_lifx_labels, label_sites_tags, link);
+    }
+
+#ifndef NDEBUG
+    const struct lgtd_lifx_site_tags *it;
+    LIST_FOREACH(it, &label_sites_tags->sites_tags, link_by_label) {
+        assert(it != site_tags);
+    }
+#endif
+
+    LIST_INSERT_HEAD(&label_sites_tags->sites_tags, site_tags, link_by_label);
+    return true;
+}
+
+static void
+lgtd_lifx_tagging_labels_list_remove(const char *label,
+                                     struct lgtd_lifx_site_tags *site_tags)
+{
+    assert(lgtd_lifx_tagging_labels_list_find(label));
+    LIST_REMOVE(site_tags, link_by_label);
+}
+
 void
-lgtd_lifx_tagging_update(const uint8_t *site, const char *label, uint64be_t tags)
+lgtd_lifx_tagging_update(const uint8_t *site, const char *label, uint64_t tags)
 {
     assert(site);
     assert(label);
+    assert(label[LGTD_LIFX_LABEL_SIZE - 1] == '\0');
 
-    struct lgtd_lifx_site_tags *site_map;
-    LIST_FOREACH(site_map, &lgtd_lifx_site_tags_map, link) {
-        if (!memcmp(site_map->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH)) {
+    struct lgtd_lifx_site_tags *site_tags;
+    LIST_FOREACH(site_tags, &lgtd_lifx_site_tags_map, link) {
+        if (!memcmp(site_tags->site_id.as_array, site, LGTD_LIFX_ADDR_LENGTH)) {
             break;
         }
     }
 
 #ifndef NDEBUG
-    assert(site_map != LIST_END(&lgtd_lifx_site_tags_map));
+    assert(site_tags != LIST_END(&lgtd_lifx_site_tags_map));
 #else
-    if (site_map == LIST_END(&lgtd_lifx_site_tags_map)) {
+    if (site_tags == LIST_END(&lgtd_lifx_site_tags_map)) {
         lgtd_warnx(
             "tried to add tag %s on unknown site %s", label, lgtd_addrtoa(site)
         );
@@ -129,24 +181,35 @@
         if (i == -1) {
             break;
         }
-        // NOTE: should we return an error if the label is too big? and/or
-        // print a warning:
-        int n = LGTD_MIN(LGTD_LIFX_LABEL_SIZE - 1, strlen(label));
-        if (memcmp(site_map->labels[i], label, n)) {
-            if (n) {
-                memcpy(site_map->labels[i], label, n);
-                lgtd_info(
-                    "adding tag %s (id %d) on site %s",
-                    label, i, lgtd_addrtoa(site)
-                );
-            } else {
-                lgtd_info(
-                    "removing tag %s (id %d) on site %s",
-                    site_map->labels[i], i, lgtd_addrtoa(site)
+        int len = strlen(label); // len ? adding a label : removing a label
+        if (len) {
+            if (!site_tags->labels[i][0]) {
+                if (lgtd_lifx_tagging_labels_list_add(label, site_tags)) {
+                    lgtd_info(
+                        "adding tag %s (id %d) on site %s",
+                        label, i, lgtd_addrtoa(site)
+                    );
+                    memcpy(site_tags->labels[i], label, len);
+                } else {
+                    lgtd_warn(
+                        "can't add tag %s (id %d) on site %s",
+                        label, i, lgtd_addrtoa(site)
+                    );
+                }
+            } else if (!memcmp(site_tags->labels[i], label, len)) {
+                lgtd_warnx(
+                    "tried to overwrite tag %s (id %d) on site %s with tag %s",
+                    site_tags->labels[i], i, lgtd_addrtoa(site), label
                 );
             }
-            site_map->labels[i][n] = '\0';
+        } else if (site_tags->labels[i][0]) {
+            lgtd_info(
+                "removing tag %s (id %d) on site %s",
+                site_tags->labels[i], i, lgtd_addrtoa(site)
+            );
+            lgtd_lifx_tagging_labels_list_remove(label, site_tags);
+            memset(site_tags->labels[i], 0, sizeof(site_tags->labels[i]));
         }
         tags &= ~(1 << i);
-    };
+    }
 }
diff --git a/lifx/tagging.h b/lifx/tagging.h
--- a/lifx/tagging.h
+++ b/lifx/tagging.h
@@ -19,6 +19,7 @@
 
 struct lgtd_lifx_site_tags {
     LIST_ENTRY(lgtd_lifx_site_tags) link;
+    LIST_ENTRY(lgtd_lifx_site_tags) link_by_label;
     union {
         uint8_t                     as_array[LGTD_LIFX_ADDR_LENGTH];
         uint64_t                    as_integer;
@@ -28,18 +29,17 @@
 };
 LIST_HEAD(lgtd_lifx_site_tags_list, lgtd_lifx_site_tags);
 
-struct lgtd_lifx_label_site_tags {
-    LIST_ENTRY(lgtd_lifx_label_site_tags)   link;
-    const char                              label[LGTD_LIFX_LABEL_SIZE];
+struct lgtd_lifx_label_sites_tags {
+    LIST_ENTRY(lgtd_lifx_label_sites_tags)  link;
+    char                                    label[LGTD_LIFX_LABEL_SIZE];
     int                                     label_len;
-    const struct lgtd_lifx_site_tags        *site_tags;
+    struct lgtd_lifx_site_tags_list         sites_tags;
 };
-LIST_HEAD(lgtd_lifx_label_site_tags_list, lgtd_lifx_label_site_tags);
+LIST_HEAD(lgtd_lifx_label_sites_tags_list, lgtd_lifx_label_sites_tags);
 
-extern struct lgtd_lifx_label_site_tags_list lgtd_lifx_labels;
+extern struct lgtd_lifx_label_sites_tags_list lgtd_lifx_labels;
 
 bool lgtd_lifx_tagging_add_site(const uint8_t *site);
 void lgtd_lifx_tagging_remove_site(const uint8_t *site);
 
-// XXX: tout porte a croire que tags doit etre convertit depuis little endian:
-void lgtd_lifx_tagging_update(const uint8_t *, const char *, uint64be_t);
+void lgtd_lifx_tagging_update(const uint8_t *, const char *, uint64_t);
diff --git a/lifx/wire_proto.c b/lifx/wire_proto.c
--- a/lifx/wire_proto.c
+++ b/lifx/wire_proto.c
@@ -149,7 +149,7 @@
             .name = "TAG_LABELS",
             .type = LGTD_LIFX_TAG_LABELS,
             .size = sizeof(struct lgtd_lifx_packet_tag_labels),
-            .decode = lgtd_lifx_wire_null_packet_encoder_decoder,
+            .decode = DECODER(lgtd_lifx_wire_decode_tag_labels),
             .handle = HANDLER(lgtd_lifx_gateway_handle_tag_labels)
         }
     };
@@ -335,3 +335,12 @@
     pkt->period = htole16(pkt->period);
     pkt->skew_ratio = htole16(pkt->skew_ratio);
 }
+
+void
+lgtd_lifx_wire_decode_tag_labels(struct lgtd_lifx_packet_tag_labels *pkt)
+{
+    assert(pkt);
+
+    pkt->label[sizeof(pkt->label) - 1] = '\0';
+    pkt->tags = le64toh(pkt->tags);
+}
diff --git a/lifx/wire_proto.h b/lifx/wire_proto.h
--- a/lifx/wire_proto.h
+++ b/lifx/wire_proto.h
@@ -43,7 +43,8 @@
         //! LIFX internal use should be 0.
         uint16le_t  origin:2;
     }               protocol;
-    //! This seems to be for LIFX internal use only.
+    //! Here is what LIFXKit says about it, maybe it's related to zigbee:
+    //! Message source identifier from NAT table (Internal LIFX use)
     uint32le_t      source;
     union {
         //! All targeted tags ORed together.
@@ -266,4 +267,6 @@
 void lgtd_lifx_wire_decode_power_state(struct lgtd_lifx_packet_power_state *);
 
 void lgtd_lifx_wire_encode_light_color(struct lgtd_lifx_packet_light_color *);
-void lgtd_lifx_wire_encode_waveform(struct lgtd_lifx_packet_waveform *pkt);
+void lgtd_lifx_wire_encode_waveform(struct lgtd_lifx_packet_waveform *);
+
+void lgtd_lifx_wire_decode_tag_labels(struct lgtd_lifx_packet_tag_labels *);
diff --git a/tests/core/tests_utils.c b/tests/core/tests_utils.c
--- a/tests/core/tests_utils.c
+++ b/tests/core/tests_utils.c
@@ -26,7 +26,7 @@
 struct lgtd_lifx_gateway_list lgtd_lifx_gateways =
     LIST_HEAD_INITIALIZER(&lgtd_lifx_gateways);
 
-struct lgtd_lifx_label_site_tags_list lgtd_lifx_labels =
+struct lgtd_lifx_label_sites_tags_list lgtd_lifx_labels =
     LIST_HEAD_INITIALIZER(&lgtd_lifx_labels);
 
 struct lgtd_lifx_gateway *
diff --git a/tests/lightsc b/tests/lightsc
--- a/tests/lightsc
+++ b/tests/lightsc
@@ -62,6 +62,10 @@
 def power_off(socket, id, target):
     jsonrpc_call(socket, id, "power_off", {"target": target})
 
+
+def list_tags(socket, id):
+    jsonrpc_call(socket, id, "list_tags", [])
+
 if __name__ == "__main__":
     s = socket.create_connection(("localhost", 1234))
     h = 0
