# HG changeset patch
# Parent  e87d0f80fc3389afd58efa0536354d19d60487d2
Turn lifx_gateway.site into an union with an uint64_t

This is will be needed to support tagging.

diff --git a/core/router.c b/core/router.c
--- a/core/router.c
+++ b/core/router.c
@@ -52,10 +52,16 @@
     struct lgtd_lifx_gateway *gw;
     LIST_FOREACH(gw, &lgtd_lifx_gateways, link) {
         pkt_infos = lgtd_lifx_wire_setup_header(
-            &hdr, LGTD_LIFX_TARGET_ALL_DEVICES, target, gw->site, pkt_type
+            &hdr,
+            LGTD_LIFX_TARGET_ALL_DEVICES,
+            target,
+            gw->site.as_array,
+            pkt_type
         );
         assert(pkt_infos);
-        lgtd_lifx_gateway_send_packet(gw, &hdr, pkt, pkt_infos->size);
+        lgtd_lifx_gateway_enqueue_packet(
+            gw, &hdr, pkt_type, pkt, pkt_infos->size
+        );
         struct lgtd_lifx_bulb *bulb;
         lgtd_time_mono_t now = lgtd_time_monotonic_msecs();
         SLIST_FOREACH(bulb, &gw->bulbs, link_by_gw) {
@@ -84,11 +90,17 @@
 
     const struct lgtd_lifx_packet_infos *pkt_infos;
     pkt_infos = lgtd_lifx_wire_setup_header(
-        &hdr, LGTD_LIFX_TARGET_DEVICE, target, bulb->gw->site, pkt_type
+        &hdr,
+        LGTD_LIFX_TARGET_DEVICE,
+        target,
+        bulb->gw->site.as_array,
+        pkt_type
     );
     assert(pkt_infos);
 
-    lgtd_lifx_gateway_send_packet(bulb->gw, &hdr, pkt, pkt_infos->size);
+    lgtd_lifx_gateway_enqueue_packet(
+        bulb->gw, &hdr, pkt_type, pkt, pkt_infos->size
+    );
 
     if (pkt_type == LGTD_LIFX_SET_POWER_STATE) {
         bulb->dirty_at = lgtd_time_monotonic_msecs();
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -68,7 +68,8 @@
     }
 
     lgtd_info(
-        "connection with gateway bulb [%s]:%hu closed", gw->ip_addr, gw->port
+        "connection with gateway bulb [%s]:%hu (site %s) closed",
+        gw->ip_addr, gw->port, lgtd_addrtoa(gw->site.as_array)
     );
     free(gw);
 }
@@ -124,9 +125,14 @@
     assert(gw);
 
     struct lgtd_lifx_packet_header hdr;
-    union lgtd_lifx_target target = { .addr = gw->site };
+    union lgtd_lifx_target target = { .addr = gw->site.as_array };
+
     lgtd_lifx_wire_setup_header(
-        &hdr, LGTD_LIFX_TARGET_SITE, target, gw->site, LGTD_LIFX_GET_LIGHT_STATE
+        &hdr,
+        LGTD_LIFX_TARGET_SITE,
+        target,
+        gw->site.as_array,
+        LGTD_LIFX_GET_LIGHT_STATE
     );
     lgtd_debug("GET_LIGHT_STATE --> [%s]:%hu", gw->ip_addr, gw->port);
     lgtd_lifx_gateway_send_packet(gw, &hdr, NULL, 0);
@@ -210,7 +216,7 @@
     memcpy(&gw->peer, peer, sizeof(gw->peer));
     lgtd_sockaddrtoa(peer, gw->ip_addr, sizeof(gw->ip_addr));
     gw->port = lgtd_sockaddrport(peer);
-    memcpy(gw->site, site, sizeof(gw->site));
+    memcpy(gw->site.as_array, site, sizeof(gw->site.as_array));
     gw->last_req_at = received_at;
     gw->next_req_at = received_at;
     gw->last_pkt_at = received_at;
@@ -227,7 +233,7 @@
 
     lgtd_info(
         "gateway for site %s at [%s]:%hu",
-        lgtd_addrtoa(gw->site), gw->ip_addr, gw->port
+        lgtd_addrtoa(gw->site.as_array), gw->ip_addr, gw->port
     );
     LIST_INSERT_HEAD(&lgtd_lifx_gateways, gw, link);
 
@@ -288,7 +294,7 @@
     assert(gw);
     assert(hdr);
     assert(pkt_size >= 0 && pkt_size < LGTD_LIFX_MAX_PACKET_SIZE);
-    assert(!memcmp(hdr->site, gw->site, LGTD_LIFX_ADDR_LENGTH));
+    assert(!memcmp(hdr->site, gw->site.as_array, LGTD_LIFX_ADDR_LENGTH));
 
     evbuffer_add(gw->write_buf, hdr, sizeof(*hdr));
     if (pkt) {
diff --git a/lifx/gateway.h b/lifx/gateway.h
--- a/lifx/gateway.h
+++ b/lifx/gateway.h
@@ -34,7 +34,11 @@
     struct sockaddr_storage         peer;
     char                            ip_addr[INET6_ADDRSTRLEN];
     uint16_t                        port;
-    uint8_t                         site[LGTD_LIFX_ADDR_LENGTH];
+    // TODO: just use an integer and rename it to site_id:
+    union {
+        uint8_t                     as_array[LGTD_LIFX_ADDR_LENGTH];
+        uint64_t                    as_integer;
+    }                               site;
     evutil_socket_t                 socket;
     // Those three timers let us measure the latency of the gateway. If we
     // aren't the only client on the network then this won't be accurate since
diff --git a/tests/core/router/test_router_broadcast.c b/tests/core/router/test_router_broadcast.c
--- a/tests/core/router/test_router_broadcast.c
+++ b/tests/core/router/test_router_broadcast.c
@@ -38,7 +38,7 @@
         if (hdr->target.tags != 0) {
             lgtd_errx(1, "tags should be 0 for broadcast");
         }
-        if (memcmp(gw->site, hdr->site, sizeof(hdr->site))) {
+        if (memcmp(gw->site.as_array, hdr->site, sizeof(hdr->site))) {
             lgtd_errx(1, "sites don't match");
         }
         if (lgtd_tests_gw_pkt_queue[i].pkt != &payload) {
diff --git a/tests/core/router/test_router_device.c b/tests/core/router/test_router_device.c
--- a/tests/core/router/test_router_device.c
+++ b/tests/core/router/test_router_device.c
@@ -41,7 +41,7 @@
         lgtd_errx(1, "the packet header doesn't have the right target address");
     }
 
-    if (memcmp(gw_1->site, hdr_queued->site, sizeof(hdr_queued->site))) {
+    if (memcmp(gw_1->site.as_array, hdr_queued->site, sizeof(hdr_queued->site))) {
         lgtd_errx(1, "incorrect site in the headers");
     }
 
diff --git a/tests/core/tests_utils.c b/tests/core/tests_utils.c
--- a/tests/core/tests_utils.c
+++ b/tests/core/tests_utils.c
@@ -31,7 +31,7 @@
     struct lgtd_lifx_gateway *gw = calloc(1, sizeof(*gw));
 
     gw->socket = id;
-    gw->site[0] = id;
+    gw->site.as_array[0] = id;
 
     LIST_INSERT_HEAD(&lgtd_lifx_gateways, gw, link);
 
