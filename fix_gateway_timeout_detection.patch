# HG changeset patch
# Parent  f670eedc6d319ce8c21fa09dec0c7cc0dd22071c
Fix the LIFX gateway timeout detection

Don't look at the difference on the last RTT (latency) but look at the
difference between now and the last time a packet was sent. This should
also speed up the re-discovery after a wakeup from sleep from example.

diff --git a/lifx/discovery.c b/lifx/discovery.c
--- a/lifx/discovery.c
+++ b/lifx/discovery.c
@@ -111,7 +111,11 @@
     // gateways aren't bulbs themselves:
     struct lgtd_lifx_gateway *gw, *next_gw;
     LIST_FOREACH_SAFE(gw, &lgtd_lifx_gateways, link, next_gw) {
-        int gw_lag = lgtd_lifx_gateway_latency(gw);
+        // The gateway latency is the difference during the last round-trip-time
+        // (RTT) and has been a PITA to get right (it's off sometimes). Anyway,
+        // here we are interested in a timeout: how much time elapsed since the
+        // last update, this is different than the last RTT.
+        int gw_lag = lgtd_lifx_gateway_msecs_since_last_update(gw);
         if (gw_lag >= LGTD_LIFX_DISCOVERY_DEVICE_TIMEOUT_MSECS) {
             lgtd_info(
                 "closing bulb gateway %s that hasn't received traffic for %dms",
diff --git a/lifx/gateway.h b/lifx/gateway.h
--- a/lifx/gateway.h
+++ b/lifx/gateway.h
@@ -90,6 +90,14 @@
     (bulb_fn)(b, __VA_ARGS__);                                              \
 } while (0)
 
+static inline lgtd_time_mono_t
+lgtd_lifx_gateway_msecs_since_last_update(const struct lgtd_lifx_gateway *gw)
+{
+    assert(gw);
+
+    return lgtd_time_monotonic_msecs() - gw->last_pkt_at;
+}
+
 struct lgtd_lifx_gateway *lgtd_lifx_gateway_get(const struct sockaddr *, ev_socklen_t);
 struct lgtd_lifx_gateway *lgtd_lifx_gateway_open(const struct sockaddr *,
                                                  ev_socklen_t,
