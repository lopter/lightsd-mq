# HG changeset patch
# Parent  10fba0cab2e849b0995da64f78400c720ef43aa9
Rename the LIFX watchdog module to discovery

diff --git a/core/lightsd.c b/core/lightsd.c
--- a/core/lightsd.c
+++ b/core/lightsd.c
@@ -41,7 +41,7 @@
 #include "lifx/bulb.h"
 #include "lifx/gateway.h"
 #include "lifx/broadcast.h"
-#include "lifx/watchdog.h"
+#include "lifx/discovery.h"
 #include "version.h"
 #include "jsmn.h"
 #include "jsonrpc.h"
@@ -65,7 +65,7 @@
 void
 lgtd_cleanup(void)
 {
-    lgtd_lifx_watchdog_close();
+    lgtd_lifx_discovery_close();
     lgtd_listen_close_all();
     lgtd_command_pipe_close_all();
     lgtd_client_close_all();
@@ -260,7 +260,7 @@
     lgtd_daemon_die_if_running_as_root_unless_requested(lgtd_opts.user);
 
     lgtd_lifx_wire_load_packet_info_map();
-    if (!lgtd_lifx_watchdog_setup() || !lgtd_lifx_broadcast_setup()) {
+    if (!lgtd_lifx_discovery_setup() || !lgtd_lifx_broadcast_setup()) {
         lgtd_err(1, "can't setup lightsd");
     }
 
@@ -271,7 +271,7 @@
         }
     }
 
-    lgtd_lifx_watchdog_start_discovery();
+    lgtd_lifx_discovery_start();
 
     event_base_dispatch(lgtd_ev_base);
 
diff --git a/lifx/CMakeLists.txt b/lifx/CMakeLists.txt
--- a/lifx/CMakeLists.txt
+++ b/lifx/CMakeLists.txt
@@ -9,8 +9,8 @@
     lifx
     broadcast.c
     bulb.c
+    discovery.c
     gateway.c
     tagging.c
-    watchdog.c
     wire_proto.c
 )
diff --git a/lifx/watchdog.c b/lifx/discovery.c
rename from lifx/watchdog.c
rename to lifx/discovery.c
--- a/lifx/watchdog.c
+++ b/lifx/discovery.c
@@ -33,18 +33,18 @@
 #include "broadcast.h"
 #include "bulb.h"
 #include "gateway.h"
-#include "watchdog.h"
+#include "discovery.h"
 #include "core/lightsd.h"
 
 static struct event *lgtd_watchdog_interval_ev = NULL;
 static struct event *lgtd_discovery_timeout_ev = NULL;
 static int lgtd_discovery_timeout =
-    LGTD_LIFX_WATCHDOG_ACTIVE_DISCOVERY_INTERVAL_MSECS;
+    LGTD_LIFX_DISCOVERY_ACTIVE_DISCOVERY_INTERVAL_MSECS;
 
 static void
-lgtd_lifx_watchdog_discovery_timeout_event_callback(evutil_socket_t socket,
-                                                    short events,
-                                                    void *ctx)
+lgtd_lifx_discovery_timeout_event_callback(evutil_socket_t socket,
+                                           short events,
+                                           void *ctx)
 {
     (void)socket;
     (void)events;
@@ -52,7 +52,7 @@
 
     if (LIST_EMPTY(&lgtd_lifx_gateways)) {
         lgtd_discovery_timeout =
-            LGTD_LIFX_WATCHDOG_ACTIVE_DISCOVERY_INTERVAL_MSECS;
+            LGTD_LIFX_DISCOVERY_ACTIVE_DISCOVERY_INTERVAL_MSECS;
         lgtd_debug(
             "discovery didn't returned anything in %dms, restarting it",
             lgtd_discovery_timeout
@@ -60,7 +60,7 @@
     } else {
         lgtd_discovery_timeout = LGTD_MIN(
             lgtd_discovery_timeout * 2,
-            LGTD_LIFX_WATCHDOG_PASSIVE_DISCOVERY_INTERVAL_MSECS
+            LGTD_LIFX_DISCOVERY_PASSIVE_DISCOVERY_INTERVAL_MSECS
         );
         lgtd_debug(
             "sending periodic discovery packet, timeout=%d",
@@ -76,9 +76,9 @@
 }
 
 static void
-lgtd_lifx_watchdog_timeout_event_callback(evutil_socket_t socket,
-                                          short events,
-                                          void *ctx)
+lgtd_lifx_discovery_watchdog_interval_callback(evutil_socket_t socket,
+                                               short events,
+                                               void *ctx)
 {
     (void)socket;
     (void)events;
@@ -95,7 +95,7 @@
         next_bulb
     ) {
         int light_state_lag = now - bulb->last_light_state_at;
-        if (light_state_lag >= LGTD_LIFX_WATCHDOG_DEVICE_TIMEOUT_MSECS) {
+        if (light_state_lag >= LGTD_LIFX_DISCOVERY_DEVICE_TIMEOUT_MSECS) {
             lgtd_info(
                 "closing bulb \"%.*s\" that hasn't been updated for %dms",
                 LGTD_LIFX_LABEL_SIZE, bulb->state.label, light_state_lag
@@ -112,14 +112,14 @@
     struct lgtd_lifx_gateway *gw, *next_gw;
     LIST_FOREACH_SAFE(gw, &lgtd_lifx_gateways, link, next_gw) {
         int gw_lag = lgtd_lifx_gateway_latency(gw);
-        if (gw_lag >= LGTD_LIFX_WATCHDOG_DEVICE_TIMEOUT_MSECS) {
+        if (gw_lag >= LGTD_LIFX_DISCOVERY_DEVICE_TIMEOUT_MSECS) {
             lgtd_info(
                 "closing bulb gateway %s that hasn't received traffic for %dms",
                 gw->peeraddr, gw_lag
             );
             lgtd_lifx_gateway_close(gw);
             start_discovery = true;
-        } else if (gw_lag >= LGTD_LIFX_WATCHDOG_DEVICE_FORCE_REFRESH_MSECS) {
+        } else if (gw_lag >= LGTD_LIFX_DISCOVERY_DEVICE_FORCE_REFRESH_MSECS) {
             lgtd_info(
                 "no update on bulb gateway %s for %dms, forcing refresh",
                 gw->peeraddr, gw_lag
@@ -136,7 +136,7 @@
 }
 
 bool
-lgtd_lifx_watchdog_setup(void)
+lgtd_lifx_discovery_setup(void)
 {
     assert(!lgtd_watchdog_interval_ev);
     assert(!lgtd_discovery_timeout_ev);
@@ -145,14 +145,14 @@
         lgtd_ev_base,
         -1,
         0,
-        lgtd_lifx_watchdog_discovery_timeout_event_callback,
+        lgtd_lifx_discovery_timeout_event_callback,
         NULL
     );
     lgtd_watchdog_interval_ev = event_new(
         lgtd_ev_base,
         -1,
         EV_PERSIST,
-        lgtd_lifx_watchdog_timeout_event_callback,
+        lgtd_lifx_discovery_watchdog_interval_callback,
         NULL
     );
 
@@ -161,13 +161,13 @@
     }
 
     int errsave = errno;
-    lgtd_lifx_watchdog_close();
+    lgtd_lifx_discovery_close();
     errno = errsave;
     return false;
 }
 
 void
-lgtd_lifx_watchdog_close(void)
+lgtd_lifx_discovery_close(void)
 {
     if (lgtd_discovery_timeout_ev) {
         event_del(lgtd_discovery_timeout_ev);
@@ -182,7 +182,7 @@
 }
 
 void
-lgtd_lifx_watchdog_start(void)
+lgtd_lifx_discovery_start_watchdog(void)
 {
     assert(
         !RB_EMPTY(&lgtd_lifx_bulbs_table) || !LIST_EMPTY(&lgtd_lifx_gateways)
@@ -191,7 +191,7 @@
     bool pending = evtimer_pending(lgtd_watchdog_interval_ev, NULL);
     if (!pending) {
         struct timeval tv = LGTD_MSECS_TO_TIMEVAL(
-            LGTD_LIFX_WATCHDOG_INTERVAL_MSECS
+            LGTD_LIFX_DISCOVERY_WATCHDOG_INTERVAL_MSECS
         );
         if (event_add(lgtd_watchdog_interval_ev, &tv)) {
             lgtd_err(1, "can't start watchdog");
@@ -201,11 +201,12 @@
 }
 
 void
-lgtd_lifx_watchdog_start_discovery(void)
+lgtd_lifx_discovery_start(void)
 {
     assert(!evtimer_pending(lgtd_discovery_timeout_ev, NULL));
 
-    lgtd_discovery_timeout = LGTD_LIFX_WATCHDOG_ACTIVE_DISCOVERY_INTERVAL_MSECS;
-    lgtd_lifx_watchdog_discovery_timeout_event_callback(-1, 0, NULL);
+    lgtd_discovery_timeout =
+        LGTD_LIFX_DISCOVERY_ACTIVE_DISCOVERY_INTERVAL_MSECS;
+    lgtd_lifx_discovery_timeout_event_callback(-1, 0, NULL);
     lgtd_debug("starting discovery timer");
 }
diff --git a/lifx/watchdog.h b/lifx/discovery.h
rename from lifx/watchdog.h
rename to lifx/discovery.h
--- a/lifx/watchdog.h
+++ b/lifx/discovery.h
@@ -17,15 +17,15 @@
 
 #pragma once
 
-enum lgtd_lifx_watchdog_constants {
-    LGTD_LIFX_WATCHDOG_INTERVAL_MSECS = 500,
-    LGTD_LIFX_WATCHDOG_ACTIVE_DISCOVERY_INTERVAL_MSECS = 2000,
-    LGTD_LIFX_WATCHDOG_PASSIVE_DISCOVERY_INTERVAL_MSECS = 10000,
-    LGTD_LIFX_WATCHDOG_DEVICE_TIMEOUT_MSECS = 3000,
-    LGTD_LIFX_WATCHDOG_DEVICE_FORCE_REFRESH_MSECS = 2000
+enum lgtd_lifx_discovery_constants {
+    LGTD_LIFX_DISCOVERY_WATCHDOG_INTERVAL_MSECS = 500,
+    LGTD_LIFX_DISCOVERY_DEVICE_TIMEOUT_MSECS = 3000,
+    LGTD_LIFX_DISCOVERY_DEVICE_FORCE_REFRESH_MSECS = 2000,
+    LGTD_LIFX_DISCOVERY_ACTIVE_DISCOVERY_INTERVAL_MSECS = 2000,
+    LGTD_LIFX_DISCOVERY_PASSIVE_DISCOVERY_INTERVAL_MSECS = 10000,
 };
 
-bool lgtd_lifx_watchdog_setup(void);
-void lgtd_lifx_watchdog_start(void);
-void lgtd_lifx_watchdog_close(void);
-void lgtd_lifx_watchdog_start_discovery(void);
+bool lgtd_lifx_discovery_setup(void);
+void lgtd_lifx_discovery_close(void);
+void lgtd_lifx_discovery_start_watchdog(void);
+void lgtd_lifx_discovery_start(void);
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -36,7 +36,7 @@
 #include "core/time_monotonic.h"
 #include "bulb.h"
 #include "gateway.h"
-#include "watchdog.h"
+#include "discovery.h"
 #include "broadcast.h"
 #include "core/timer.h"
 #include "tagging.h"
@@ -356,7 +356,7 @@
 
     // In case this is the first bulb (re-)discovered, start the watchdog, it
     // will stop by itself:
-    lgtd_lifx_watchdog_start();
+    lgtd_lifx_discovery_start_watchdog();
 
     LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(gateways, 1);
 
diff --git a/tests/lifx/gateway/CMakeLists.txt b/tests/lifx/gateway/CMakeLists.txt
--- a/tests/lifx/gateway/CMakeLists.txt
+++ b/tests/lifx/gateway/CMakeLists.txt
@@ -17,7 +17,7 @@
     test_lifx_gateway STATIC
     ${LIGHTSD_SOURCE_DIR}/lifx/broadcast.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
-    ${LIGHTSD_SOURCE_DIR}/lifx/watchdog.c
+    ${LIGHTSD_SOURCE_DIR}/lifx/discovery.c
     ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
 )
 
