# HG changeset patch
# Parent  5cf24fa4f86b6dbd89e6955ce15b55ad59d9812e
Fix LIFX v2 protocol handling

- properly set res required;
- properly listen on each gateway's socket;
- improved traffic logging.

diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,7 +5,7 @@
 
 SET(CPACK_PACKAGE_VERSION_MAJOR "1")
 SET(CPACK_PACKAGE_VERSION_MINOR "1")
-SET(CPACK_PACKAGE_VERSION_PATCH "1")
+SET(CPACK_PACKAGE_VERSION_PATCH "2")
 SET(LIGHTSD_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
 
 MESSAGE(STATUS "lightsd version: ${LIGHTSD_VERSION}")
diff --git a/core/log.c b/core/log.c
--- a/core/log.c
+++ b/core/log.c
@@ -23,6 +23,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 
+#include <event2/util.h>
+
 #include "lifx/wire_proto.h"
 #include "stats.h"
 #include "console.h"
diff --git a/lifx/broadcast.c b/lifx/broadcast.c
--- a/lifx/broadcast.c
+++ b/lifx/broadcast.c
@@ -51,104 +51,6 @@
 };
 
 static bool
-lgtd_lifx_broadcast_handle_read(void)
-{
-    assert(lgtd_lifx_broadcast_endpoint.socket != -1);
-
-    while (true) {
-        struct sockaddr_storage peer;
-        // if we get back from recvfrom with a sockaddr_in the end of the struct
-        // will not be initialized and we will be comparing unintialized stuff
-        // in lgtd_lifx_gateway_get:
-        memset(&peer, 0, sizeof(peer));
-        ev_socklen_t addrlen = sizeof(peer);
-        union {
-            char buf[LGTD_LIFX_MAX_PACKET_SIZE];
-            struct lgtd_lifx_packet_header hdr;
-        } read;
-        int nbytes = recvfrom(
-            lgtd_lifx_broadcast_endpoint.socket,
-            read.buf,
-            sizeof(read.buf),
-            0,
-            (struct sockaddr *)&peer,
-            &addrlen
-        );
-        if (nbytes == -1) {
-            int error = EVUTIL_SOCKET_ERROR();
-            if (error == EINTR) {
-                continue;
-            }
-            if (error == EAGAIN) {
-                return true;
-            }
-            lgtd_warn("can't receive broadcast packet");
-            return false;
-        }
-
-        lgtd_time_mono_t received_at = lgtd_time_monotonic_msecs();
-        char peer_addr[INET6_ADDRSTRLEN];
-        LGTD_SOCKADDRTOA((const struct sockaddr *)&peer, peer_addr);
-
-        if (nbytes < LGTD_LIFX_PACKET_HEADER_SIZE) {
-            lgtd_warnx("broadcast packet too short from %s", peer_addr);
-            return false;
-        }
-
-        lgtd_lifx_wire_decode_header(&read.hdr);
-        if (read.hdr.size != nbytes) {
-            lgtd_warnx("incomplete broadcast packet from %s", peer_addr);
-            return false;
-        }
-        int proto_version = read.hdr.protocol & LGTD_LIFX_PROTOCOL_VERSION_MASK;
-        if (proto_version != LGTD_LIFX_PROTOCOL_V1) {
-            lgtd_warnx(
-                "unsupported protocol %d from %s",
-                read.hdr.protocol & LGTD_LIFX_PROTOCOL_VERSION_MASK, peer_addr
-            );
-        }
-        if (read.hdr.packet_type == LGTD_LIFX_GET_PAN_GATEWAY) {
-            continue;
-        }
-
-        const struct lgtd_lifx_packet_info *pkt_info =
-            lgtd_lifx_wire_get_packet_info(read.hdr.packet_type);
-        if (!pkt_info) {
-            lgtd_warnx(
-                "received unknown packet %#x from %s",
-                read.hdr.packet_type, peer_addr
-            );
-            continue;
-        }
-        if (!(read.hdr.protocol & LGTD_LIFX_PROTOCOL_ADDRESSABLE)) {
-            lgtd_warnx(
-                "received non-addressable packet %s from %s",
-                pkt_info->name, peer_addr
-            );
-            continue;
-        }
-        struct lgtd_lifx_gateway *gw;
-        gw = lgtd_lifx_gateway_get((struct sockaddr *)&peer, addrlen);
-        if (!gw && read.hdr.packet_type == LGTD_LIFX_PAN_GATEWAY) {
-            gw = lgtd_lifx_gateway_open(
-                (struct sockaddr *)&peer, addrlen, read.hdr.site, received_at
-            );
-            if (!gw) {
-                lgtd_err(1, "can't allocate gateway");
-            }
-        }
-        if (gw) {
-            void *pkt = &read.buf[LGTD_LIFX_PACKET_HEADER_SIZE];
-            gw->last_pkt_at = received_at;
-            pkt_info->decode(pkt);
-            pkt_info->handle(gw, &read.hdr, pkt);
-        } else {
-            lgtd_warnx("got packet from unknown gateway %s", peer_addr);
-        }
-    }
-}
-
-static bool
 lgtd_lifx_broadcast_handle_write(void)
 {
     assert(lgtd_lifx_broadcast_endpoint.socket != -1);
@@ -208,15 +110,11 @@
         lgtd_warnx("timeout on the udp broadcast socket");
         goto error_reset;
     }
-    if (events & EV_READ) {
-        if (!lgtd_lifx_broadcast_handle_read()) {
-            goto error_reset;
-        }
+    if ((events & EV_READ) && !lgtd_lifx_wire_handle_receive(socket, NULL)) {
+        goto error_reset;
     }
-    if (events & EV_WRITE) {
-        if (!lgtd_lifx_broadcast_handle_write()) {
-            goto error_reset;
-        }
+    if ((events & EV_WRITE) && !lgtd_lifx_broadcast_handle_write()) {
+        goto error_reset;
     }
 
     return;
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -59,12 +59,12 @@
 
     LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(gateways, -1);
     lgtd_timer_stop(gw->refresh_timer);
-    event_del(gw->write_ev);
+    event_del(gw->socket_ev);
     if (gw->socket != -1) {
         evutil_closesocket(gw->socket);
         LIST_REMOVE(gw, link);
     }
-    event_free(gw->write_ev);
+    event_free(gw->socket_ev);
     evbuffer_free(gw->write_buf);
     for (int i = 0; i != LGTD_LIFX_GATEWAY_MAX_TAGS; i++) {
         if (gw->tags[i]) {
@@ -102,9 +102,62 @@
     lgtd_lifx_bulb_close(bulb);
 }
 
+void
+lgtd_lifx_gateway_handle_packet(struct lgtd_lifx_gateway *gw,
+                                const struct sockaddr *peer,
+                                ev_socklen_t addrlen,
+                                const struct lgtd_lifx_packet_info *pkt_info,
+                                const struct lgtd_lifx_packet_header *hdr,
+                                const void *pkt,
+                                lgtd_time_mono_t received_at)
+{
+    assert(peer);
+    assert(addrlen);
+    assert(pkt_info);
+    assert(hdr);
+    assert(pkt);
+    assert(received_at);
+
+    if (gw) {
+        assert(gw->peerlen == addrlen);
+        assert(!memcmp(peer, gw->peer, addrlen));
+    } else {
+        gw = lgtd_lifx_gateway_get(peer, addrlen);
+        if (!gw && hdr->packet_type == LGTD_LIFX_PAN_GATEWAY) {
+            gw = lgtd_lifx_gateway_open(peer, addrlen, hdr->site, received_at);
+            if (!gw) {
+                lgtd_warn("can't allocate gateway");
+                return;
+            }
+        }
+    }
+
+    if (gw) {
+        // gw->last_pkt_at is used to compute timeouts based on known
+        // traffic only:
+        if (pkt_info->handle != lgtd_lifx_wire_enosys_packet_handler) {
+            gw->last_pkt_at = received_at;
+        }
+        pkt_info->handle(gw, hdr, pkt);
+    } else {
+        bool addressable = hdr->protocol & LGTD_LIFX_PROTOCOL_ADDRESSABLE;
+        bool tagged = hdr->protocol & LGTD_LIFX_PROTOCOL_TAGGED;
+        unsigned int protocol = hdr->protocol & LGTD_LIFX_PROTOCOL_VERSION_MASK;
+        char target[LGTD_LIFX_ADDR_STRLEN], peer_addr[INET6_ADDRSTRLEN];
+        LGTD_LIFX_WIRE_PRINT_TARGET(hdr, target);
+        LGTD_SOCKADDRTOA(peer, peer_addr);
+        lgtd_info(
+            "%s <-- %s - (Packet from unknown client or gateway, header "
+            "info: addressable=%d, tagged=%d, protocol=%d, target=%s)",
+            pkt_info->name, peer_addr, addressable, tagged, protocol, target
+        );
+    }
+}
+
 static void
-lgtd_lifx_gateway_write_callback(evutil_socket_t socket,
-                                 short events, void *ctx)
+lgtd_lifx_gateway_socket_event_callback(evutil_socket_t socket,
+                                        short events,
+                                        void *ctx)
 {
     (void)socket;
 
@@ -114,11 +167,14 @@
 
     if (events & EV_TIMEOUT) {  // Not sure how that could happen in UDP but eh.
         lgtd_warn("lost connection with gateway bulb %s", gw->peeraddr);
-        lgtd_lifx_gateway_close(gw);
-        if (!lgtd_lifx_broadcast_discovery()) {
-            lgtd_err(1, "can't start auto discovery");
+        goto drop_gw_and_restart_discovery;
+    }
+
+    if (events & EV_READ) {
+        bool ok = lgtd_lifx_wire_handle_receive(gw->socket, gw);
+        if (!ok) {
+            goto drop_gw_and_restart_discovery;
         }
-        return;
     }
 
     if (events & EV_WRITE) {
@@ -129,11 +185,7 @@
         int nbytes = evbuffer_write_atmost(gw->write_buf, gw->socket, to_write);
         if (nbytes == -1 && errno != EAGAIN) {
             lgtd_warn("can't write to %s", gw->peeraddr);
-            lgtd_lifx_gateway_close(gw);
-            if (!lgtd_lifx_broadcast_discovery()) {
-                lgtd_err(1, "can't start auto discovery");
-            }
-            return;
+            goto drop_gw_and_restart_discovery;
         }
 
         // Callbacks are called in any order, so we keep two timers to make
@@ -156,9 +208,18 @@
         }
 
         if (!evbuffer_get_length(gw->write_buf)) {
-            event_del(gw->write_ev);
+            event_del(gw->socket_ev);
         }
     }
+
+    return;
+
+drop_gw_and_restart_discovery:
+    lgtd_lifx_gateway_close(gw);
+    if (!lgtd_lifx_broadcast_discovery()) {
+        lgtd_err(1, "can't start auto discovery");
+    }
+    return;
 }
 
 static bool
@@ -311,15 +372,15 @@
         goto error_connect;
     }
 
-    gw->write_ev = event_new(
+    gw->socket_ev = event_new(
         lgtd_ev_base,
         gw->socket,
-        EV_WRITE|EV_PERSIST,
-        lgtd_lifx_gateway_write_callback,
+        EV_READ|EV_WRITE|EV_PERSIST,
+        lgtd_lifx_gateway_socket_event_callback,
         gw
     );
     gw->write_buf = evbuffer_new();
-    if (!gw->write_ev || !gw->write_buf) {
+    if (!gw->socket_ev || !gw->write_buf) {
         goto error_allocate;
     }
     gw->peer = malloc(addrlen);
@@ -364,8 +425,8 @@
 
 error_allocate:
     lgtd_warn("can't allocate a new gateway bulb");
-    if (gw->write_ev) {
-        event_free(gw->write_ev);
+    if (gw->socket_ev) {
+        event_free(gw->socket_ev);
     }
     if (gw->write_buf) {
         evbuffer_free(gw->write_buf);
@@ -443,7 +504,7 @@
     if (gw->pkt_ring_head == gw->pkt_ring_tail) {
         gw->pkt_ring_full = true;
     }
-    event_add(gw->write_ev, NULL);
+    event_add(gw->socket_ev, NULL);
 }
 
 void
@@ -689,8 +750,6 @@
                                     const struct lgtd_lifx_packet_header *hdr,
                                     const struct lgtd_lifx_packet_tag_labels *pkt)
 {
-    assert(gw && hdr && pkt);
-
     char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "SET_TAG_LABELS <-- %s - %s label=%.*s, tags=%jx",
@@ -713,8 +772,6 @@
                               const struct lgtd_lifx_packet_header *hdr,
                               const struct lgtd_lifx_packet_tags *pkt)
 {
-    assert(gw && hdr && pkt);
-
     char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "SET_TAGS <-- %s - %s tags=%#jx",
@@ -748,8 +805,6 @@
                                   const struct lgtd_lifx_packet_header *hdr,
                                   const struct lgtd_lifx_packet_ip_state *pkt)
 {
-    assert(gw && hdr && pkt);
-
     const char  *type;
     enum lgtd_lifx_bulb_ips ip_id;
     switch (hdr->packet_type) {
@@ -788,8 +843,6 @@
                                           const struct lgtd_lifx_packet_header *hdr,
                                           const struct lgtd_lifx_packet_ip_firmware_info *pkt)
 {
-    assert(gw && hdr && pkt);
-
     const char  *type;
     enum lgtd_lifx_bulb_ips ip_id;
     switch (hdr->packet_type) {
@@ -830,8 +883,6 @@
                                       const struct lgtd_lifx_packet_header *hdr,
                                       const struct lgtd_lifx_packet_product_info *pkt)
 {
-    assert(gw && hdr && pkt);
-
     char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "PRODUCT_INFO <-- %s - %s "
@@ -851,8 +902,6 @@
                                       const struct lgtd_lifx_packet_header *hdr,
                                       const struct lgtd_lifx_packet_runtime_info *pkt)
 {
-    assert(gw && hdr && pkt);
-
     char device_time[64], uptime[64], downtime[64], addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "PRODUCT_INFO <-- %s - %s time=%s, uptime=%s, downtime=%s",
@@ -873,8 +922,6 @@
                                     const struct lgtd_lifx_packet_header *hdr,
                                     const struct lgtd_lifx_packet_label *pkt)
 {
-    assert(gw && hdr && pkt);
-
     char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "BULB_LABEL <-- %s - %s label=%.*s",
@@ -892,8 +939,6 @@
                                        const struct lgtd_lifx_packet_header *hdr,
                                        const struct lgtd_lifx_packet_ambient_light *pkt)
 {
-    assert(gw && hdr && pkt);
-
     char addr[LGTD_LIFX_ADDR_STRLEN];
     lgtd_debug(
         "AMBIENT_LIGHT <-- %s - %s ambient_light=%flx",
diff --git a/lifx/gateway.h b/lifx/gateway.h
--- a/lifx/gateway.h
+++ b/lifx/gateway.h
@@ -75,7 +75,7 @@
     int                             pkt_ring_head;
     int                             pkt_ring_tail;
     bool                            pkt_ring_full;
-    struct event                    *write_ev;
+    struct event                    *socket_ev;
     struct evbuffer                 *write_buf;
     bool                            pending_refresh_req;
     struct lgtd_timer               *refresh_timer;
@@ -126,6 +126,14 @@
 int lgtd_lifx_gateway_allocate_tag_id(struct lgtd_lifx_gateway *, int, const char *);
 void lgtd_lifx_gateway_deallocate_tag_id(struct lgtd_lifx_gateway *, int);
 
+void lgtd_lifx_gateway_handle_packet(struct lgtd_lifx_gateway *,
+                                     const struct sockaddr *,
+                                     ev_socklen_t,
+                                     const struct lgtd_lifx_packet_info *,
+                                     const struct lgtd_lifx_packet_header *,
+                                     const void *,
+                                     lgtd_time_mono_t);
+
 void lgtd_lifx_gateway_handle_pan_gateway(struct lgtd_lifx_gateway *,
                                           const struct lgtd_lifx_packet_header *,
                                           const struct lgtd_lifx_packet_pan_gateway *);
diff --git a/lifx/wire_proto.c b/lifx/wire_proto.c
--- a/lifx/wire_proto.c
+++ b/lifx/wire_proto.c
@@ -21,6 +21,7 @@
 #include <assert.h>
 #include <endian.h>
 #include <err.h>
+#include <errno.h>
 #include <stdarg.h>
 #include <stdbool.h>
 #include <stdint.h>
@@ -78,7 +79,7 @@
     (void)pkt;
 }
 
-static void
+void
 lgtd_lifx_wire_enosys_packet_handler(struct lgtd_lifx_gateway *gw,
                                      const struct lgtd_lifx_packet_header *hdr,
                                      const void *pkt)
@@ -504,6 +505,93 @@
     return LGTD_LIFX_WAVEFORM_INVALID;
 }
 
+bool
+lgtd_lifx_wire_handle_receive(evutil_socket_t socket,
+                              struct lgtd_lifx_gateway *gw)
+{
+    assert(socket != -1);
+
+    while (true) {
+        struct sockaddr_storage peer;
+        // if we get back from recvfrom with a sockaddr_in the end of the struct
+        // will not be initialized and we will be comparing unintialized stuff
+        // in lgtd_lifx_gateway_get:
+        memset(&peer, 0, sizeof(peer));
+        ev_socklen_t addrlen = sizeof(peer);
+        union {
+            char buf[LGTD_LIFX_MAX_PACKET_SIZE];
+            struct lgtd_lifx_packet_header hdr;
+        } read;
+        int nbytes = recvfrom(
+            socket,
+            read.buf,
+            sizeof(read.buf),
+            0,
+            (struct sockaddr *)&peer,
+            &addrlen
+        );
+        if (nbytes == -1) {
+            int error = EVUTIL_SOCKET_ERROR();
+            if (error == EINTR) {
+                continue;
+            }
+            if (error == EAGAIN) {
+                return true;
+            }
+            lgtd_warn("can't receive LIFX packet");
+            return false;
+        }
+
+        lgtd_time_mono_t received_at = lgtd_time_monotonic_msecs();
+        char peer_addr[INET6_ADDRSTRLEN];
+        LGTD_SOCKADDRTOA((const struct sockaddr *)&peer, peer_addr);
+
+        if (nbytes < LGTD_LIFX_PACKET_HEADER_SIZE) {
+            lgtd_warnx("broadcast packet too short from %s", peer_addr);
+            return false;
+        }
+
+        lgtd_lifx_wire_decode_header(&read.hdr);
+        if (read.hdr.size != nbytes) {
+            lgtd_warnx("incomplete broadcast packet from %s", peer_addr);
+            return false;
+        }
+        int proto_version = read.hdr.protocol & LGTD_LIFX_PROTOCOL_VERSION_MASK;
+        if (proto_version != LGTD_LIFX_PROTOCOL_V1) {
+            lgtd_warnx(
+                "unsupported protocol %d from %s",
+                read.hdr.protocol & LGTD_LIFX_PROTOCOL_VERSION_MASK, peer_addr
+            );
+        }
+        if (read.hdr.packet_type == LGTD_LIFX_GET_PAN_GATEWAY) {
+            continue;
+        }
+
+        const struct lgtd_lifx_packet_info *pkt_info =
+            lgtd_lifx_wire_get_packet_info(read.hdr.packet_type);
+        if (!pkt_info) {
+            lgtd_warnx(
+                "received unknown packet %#x from %s",
+                read.hdr.packet_type, peer_addr
+            );
+            continue;
+        }
+        if (!(read.hdr.protocol & LGTD_LIFX_PROTOCOL_ADDRESSABLE)) {
+            lgtd_warnx(
+                "received non-addressable packet %s from %s",
+                pkt_info->name, peer_addr
+            );
+            continue;
+        }
+        void *pkt = &read.buf[LGTD_LIFX_PACKET_HEADER_SIZE];
+        pkt_info->decode(pkt);
+        struct sockaddr *addr = (struct sockaddr *)&peer;
+        lgtd_lifx_gateway_handle_packet(
+            gw, addr, addrlen, pkt_info, &read.hdr, pkt, received_at
+        );
+    }
+}
+
 static void
 lgtd_lifx_wire_encode_header(struct lgtd_lifx_packet_header *hdr, int flags)
 {
@@ -575,7 +663,7 @@
         assert(target_type == LGTD_LIFX_TARGET_ALL_DEVICES);
     }
 
-    int flags = LGTD_LIFX_ADDRESSABLE;
+    int flags = LGTD_LIFX_ADDRESSABLE|LGTD_LIFX_RES_REQUIRED;
     switch (target_type) {
     case LGTD_LIFX_TARGET_SITE:
     case LGTD_LIFX_TARGET_ALL_DEVICES:
diff --git a/lifx/wire_proto.h b/lifx/wire_proto.h
--- a/lifx/wire_proto.h
+++ b/lifx/wire_proto.h
@@ -88,7 +88,12 @@
     //! - res required: true when a response is required (the response type
     //!   depends on the request type).
     uint8_t         flags;
-    //! Wrap-around sequence number, LIFX internal use.
+    //! The sequence number allows the client to provide a unique value, which
+    //! will be included by the LIFX device in any message that is sent in
+    //! response to a message sent by the client. This allows the client to
+    //! distinguish between different messages sent with the same source
+    //! identifier in the Frame. See _ack_required_ and _res_required_ fields in
+    //! the Frame Address.
     uint8_t         seqn;
     //! Apparently this is a unix epoch timestamp in milliseconds at which the
     //! payload should be run.
@@ -115,8 +120,8 @@
 };
 
 enum lgtd_lifx_flags {
+    LGTD_LIFX_FLAG_RES_REQUIRED = 1,
     LGTD_LIFX_FLAG_ACK_REQUIRED = 1 << 1,
-    LGTD_LIFX_FLAG_RES_REQUIRED = 1
 };
 
 // Let's define a maximum packet size just in case somebody sends us weird
@@ -400,13 +405,20 @@
 
 void lgtd_lifx_wire_setup(void);
 
+bool lgtd_lifx_wire_handle_receive(evutil_socket_t, struct lgtd_lifx_gateway *);
+
 const struct lgtd_lifx_packet_info *lgtd_lifx_wire_setup_header(struct lgtd_lifx_packet_header *,
-                                                                 enum lgtd_lifx_target_type,
-                                                                 union lgtd_lifx_target,
-                                                                 const uint8_t *,
-                                                                 enum lgtd_lifx_packet_type);
+                                                                enum lgtd_lifx_target_type,
+                                                                union lgtd_lifx_target,
+                                                                const uint8_t *,
+                                                                enum lgtd_lifx_packet_type);
 void lgtd_lifx_wire_decode_header(struct lgtd_lifx_packet_header *);
 
+
+void lgtd_lifx_wire_enosys_packet_handler(struct lgtd_lifx_gateway *,
+                                          const struct lgtd_lifx_packet_header *,
+                                          const void *);
+
 void lgtd_lifx_wire_decode_pan_gateway(struct lgtd_lifx_packet_pan_gateway *);
 void lgtd_lifx_wire_encode_pan_gateway(struct lgtd_lifx_packet_pan_gateway *);
 void lgtd_lifx_wire_decode_light_status(struct lgtd_lifx_packet_light_status *);
diff --git a/tests/core/router/test_router_send_to_broadcast.c b/tests/core/router/test_router_send_to_broadcast.c
--- a/tests/core/router/test_router_send_to_broadcast.c
+++ b/tests/core/router/test_router_send_to_broadcast.c
@@ -36,7 +36,8 @@
         }
         const struct lgtd_lifx_packet_header *hdr;
         hdr = lgtd_tests_gw_pkt_queue[i].hdr;
-        int expected_flags = LGTD_LIFX_ADDRESSABLE|LGTD_LIFX_TAGGED;
+        int expected_flags =
+            LGTD_LIFX_ADDRESSABLE|LGTD_LIFX_TAGGED|LGTD_LIFX_RES_REQUIRED;
         if (!lgtd_tests_lifx_header_has_flags(hdr, expected_flags)) {
             lgtd_errx(1, "packet header doesn't have the right bits set");
         }
diff --git a/tests/core/router/test_router_send_to_device.c b/tests/core/router/test_router_send_to_device.c
--- a/tests/core/router/test_router_send_to_device.c
+++ b/tests/core/router/test_router_send_to_device.c
@@ -36,7 +36,8 @@
         lgtd_errx(1, "the packet has been sent to the wrong gateway");
     }
 
-    if (!lgtd_tests_lifx_header_has_flags(hdr_queued, LGTD_LIFX_ADDRESSABLE)) {
+    int expected_flags = LGTD_LIFX_ADDRESSABLE|LGTD_LIFX_RES_REQUIRED;
+    if (!lgtd_tests_lifx_header_has_flags(hdr_queued, expected_flags)) {
         lgtd_errx(1, "the packet header doesn't have the right protocol flags");
     }
 
diff --git a/tests/core/router/test_router_send_to_label.c b/tests/core/router/test_router_send_to_label.c
--- a/tests/core/router/test_router_send_to_label.c
+++ b/tests/core/router/test_router_send_to_label.c
@@ -39,7 +39,9 @@
         const void *pkt_queued = lgtd_tests_gw_pkt_queue[0].pkt;
         int pkt_size = lgtd_tests_gw_pkt_queue[0].pkt_size;
 
-        if (!lgtd_tests_lifx_header_has_flags(hdr_queued, LGTD_LIFX_ADDRESSABLE)) {
+
+    int expected_flags = LGTD_LIFX_ADDRESSABLE|LGTD_LIFX_RES_REQUIRED;
+        if (!lgtd_tests_lifx_header_has_flags(hdr_queued, expected_flags)) {
             lgtd_errx(1, "the packet header doesn't have the right protocol flags");
         }
         if (pkt_queued != &payload) {
diff --git a/tests/core/router/test_router_send_to_tag.c b/tests/core/router/test_router_send_to_tag.c
--- a/tests/core/router/test_router_send_to_tag.c
+++ b/tests/core/router/test_router_send_to_tag.c
@@ -39,7 +39,8 @@
         lgtd_errx(1, "the packet has been sent to the wrong gateway");
     }
 
-    int expected_flags = LGTD_LIFX_ADDRESSABLE|LGTD_LIFX_TAGGED;
+    int expected_flags =
+        LGTD_LIFX_ADDRESSABLE|LGTD_LIFX_TAGGED|LGTD_LIFX_RES_REQUIRED;
     if (!lgtd_tests_lifx_header_has_flags(hdr_queued, expected_flags)) {
         lgtd_errx(1, "the packet header doesn't have the right protocol flags");
     }
diff --git a/tests/core/tests_utils.h b/tests/core/tests_utils.h
--- a/tests/core/tests_utils.h
+++ b/tests/core/tests_utils.h
@@ -23,7 +23,7 @@
         expected_flags |= LGTD_LIFX_FLAG_ACK_REQUIRED;
     }
     if (flags & LGTD_LIFX_RES_REQUIRED) {
-        expected_flags |= LGTD_LIFX_FLAG_ACK_REQUIRED;
+        expected_flags |= LGTD_LIFX_FLAG_RES_REQUIRED;
     }
     if (hdr->flags != expected_flags) {
         return false;
diff --git a/tests/lifx/gateway/test_gateway_enqueue_packet.c b/tests/lifx/gateway/test_gateway_enqueue_packet.c
--- a/tests/lifx/gateway/test_gateway_enqueue_packet.c
+++ b/tests/lifx/gateway/test_gateway_enqueue_packet.c
@@ -12,7 +12,7 @@
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
-    gw.write_ev = (void *)42;
+    gw.socket_ev = (void *)42;
 
     struct lgtd_lifx_packet_power_state pkt;
     pkt.power = LGTD_LIFX_POWER_ON;
@@ -58,8 +58,8 @@
         errx(1, "packet ring shouldn't be full");
     }
 
-    if (last_event_passed_to_event_add != gw.write_ev) {
-        errx(1, "event_add should have been called with gw.write_ev");
+    if (last_event_passed_to_event_add != gw.socket_ev) {
+        errx(1, "event_add should have been called with gw.socket_ev");
     }
 
     return 0;
diff --git a/tests/lifx/gateway/test_gateway_enqueue_packet_ring_full.c b/tests/lifx/gateway/test_gateway_enqueue_packet_ring_full.c
--- a/tests/lifx/gateway/test_gateway_enqueue_packet_ring_full.c
+++ b/tests/lifx/gateway/test_gateway_enqueue_packet_ring_full.c
@@ -12,7 +12,7 @@
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
-    gw.write_ev = (void *)42;
+    gw.socket_ev = (void *)42;
 
     struct lgtd_lifx_packet_power_state pkt;
     pkt.power = LGTD_LIFX_POWER_ON;
@@ -62,8 +62,8 @@
         errx(1, "packet ring should be full");
     }
 
-    if (last_event_passed_to_event_add != gw.write_ev) {
-        errx(1, "event_add should have been called with gw.write_ev");
+    if (last_event_passed_to_event_add != gw.socket_ev) {
+        errx(1, "event_add should have been called with gw.socket_ev");
     }
 
     lgtd_lifx_gateway_enqueue_packet(&gw, &hdr, pkt_info, &pkt);
diff --git a/tests/lifx/gateway/test_gateway_enqueue_packet_ring_wraparound.c b/tests/lifx/gateway/test_gateway_enqueue_packet_ring_wraparound.c
--- a/tests/lifx/gateway/test_gateway_enqueue_packet_ring_wraparound.c
+++ b/tests/lifx/gateway/test_gateway_enqueue_packet_ring_wraparound.c
@@ -12,7 +12,7 @@
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
-    gw.write_ev = (void *)42;
+    gw.socket_ev = (void *)42;
 
     struct lgtd_lifx_packet_power_state pkt;
     pkt.power = LGTD_LIFX_POWER_ON;
@@ -64,8 +64,8 @@
         errx(1, "packet ring shouldn't be full");
     }
 
-    if (last_event_passed_to_event_add != gw.write_ev) {
-        errx(1, "event_add should have been called with gw.write_ev");
+    if (last_event_passed_to_event_add != gw.socket_ev) {
+        errx(1, "event_add should have been called with gw.socket_ev");
     }
 
     return 0;
diff --git a/tests/lifx/gateway/test_gateway_write_callback.c b/tests/lifx/gateway/test_gateway_write_callback.c
--- a/tests/lifx/gateway/test_gateway_write_callback.c
+++ b/tests/lifx/gateway/test_gateway_write_callback.c
@@ -53,7 +53,7 @@
 
     // fake some values:
     gw.socket = 25;
-    gw.write_ev = (void *)21;
+    gw.socket_ev = (void *)21;
     gw.write_buf = (void *)42;
 
     gw.pkt_ring[0].size += sizeof(struct lgtd_lifx_packet_header);
@@ -62,7 +62,7 @@
     gw.pkt_ring_head++;
     gw.pkt_ring_head++;
 
-    lgtd_lifx_gateway_write_callback(-1, EV_WRITE, &gw);
+    lgtd_lifx_gateway_socket_event_callback(-1, EV_WRITE, &gw);
 
     if (gw.pkt_ring[0].size != 0 || gw.pkt_ring[0].type != 0) {
         errx(1, "the ring entry should have been reset");
diff --git a/tests/lifx/gateway/test_gateway_write_callback_clears_ring_full_flag.c b/tests/lifx/gateway/test_gateway_write_callback_clears_ring_full_flag.c
--- a/tests/lifx/gateway/test_gateway_write_callback_clears_ring_full_flag.c
+++ b/tests/lifx/gateway/test_gateway_write_callback_clears_ring_full_flag.c
@@ -53,7 +53,7 @@
 
     // fake some values:
     gw.socket = 25;
-    gw.write_ev = (void *)21;
+    gw.socket_ev = (void *)21;
     gw.write_buf = (void *)42;
 
     gw.pkt_ring[0].size += sizeof(struct lgtd_lifx_packet_header);
@@ -61,7 +61,7 @@
     gw.pkt_ring[0].type = LGTD_LIFX_SET_POWER_STATE;
     gw.pkt_ring_full = true;
 
-    lgtd_lifx_gateway_write_callback(-1, EV_WRITE, &gw);
+    lgtd_lifx_gateway_socket_event_callback(-1, EV_WRITE, &gw);
 
     if (gw.pkt_ring[0].size != 0 || gw.pkt_ring[0].type != 0) {
         errx(1, "the ring entry should have been reset");
diff --git a/tests/lifx/gateway/test_gateway_write_callback_last_packet_on_ring.c b/tests/lifx/gateway/test_gateway_write_callback_last_packet_on_ring.c
--- a/tests/lifx/gateway/test_gateway_write_callback_last_packet_on_ring.c
+++ b/tests/lifx/gateway/test_gateway_write_callback_last_packet_on_ring.c
@@ -52,7 +52,7 @@
 
     // fake some values:
     gw.socket = 25;
-    gw.write_ev = (void *)21;
+    gw.socket_ev = (void *)21;
     gw.write_buf = (void *)42;
 
     gw.pkt_ring[0].size += sizeof(struct lgtd_lifx_packet_header);
@@ -61,7 +61,7 @@
     gw.pkt_ring_head++;
     gw.pkt_ring_head++;
 
-    lgtd_lifx_gateway_write_callback(-1, EV_WRITE, &gw);
+    lgtd_lifx_gateway_socket_event_callback(-1, EV_WRITE, &gw);
 
     if (gw.pkt_ring[0].size != 0 || gw.pkt_ring[0].type != 0) {
         errx(1, "the ring entry should have been reset");
diff --git a/tests/lifx/gateway/test_gateway_write_callback_partial_write.c b/tests/lifx/gateway/test_gateway_write_callback_partial_write.c
--- a/tests/lifx/gateway/test_gateway_write_callback_partial_write.c
+++ b/tests/lifx/gateway/test_gateway_write_callback_partial_write.c
@@ -68,7 +68,7 @@
     gw.pkt_ring_head++;
     gw.pkt_ring_head++;
 
-    lgtd_lifx_gateway_write_callback(-1, EV_WRITE, &gw);
+    lgtd_lifx_gateway_socket_event_callback(-1, EV_WRITE, &gw);
 
     if (gw.pkt_ring[0].type != LGTD_LIFX_SET_POWER_STATE) {
         errx(1, "the ring entry doesn't have the right packet type");
@@ -86,7 +86,7 @@
         errx(1, "event_del shouldn't have ben called");
     }
 
-    lgtd_lifx_gateway_write_callback(-1, EV_WRITE, &gw);
+    lgtd_lifx_gateway_socket_event_callback(-1, EV_WRITE, &gw);
 
     if (gw.pkt_ring[0].size != 0 || gw.pkt_ring[0].type != 0) {
         errx(1, "the ring entry should have been reset");
diff --git a/tests/lifx/gateway/test_gateway_write_callback_ring_wraparound.c b/tests/lifx/gateway/test_gateway_write_callback_ring_wraparound.c
--- a/tests/lifx/gateway/test_gateway_write_callback_ring_wraparound.c
+++ b/tests/lifx/gateway/test_gateway_write_callback_ring_wraparound.c
@@ -53,7 +53,7 @@
 
     // fake some values:
     gw.socket = 25;
-    gw.write_ev = (void *)21;
+    gw.socket_ev = (void *)21;
     gw.write_buf = (void *)42;
 
     int pkt_ring_last_idx = LGTD_ARRAY_SIZE(gw.pkt_ring) - 1;
@@ -63,7 +63,7 @@
     gw.pkt_ring[pkt_ring_last_idx].size += sizeof(struct lgtd_lifx_packet_power_state);
     gw.pkt_ring[pkt_ring_last_idx].type = LGTD_LIFX_SET_POWER_STATE;
 
-    lgtd_lifx_gateway_write_callback(-1, EV_WRITE, &gw);
+    lgtd_lifx_gateway_socket_event_callback(-1, EV_WRITE, &gw);
 
     if (gw.pkt_ring[pkt_ring_last_idx].size != 0
         || gw.pkt_ring[pkt_ring_last_idx].type != 0) {
diff --git a/tests/lifx/mock_gateway.h b/tests/lifx/mock_gateway.h
--- a/tests/lifx/mock_gateway.h
+++ b/tests/lifx/mock_gateway.h
@@ -18,6 +18,26 @@
 }
 #endif
 
+#ifndef MOCKED_LGTD_LIFX_GATEWAY_HANDLE_PACKET
+void
+lgtd_lifx_gateway_handle_packet(struct lgtd_lifx_gateway *gw,
+                                const struct sockaddr *peer,
+                                ev_socklen_t addrlen,
+                                const struct lgtd_lifx_packet_info *pkt_info,
+                                const struct lgtd_lifx_packet_header *hdr,
+                                const void *pkt,
+                                lgtd_time_mono_t received_at)
+{
+    (void)gw;
+    (void)peer;
+    (void)addrlen;
+    (void)pkt_info;
+    (void)hdr;
+    (void)pkt;
+    (void)received_at;
+}
+#endif
+
 #ifndef MOCKED_LIFX_GATEWAY_SEND_TO_SITE
 bool
 lgtd_lifx_gateway_send_to_site(struct lgtd_lifx_gateway *gw,
diff --git a/tests/lifx/mock_wire_proto.h b/tests/lifx/mock_wire_proto.h
--- a/tests/lifx/mock_wire_proto.h
+++ b/tests/lifx/mock_wire_proto.h
@@ -19,6 +19,18 @@
 }
 #endif
 
+#ifndef MOCKED_LGTD_LIFX_WIRE_ENOSYS_PACKET_HANDLER
+void
+lgtd_lifx_wire_enosys_packet_handler(struct lgtd_lifx_gateway *gw,
+                                     const struct lgtd_lifx_packet_header *hdr,
+                                     const void *pkt)
+{
+    (void)gw;
+    (void)hdr;
+    (void)pkt;
+}
+#endif
+
 #ifndef MOCKED_LGTD_LIFX_WIRE_NULL_PACKET_ENCODER_DECODER
 static void
 lgtd_lifx_wire_null_packet_encoder_decoder(void *pkt)
@@ -345,6 +357,17 @@
 }
 #endif
 
+#ifndef MOCKED_LGTD_LIFX_WIRE_HANDLE_RECEIVE
+bool
+lgtd_lifx_wire_handle_receive(evutil_socket_t socket,
+                              struct lgtd_lifx_gateway *gw)
+{
+    (void)socket;
+    (void)gw;
+    return false;
+}
+#endif
+
 #ifndef MOCKED_LGTD_LIFX_WIRE_SETUP_HEADER
 const struct lgtd_lifx_packet_info *
 lgtd_lifx_wire_setup_header(struct lgtd_lifx_packet_header *hdr,
diff --git a/tests/lifx/wire_proto/test_wire_proto_float_endian_conversion.c b/tests/lifx/wire_proto/test_wire_proto_float_endian_conversion.c
--- a/tests/lifx/wire_proto/test_wire_proto_float_endian_conversion.c
+++ b/tests/lifx/wire_proto/test_wire_proto_float_endian_conversion.c
@@ -1,7 +1,9 @@
 #include <sys/tree.h>
+#include <endian.h>
+#include <stdbool.h>
+#include <stdint.h>
 
-#include <endian.h>
-#include <stdint.h>
+#include <event2/util.h>
 
 #include "lifx/wire_proto.h"
 
