# HG changeset patch
# Parent  369627b764f27e464836f9a486222fb3f01d9ee4
Fix command pipe support & cleanup of pipes/sockets

lightsc.sh is now configured at build time, packages will work out of
the box.

Most importantly the user/group of the parent directory of any socket or
command pipe is now properly set when the -u option is used. This means
that command pipes work again and that both pipes and sockets can be
properly cleaned-up at exit.

diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,7 +5,7 @@
 
 SET(CPACK_PACKAGE_VERSION_MAJOR "0")
 SET(CPACK_PACKAGE_VERSION_MINOR "9")
-SET(CPACK_PACKAGE_VERSION_PATCH "2")
+SET(CPACK_PACKAGE_VERSION_PATCH "3")
 SET(LIGHTSD_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
 
 MESSAGE(STATUS "CMake version: ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}")
@@ -74,6 +74,10 @@
     ENDIF ()
 ENDIF ()
 
+IF (NOT LGTD_RUNTIME_DIRECTORY)
+    SET(LGTD_RUNTIME_DIRECTORY "${LIGHTSD_BINARY_DIR}")
+ENDIF ()
+
 INCLUDE_DIRECTORIES(
     ${LIGHTSD_BINARY_DIR}/compat
     ${LIGHTSD_BINARY_DIR}/compat/generic
@@ -94,5 +98,11 @@
     USE_SOURCE_PERMISSIONS
     REGEX ".*\\.sw.$" EXCLUDE
 )
-INSTALL(FILES share/lightsc.sh DESTINATION share/lightsd)
+CONFIGURE_FILE(
+    share/lightsc.sh.in "${LIGHTSD_BINARY_DIR}/share/lightsc.sh" @ONLY
+)
+INSTALL(
+    FILES "${LIGHTSD_BINARY_DIR}/share/lightsc.sh"
+    DESTINATION share/lightsd
+)
 INSTALL(FILES dist/lightsd.service DESTINATION lib/systemd/system)
diff --git a/core/CMakeLists.txt b/core/CMakeLists.txt
--- a/core/CMakeLists.txt
+++ b/core/CMakeLists.txt
@@ -8,10 +8,7 @@
     ${CMAKE_CURRENT_BINARY_DIR}
 )
 
-IF (NOT LGTD_RUNTIME_DIRECTORY)
-    SET(LGTD_RUNTIME_DIRECTORY "${LIGHTSD_BINARY_DIR}")
-ENDIF ()
-CONFIGURE_FILE(version.h.in ${CMAKE_CURRENT_BINARY_DIR}/version.h)
+CONFIGURE_FILE(version.h.in "${CMAKE_CURRENT_BINARY_DIR}/version.h")
 
 ADD_EXECUTABLE(
     lightsd
diff --git a/core/daemon.c b/core/daemon.c
--- a/core/daemon.c
+++ b/core/daemon.c
@@ -52,6 +52,8 @@
 #include "lightsd.h"
 
 static bool lgtd_daemon_proctitle_initialized = false;
+static struct passwd *lgtd_user_info = NULL;
+static struct group *lgtd_group_info = NULL;
 
 bool
 lgtd_daemon_unleash(void)
@@ -207,34 +209,75 @@
 }
 
 void
-lgtd_daemon_drop_privileges(const char *user, const char *group)
+lgtd_daemon_set_user(const char *user)
 {
     assert(user);
 
-    uid_t uid;
-    gid_t gid;
+    static struct passwd user_info_storage;
 
     struct passwd *user_info = getpwnam(user);
     if (!user_info) {
         lgtd_err(1, "can't get user info for %s", user);
     }
-    uid = user_info->pw_uid;
+
+    lgtd_user_info = memcpy(&user_info_storage, user_info, sizeof(*user_info));
+}
+
+void
+lgtd_daemon_set_group(const char *group)
+{
+    assert(lgtd_user_info);
+
+    static struct group group_info_storage;
 
     struct group *group_info;
     if (group) {
         group_info = getgrnam(group);
     } else {
-        group_info = getgrgid(user_info->pw_gid);
+        group_info = getgrgid(lgtd_user_info->pw_gid);
         group = group_info->gr_name;
     }
     if (!group_info) {
-        lgtd_err(1, "can't get group info for %s", group ? group : user);
+        lgtd_err(
+            1, "can't get group info for %s",
+            group ? group : lgtd_user_info->pw_name
+        );
     }
-    gid = group_info->gr_gid;
+
+    lgtd_group_info = memcpy(
+        &group_info_storage, group_info, sizeof(*group_info)
+    );
+}
+
+static int
+lgtd_daemon_chown_dir_of(const char *filepath, uid_t uid, gid_t gid)
+{
+    char *fp = strdup(filepath);
+    if (!fp)  {
+        return -1;
+    }
+
+    char *dir = dirname(fp);
+    int rv = chown(dir, uid, gid);
+    free(fp);
+    return rv;
+}
+
+void
+lgtd_daemon_drop_privileges(void)
+{
+    assert(lgtd_user_info);
+    assert(lgtd_group_info);
+
+    uid_t uid = lgtd_user_info->pw_uid;
+    const char *user = lgtd_user_info->pw_name;
+    gid_t gid = lgtd_group_info->gr_gid;
+    const char *group = lgtd_group_info->gr_name;
 
     struct lgtd_command_pipe *pipe;
     SLIST_FOREACH(pipe, &lgtd_command_pipes, link) {
-        if (fchown(pipe->fd, uid, gid) == -1) {
+        if (lgtd_daemon_chown_dir_of(pipe->path, uid, gid) == -1
+            || fchown(pipe->fd, uid, gid) == -1) {
             lgtd_err(1, "can't chown %s to %s:%s", pipe->path, user, group);
         }
     }
@@ -246,12 +289,9 @@
         }
 
         const char *path = ((struct sockaddr_un *)listener->sockaddr)->sun_path;
-        if (chown(path, uid, gid) == -1) {
-            char addr[LGTD_SOCKADDR_STRLEN];
-            lgtd_err(
-                1, "can't chown %s to %s:%s",
-                LGTD_SOCKADDRTOA(listener->sockaddr, addr), user, group
-            );
+        if (lgtd_daemon_chown_dir_of(path, uid, gid) == -1
+            || chown(path, uid, gid) == -1) {
+            lgtd_err(1, "can't chown %s to %s:%s", path, user, group);
         }
     }
 
diff --git a/core/daemon.h b/core/daemon.h
--- a/core/daemon.h
+++ b/core/daemon.h
@@ -23,5 +23,7 @@
 void lgtd_daemon_setup_proctitle(int, char *[], char *[]);
 void lgtd_daemon_update_proctitle(void);
 void lgtd_daemon_die_if_running_as_root_unless_requested(const char *);
-void lgtd_daemon_drop_privileges(const char *, const char *);
+void lgtd_daemon_set_user(const char *);
+void lgtd_daemon_set_group(const char *);
+void lgtd_daemon_drop_privileges(void);
 bool lgtd_daemon_makedirs(const char *);
diff --git a/core/lightsd.c b/core/lightsd.c
--- a/core/lightsd.c
+++ b/core/lightsd.c
@@ -55,7 +55,11 @@
 struct lgtd_opts lgtd_opts = {
     .foreground = true,
     .log_timestamps = true,
+#ifndef NDEBUG
     .verbosity = LGTD_INFO,
+#else
+    .verbosity = LGTD_WARN,
+#endif
     .user = NULL,
     .group = NULL
 }; 
@@ -136,8 +140,9 @@
 "  [-f,--foreground]                    Stay in the foreground (default).\n"
 "  [-d,--daemonize]                     Fork in the background.\n"
 "  [-u,--user user]                     Drop privileges to this user (and the \n"
-"                                       group of this user if -g is missing)\n"
-"  [-g,--group group]                   Drop privileges to this group\n"
+"                                       group of this user if -g is missing).\n"
+"  [-g,--group group]                   Drop privileges to this group (-g requires\n"
+"                                       the -u option to be used).\n"
 "  [-t,--no-timestamps]                 Disable timestamps in logs.\n"
 "  [-h,--help]                          Display this.\n"
 "  [-V,--version]                       Display version and build information.\n"
@@ -264,7 +269,11 @@
     argv += optind;
 
     if (lgtd_opts.user) {
-        lgtd_daemon_drop_privileges(lgtd_opts.user, lgtd_opts.group);
+        lgtd_daemon_set_user(lgtd_opts.user);
+        lgtd_daemon_set_group(lgtd_opts.group);
+        lgtd_daemon_drop_privileges();
+    } else if (lgtd_opts.group) {
+        lgtd_errx(1, "please, specify an user with the -u option");
     }
 
     lgtd_daemon_die_if_running_as_root_unless_requested(lgtd_opts.user);
diff --git a/share/lightsc.sh b/share/lightsc.sh.in
rename from share/lightsc.sh
rename to share/lightsc.sh.in
--- a/share/lightsc.sh
+++ b/share/lightsc.sh.in
@@ -80,7 +80,7 @@
 }
 
 _lightsc_get_pipe() {
-    local pipe=${COMMAND_PIPE:-/run/lightsd/pipe}
+    local pipe=${LIGHTSD_COMMAND_PIPE:-@LGTD_RUNTIME_DIRECTORY@/pipe}
     if [ ! -p $pipe ] ; then
         echo >&2 "$pipe cannot be found, is lightsd running?"
         exit 1
