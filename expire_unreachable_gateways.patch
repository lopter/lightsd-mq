# HG changeset patch
# Parent f9e928500d879573d2b4e350887528010e129e8d
Expire unresponsive bulbs.

diff --git a/.ycm_extra_conf.py b/.ycm_extra_conf.py
--- a/.ycm_extra_conf.py
+++ b/.ycm_extra_conf.py
@@ -1,34 +1,24 @@
-# This file is NOT licensed under the GPLv3, which is the license for the rest
-# of YouCompleteMe.
+#!/usr/bin/env python
 #
-# Here's the license text for this file:
+# Copyright (C) 2014  Google Inc.
 #
-# This is free and unencumbered software released into the public domain.
+# This file is part of YouCompleteMe.
 #
-# Anyone is free to copy, modify, publish, use, compile, sell, or
-# distribute this software, either in source code form or as a compiled
-# binary, for any purpose, commercial or non-commercial, and by any
-# means.
+# YouCompleteMe is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
 #
-# In jurisdictions that recognize copyright laws, the author or authors
-# of this software dedicate any and all copyright interest in the
-# software to the public domain. We make this dedication for the benefit
-# of the public at large and to the detriment of our heirs and
-# successors. We intend this dedication to be an overt act of
-# relinquishment in perpetuity of all present and future rights to this
-# software under copyright law.
+# YouCompleteMe is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
 #
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
-# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
-# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
-# OTHER DEALINGS IN THE SOFTWARE.
-#
-# For more information, please refer to <http://unlicense.org/>
+# You should have received a copy of the GNU General Public License
+# along with YouCompleteMe.  If not, see <http://www.gnu.org/licenses/>.
 
 import os
+import subprocess
 import ycm_core
 
 # These are the compilation flags that will be used in case there's no
@@ -39,22 +29,47 @@
     '-Wextra',
     '-Werror',
     '-Wstrict-prototypes',
-    '-std=c99',
+    '-DNDEBUG',
     '-D_POSIX_C_SOURCE=200809L',
     '-D_BSD_SOURCE=1',
+    '-std=c99',
     '-I./compat/generic',
     '-I./core',
     '-I{}'.format(os.path.join(os.getenv("MY_BUILD", "./build"), "core")),
     '-I{}'.format(os.path.join(os.getenv("MY_BUILD", "./build"), "compat")),
+    # ...and the same thing goes for the magic -x option which specifies the
+    # language that the files to be compiled are written in. This is mostly
+    # relevant for c++ headers.
+    # For a C project, you would set this to 'c' instead of 'c++'.
+    '-x',
+    'c',
+    '-isystem',
+    '/usr/include',
+    '-isystem',
+    '/usr/local/include',
+    '-isystem',
+    '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1',
+    '-isystem',
+    '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include',
 ]
 
+try:
+    mac_osx_version = ".".join(subprocess.Popen(
+        ["sw_vers", "-productVersion"], stdout=subprocess.PIPE
+    ).stdout.read().split(".")[:2])
+    flags.extend([
+        '-isystem',
+        '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX{}.sdk/usr/'.format(mac_osx_version)
+    ])
+except OSError:
+    pass
 
 # Set this to the absolute path to the folder (NOT the file!) containing the
 # compile_commands.json file to use that instead of 'flags'. See here for
 # more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
 #
 # Most projects will NOT need to set this to anything; you can just change the
-# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
+# 'flags' list of compilation flags.
 compilation_database_folder = ''
 
 if os.path.exists( compilation_database_folder ):
@@ -120,6 +135,8 @@
   return database.GetCompilationInfoForFile( filename )
 
 
+# This is the entry point; this function is called by ycmd to produce flags for
+# a file.
 def FlagsForFile( filename, **kwargs ):
   if database:
     # Bear in mind that compilation_info.compiler_flags_ does NOT return a
@@ -131,14 +148,6 @@
     final_flags = MakeRelativePathsInFlagsAbsolute(
       compilation_info.compiler_flags_,
       compilation_info.compiler_working_dir_ )
-
-    # NOTE: This is just for YouCompleteMe; it's highly likely that your project
-    # does NOT need to remove the stdlib flag. DO NOT USE THIS IN YOUR
-    # ycm_extra_conf IF YOU'RE NOT 100% SURE YOU NEED IT.
-    try:
-      final_flags.remove( '-stdlib=libc++' )
-    except ValueError:
-      pass
   else:
     relative_to = DirectoryOfThisScript()
     final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )
@@ -147,3 +156,4 @@
     'flags': final_flags,
     'do_cache': True
   }
+
diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,6 +20,8 @@
 FIND_PACKAGE(Event2 REQUIRED COMPONENTS core)
 FIND_PACKAGE(Endian REQUIRED)
 
+INCLUDE(CompatTimeMonotonic)
+
 SET(CMAKE_C_FLAGS "-pipe -Wextra -Wall -Wstrict-prototypes -std=c99")
 
 ADD_DEFINITIONS("-D_POSIX_C_SOURCE=200809L" "-D_BSD_SOURCE=1")
@@ -28,11 +30,6 @@
     ADD_DEFINITIONS("-DQUEUE_MACRO_DEBUG=1")
 ENDIF ()
 
-INCLUDE_DIRECTORIES(
-    ${LIFXD_SOURCE_DIR}/compat/generic
-    ${LIFXD_BINARY_DIR}/compat
-    ${LIFXD_SOURCE_DIR}/core
-    ${LIFXD_BINARY_DIR}/core
-)
+INCLUDE_DIRECTORIES(${LIFXD_SOURCE_DIR}/compat/generic ${LIFXD_BINARY_DIR}/compat)
 
 ADD_SUBDIRECTORY(core)
diff --git a/CMakeScripts/CompatTimeMonotonic.cmake b/CMakeScripts/CompatTimeMonotonic.cmake
new file mode 100644
--- /dev/null
+++ b/CMakeScripts/CompatTimeMonotonic.cmake
@@ -0,0 +1,31 @@
+INCLUDE(CheckFunctionExists)
+
+IF (NOT TIME_MONOTONIC_IMPL)
+    SET(COMPAT_TIME_MONOTONIC_IMPL "${LIFXD_SOURCE_DIR}/compat/${CMAKE_SYSTEM_NAME}/time_monotonic.c")
+    SET(COMPAT_TIME_MONOTONIC_H "${LIFXD_SOURCE_DIR}/compat/${CMAKE_SYSTEM_NAME}/time_monotonic.h")
+    SET(GENERIC_TIME_MONOTONIC_IMPL "${LIFXD_SOURCE_DIR}/compat/generic/time_monotonic.c")
+    SET(GENERIC_TIME_MONOTONIC_IMPL "${LIFXD_SOURCE_DIR}/compat/generic/time_monotonic.h")
+
+    SET(CMAKE_REQUIRED_QUIET TRUE)
+    MESSAGE(STATUS "Looking for clock_gettime")
+    CHECK_FUNCTION_EXISTS("clock_gettime" HAVE_CLOCK_GETTIME)
+    UNSET(CMAKE_REQUIRED_QUIET)
+
+    IF (HAVE_CLOCK_GETTIME)
+        MESSAGE(STATUS "Looking for clock_gettime - found")
+        SET(
+            TIME_MONOTONIC_IMPL "${GENERIC_TIME_MONOTONIC_IMPL}"
+            CACHE INTERNAL "lifxd_time_monotonic (POSIX generic implementation)"
+        )
+        FILE(COPY "${GENERIC_TIME_MONOTONIC_H}" "${LIFXD_BINARY_DIR}/compat/")
+    ELSEIF (EXISTS "${COMPAT_TIME_MONOTONIC_IMPL}")
+        MESSAGE(STATUS "Looking for clock_gettime - not found, using built-in compatibilty file")
+        FILE(COPY "${COMPAT_TIME_MONOTONIC_H}" DESTINATION "${LIFXD_BINARY_DIR}/compat/")
+        SET(
+            TIME_MONOTONIC_IMPL "${COMPAT_TIME_MONOTONIC_IMPL}"
+            CACHE INTERNAL "lifxd_time_monotonic (${CMAKE_SYSTEM_NAME} specific implementation)"
+        )
+    ELSE ()
+        MESSAGE(SEND_ERROR "Looking for clock_gettime - not found")
+    ENDIF ()
+ENDIF ()
diff --git a/CMakeScripts/FindEndian.cmake b/CMakeScripts/FindEndian.cmake
--- a/CMakeScripts/FindEndian.cmake
+++ b/CMakeScripts/FindEndian.cmake
@@ -1,19 +1,21 @@
 INCLUDE(CheckIncludeFile)
 
-SET(COMPAT_ENDIAN_H "${LIFXD_SOURCE_DIR}/compat/${CMAKE_SYSTEM_NAME}/endian.h")
+IF (NOT ENDIAN_H_PATH)
+    SET(COMPAT_ENDIAN_H "${LIFXD_SOURCE_DIR}/compat/${CMAKE_SYSTEM_NAME}/endian.h")
 
-IF (NOT ENDIAN_H_PATH)
+    SET(CMAKE_REQUIRED_QUIET TRUE)
+    MESSAGE(STATUS "Looking for endian.h")
     CHECK_INCLUDE_FILE("endian.h" HAVE_ENDIAN_H)
+    UNSET(CMAKE_REQUIRED_QUIET)
 
     IF (HAVE_ENDIAN_H)
-        SET(ENDIAN_H_PATH "using native header" CACHE INTERNAL "endian.h path")
+        MESSAGE(STATUS "Looking for clock_gettime - found")
     ELSEIF (EXISTS "${COMPAT_ENDIAN_H}")
-        FILE(
-            COPY "${COMPAT_ENDIAN_H}"
-            DESTINATION "${LIFXD_BINARY_DIR}/compat/"
-        )
-        MESSAGE(STATUS "Using compatibility endian.h for ${CMAKE_SYSTEM_NAME}")
+        MESSAGE(STATUS "Looking for endian.h - not found, using built-in compatibility file")
+        FILE(COPY "${COMPAT_ENDIAN_H}" DESTINATION "${LIFXD_BINARY_DIR}/compat/")
         SET(ENDIAN_H_PATH "${COMPAT_ENDIAN_H}" CACHE INTERNAL "endian.h path")
+    ELSE ()
+        MESSAGE(STATUS "Looking for endian.h - not found")
     ENDIF ()
 ENDIF ()
 
diff --git a/compat/Darwin/time_monotonic.c b/compat/Darwin/time_monotonic.c
new file mode 100644
--- /dev/null
+++ b/compat/Darwin/time_monotonic.c
@@ -0,0 +1,53 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice,
+//    this list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+//    this list of conditions and the following disclaimer in the documentation
+//    and/or other materials provided with the distribution.
+//
+// 3. Neither the name of the copyright holder nor the names of its contributors
+//    may be used to endorse or promote products derived from this software
+//    without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+// POSSIBILITY OF SUCH DAMAGE.
+
+// This is pretty much Listing 2 from:
+//
+// https://developer.apple.com/library/mac/qa/qa1398/_index.html
+
+#include <mach/mach_time.h>
+#include <sys/time.h>
+#include <assert.h>
+
+#include "time_monotonic.h"
+
+enum { MSECS_IN_NSEC = 1000000 };
+
+time_t
+lifxd_time_monotonic_msecs(void)
+{
+    static mach_timebase_info_data_t timebase = { 0, 0 };
+    if (timebase.denom == 0) {
+        mach_timebase_info(&timebase);
+    }
+
+    uint64_t time = mach_absolute_time();
+
+    return time * timebase.numer / timebase.denom * MSECS_IN_NSEC;
+}
diff --git a/compat/Darwin/time_monotonic.h b/compat/Darwin/time_monotonic.h
new file mode 100644
--- /dev/null
+++ b/compat/Darwin/time_monotonic.h
@@ -0,0 +1,32 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice,
+//    this list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+//    this list of conditions and the following disclaimer in the documentation
+//    and/or other materials provided with the distribution.
+//
+// 3. Neither the name of the copyright holder nor the names of its contributors
+//    may be used to endorse or promote products derived from this software
+//    without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+// POSSIBILITY OF SUCH DAMAGE.
+
+#pragma once
+
+time_t lifxd_time_monotonic_msecs(void);
diff --git a/compat/generic/time_monotonic.c b/compat/generic/time_monotonic.c
new file mode 100644
--- /dev/null
+++ b/compat/generic/time_monotonic.c
@@ -0,0 +1,40 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice,
+//    this list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+//    this list of conditions and the following disclaimer in the documentation
+//    and/or other materials provided with the distribution.
+//
+// 3. Neither the name of the copyright holder nor the names of its contributors
+//    may be used to endorse or promote products derived from this software
+//    without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+// POSSIBILITY OF SUCH DAMAGE.
+
+#include <time.h>
+
+#include "time_monotonic.h"
+
+time_t
+lifxd_time_monotonic_msecs(void)
+{
+    struct timespec tp;
+    clock_gettime(CLOCK_MONOTONIC, &tp);
+    return tp.tv_sec * 1000 + tp.tv_nsec / 1000000;
+}
diff --git a/compat/generic/time_monotonic.h b/compat/generic/time_monotonic.h
new file mode 100644
--- /dev/null
+++ b/compat/generic/time_monotonic.h
@@ -0,0 +1,32 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice,
+//    this list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+//    this list of conditions and the following disclaimer in the documentation
+//    and/or other materials provided with the distribution.
+//
+// 3. Neither the name of the copyright holder nor the names of its contributors
+//    may be used to endorse or promote products derived from this software
+//    without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+// POSSIBILITY OF SUCH DAMAGE.
+
+#pragma once
+
+time_t lifxd_time_monotonic_msecs(void);
diff --git a/core/CMakeLists.txt b/core/CMakeLists.txt
--- a/core/CMakeLists.txt
+++ b/core/CMakeLists.txt
@@ -1,3 +1,5 @@
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
+
 CONFIGURE_FILE(version.h.in ${CMAKE_CURRENT_BINARY_DIR}/version.h)
 
 ADD_EXECUTABLE(
@@ -9,6 +11,7 @@
     lifxd.c
     log.c
     wire_proto.c
+    ${TIME_MONOTONIC_IMPL}
 )
 
 TARGET_LINK_LIBRARIES(lifxd ${EVENT2_CORE_LIBRARY})
diff --git a/core/broadcast.c b/core/broadcast.c
--- a/core/broadcast.c
+++ b/core/broadcast.c
@@ -48,6 +48,7 @@
 #include "bulb.h"
 #include "gateway.h"
 #include "broadcast.h"
+#include "time_monotonic.h"
 #include "lifxd.h"
 
 static struct {
@@ -155,6 +156,11 @@
         }
         if (gw) {
             void *pkt = &read.buf[LIFXD_PACKET_HEADER_SIZE];
+            gw->lastresp_at_msecs = lifxd_time_monotonic_msecs();
+            lifxd_debug(
+                "[%s]:%hu latency = %ld",
+                gw->lastresp_at_msecs - gw->lastreq_at_msecs
+            );
             pkt_infos->decode(pkt);
             pkt_infos->handle(gw, &read.hdr, pkt);
         } else {
@@ -196,8 +202,8 @@
         sizeof(lifx_addr)
     );
     if (nbytes == sizeof(get_pan_gateway)) {
-        struct timeval tv = LIFXD_MSECS_TO_TV(
-            LIFXD_BROADCAST_DISCOVERY_TIMEOUT_MSEC
+        struct timeval tv = LIFXD_MSECS_TO_TIMEVAL(
+            LIFXD_BROADCAST_DISCOVERY_TIMEOUT_MSECS
         );
         if (event_del(lifxd_broadcast_endpoint.write_ev)
             || event_add(lifxd_broadcast_endpoint.discovery_timeout_ev, &tv)) {
@@ -257,7 +263,7 @@
 
     lifxd_info(
         "discovery didn't returned anything in %dms, restarting it",
-        LIFXD_BROADCAST_DISCOVERY_TIMEOUT_MSEC
+        LIFXD_BROADCAST_DISCOVERY_TIMEOUT_MSECS
     );
 
     if (!lifxd_broadcast_discovery()) {
diff --git a/core/broadcast.h b/core/broadcast.h
--- a/core/broadcast.h
+++ b/core/broadcast.h
@@ -29,7 +29,7 @@
 
 #pragma once
 
-enum { LIFXD_BROADCAST_DISCOVERY_TIMEOUT_MSEC = 2000 };
+enum { LIFXD_BROADCAST_DISCOVERY_TIMEOUT_MSECS = 2000 };
 
 bool lifxd_broadcast_setup(void);
 void lifxd_broadcast_close(void);
diff --git a/core/gateway.c b/core/gateway.c
--- a/core/gateway.c
+++ b/core/gateway.c
@@ -38,6 +38,7 @@
 #include <stdint.h>
 #include <stdlib.h>
 #include <string.h>
+#include <time.h>
 #include <unistd.h>
 
 #include <event2/event.h>
@@ -48,6 +49,7 @@
 #include "bulb.h"
 #include "gateway.h"
 #include "broadcast.h"
+#include "time_monotonic.h"
 #include "lifxd.h"
 
 static struct lifxd_gateway_list lifxd_gateways = \
@@ -108,6 +110,7 @@
         if (!evbuffer_get_length(gw->write_buf)) {
             event_del(gw->write_ev);
         }
+        gw->lastreq_at_msecs = lifxd_time_monotonic_msecs();
     }
 }
 
@@ -199,8 +202,8 @@
     gw->port = lifxd_sockaddrport(peer);
     memcpy(gw->site, site, sizeof(gw->site));
 
-    struct timeval refresh_interval = LIFXD_MSECS_TO_TV(
-        LIFXD_GATEWAY_REFRESH_INTERVAL_MSEC
+    struct timeval refresh_interval = LIFXD_MSECS_TO_TIMEVAL(
+        LIFXD_GATEWAY_REFRESH_INTERVAL_MSECS
     );
 
     if (!gw->write_ev || !gw->write_buf || !gw->refresh_ev
diff --git a/core/gateway.h b/core/gateway.h
--- a/core/gateway.h
+++ b/core/gateway.h
@@ -34,11 +34,13 @@
 // aggressively polling a bulb doesn't raise it's consumption at all (it's
 // interesting to note that a turned off bulb still draw about 2W in ZigBee and
 // about 3W in WiFi).
-enum { LIFXD_GATEWAY_REFRESH_INTERVAL_MSEC = 100 };
+enum { LIFXD_GATEWAY_REFRESH_INTERVAL_MSECS = 100 };
 
 // In the meantime skip a refresh if we have too many bytes in our write buffer:
 enum { LIFXD_GATEWAY_WRITE_HIGH_WATERMARK = 256 };
 
+enum { LIFXD_GATEWAY_TIMEOUT_MSECS = 5000 };
+
 struct lifxd_gateway {
     LIST_ENTRY(lifxd_gateway)   link;
     struct lifxd_bulb_list      bulbs;
@@ -52,6 +54,8 @@
     uint16_t                    port;
     uint8_t                     site[LIFXD_ADDR_LENGTH];
     evutil_socket_t             socket;
+    time_t                      lastreq_at_msecs;
+    time_t                      lastresp_at_msecs;
     struct event                *write_ev;
     struct evbuffer             *write_buf;
     struct event                *refresh_ev;
diff --git a/core/lifxd.h b/core/lifxd.h
--- a/core/lifxd.h
+++ b/core/lifxd.h
@@ -30,7 +30,7 @@
 #pragma once
 
 #define LIFXD_ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))
-#define LIFXD_MSECS_TO_TV(v) {      \
+#define LIFXD_MSECS_TO_TIMEVAL(v) { \
     .tv_sec = (v) / 1000,           \
     .tv_usec = ((v) % 1000) * 1000  \
 }
