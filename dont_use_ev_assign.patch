# HG changeset patch
# Parent  eaec17795512845ed7a35e486ee5e9d61aa429a2
Avoid event_assign for better compatibility across libevent versions

diff --git a/core/lightsd.c b/core/lightsd.c
--- a/core/lightsd.c
+++ b/core/lightsd.c
@@ -36,7 +36,6 @@
 #include <unistd.h>
 
 #include <event2/event.h>
-#include <event2/event_struct.h>
 
 #include "lifx/wire_proto.h"
 #include "time_monotonic.h"
@@ -72,34 +71,16 @@
 
 struct event_base *lgtd_ev_base = NULL;
 
+static const int lgtd_signals[] = { SIGINT, SIGTERM, SIGQUIT };
+static struct event *lgtd_signal_evs[LGTD_ARRAY_SIZE(lgtd_signals)] = { NULL };
+
 static int lgtd_last_signal_received = 0;
 
-void
-lgtd_cleanup(void)
-{
-    lgtd_lifx_discovery_close();
-    lgtd_listen_close_all();
-    lgtd_command_pipe_close_all();
-    lgtd_client_close_all();
-    lgtd_lifx_broadcast_close();
-    lgtd_lifx_gateway_close_all();
-    lgtd_timer_stop_all();
-    event_base_free(lgtd_ev_base);
-#if LIBEVENT_VERSION_NUMBER >= 0x02010100
-    libevent_global_shutdown();
-#endif
-    if (lgtd_opts.pidfile) {
-        unlink(lgtd_opts.pidfile);
-    }
-}
-
 static void
 lgtd_signal_event_callback(int signum, short events, void *ctx)
 {
     assert(ctx);
 
-    // NOTE: syslog isn't signal safe, don't log anything in this function.
-
     lgtd_last_signal_received = signum;
     event_del((struct event *)ctx);  // restore default behavior
     event_base_loopbreak(lgtd_ev_base);
@@ -126,20 +107,18 @@
 }
 
 static void
-lgtd_configure_signal_handling(void)
+lgtd_setup_signal_handling(void)
 {
-    const int signals[] = {SIGINT, SIGTERM, SIGQUIT};
-    static struct event sigevs[LGTD_ARRAY_SIZE(signals)];
-
-    for (int i = 0; i != LGTD_ARRAY_SIZE(signals); i++) {
-        evsignal_assign(
-            &sigevs[i],
-            lgtd_ev_base,
-            signals[i],
-            lgtd_signal_event_callback,
-            &sigevs[i]
+    for (intptr_t i = 0; i != LGTD_ARRAY_SIZE(lgtd_signals); i++) {
+        lgtd_signal_evs[i] = evsignal_new(
+            // event_self_cbarg() would make things cleaner, but this was
+            // unfortunately added in libevent 2.1 which hasn't been released
+            // as of 2016:
+            lgtd_ev_base, lgtd_signals[i], lgtd_signal_event_callback, (void *)i
         );
-        evsignal_add(&sigevs[i], NULL);
+        if (!lgtd_signal_evs[i] || evsignal_add(lgtd_signal_evs[i], NULL)) {
+            lgtd_err(1, "can't configure signal handling");
+        }
     }
 
     struct sigaction act = { .sa_handler = SIG_IGN };
@@ -149,6 +128,15 @@
 }
 
 static void
+lgtd_close_signal_handling(void)
+{
+    for (int i = 0; i != LGTD_ARRAY_SIZE(lgtd_signals); i++) {
+        event_del(lgtd_signal_evs[i]);
+        event_free(lgtd_signal_evs[i]);
+    }
+}
+
+static void
 lgtd_usage(const char *progname)
 {
     printf(
@@ -186,6 +174,26 @@
     exit(0);
 }
 
+void
+lgtd_cleanup(void)
+{
+    lgtd_lifx_discovery_close();
+    lgtd_listen_close_all();
+    lgtd_command_pipe_close_all();
+    lgtd_client_close_all();
+    lgtd_lifx_broadcast_close();
+    lgtd_lifx_gateway_close_all();
+    lgtd_timer_stop_all();
+    lgtd_close_signal_handling();
+    event_base_free(lgtd_ev_base);
+#if LIBEVENT_VERSION_NUMBER >= 0x02010100
+    libevent_global_shutdown();
+#endif
+    if (lgtd_opts.pidfile) {
+        unlink(lgtd_opts.pidfile);
+    }
+}
+
 int
 main(int argc, char *argv[], char *envp[])
 {
@@ -195,7 +203,7 @@
     lgtd_daemon_setup_proctitle(argc, argv, envp);
 
     lgtd_configure_libevent();
-    lgtd_configure_signal_handling();
+    lgtd_setup_signal_handling();
 
     static const struct option long_opts[] = {
         {"listen",          required_argument, NULL, 'l'},
