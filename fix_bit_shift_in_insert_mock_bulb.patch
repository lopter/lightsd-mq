# HG changeset patch
# Parent 8b4808ddd7484f0efa54ff7ee33d4b178e164366
# Parent  eba8a13e6de07b607fb33eaaac4b1b06d638189d
Fix bitshift in test_utils_insert_mock_bulb...

diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,8 +22,11 @@
 # TODO: we need at least 2.0.19-stable because of the logging defines
 FIND_PACKAGE(Event2 REQUIRED COMPONENTS core)
 FIND_PACKAGE(Endian REQUIRED)
+INCLUDE(TestBigEndian)
 INCLUDE(CompatTimeMonotonic)
 
+TEST_BIG_ENDIAN(LGTD_BIG_ENDIAN_SYSTEM)
+
 ### Global definitions #########################################################
 
 INCLUDE(AddAllSubdirectories)
@@ -32,6 +35,7 @@
 SET(CMAKE_C_FLAGS "-pipe -Wextra -Wall -Wstrict-prototypes -std=c99")
 
 ADD_DEFINITIONS("-DLGTD_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P}")
+ADD_DEFINITIONS("-DLGTD_BIG_ENDIAN_SYSTEM=${LGTD_BIG_ENDIAN_SYSTEM}")
 
 # Only relevant for the GNU libc:
 ADD_DEFINITIONS(
diff --git a/CMakeScripts/CompatTimeMonotonic.cmake b/CMakeScripts/CompatTimeMonotonic.cmake
--- a/CMakeScripts/CompatTimeMonotonic.cmake
+++ b/CMakeScripts/CompatTimeMonotonic.cmake
@@ -5,36 +5,46 @@
     SET(COMPAT_TIME_MONOTONIC_H "${LIGHTSD_SOURCE_DIR}/compat/${CMAKE_SYSTEM_NAME}/time_monotonic.h")
     SET(GENERIC_TIME_MONOTONIC_IMPL "${LIGHTSD_SOURCE_DIR}/compat/generic/time_monotonic.c")
     SET(GENERIC_TIME_MONOTONIC_H "${LIGHTSD_SOURCE_DIR}/compat/generic/time_monotonic.h")
-
-    IF (TRUE) # TODO glibc < 2.17 only
-        SET(CLOCK_GETTIME_LIBRARY rt)
-    ENDIF (TRUE)
+    SET(TIME_MONOTONIC_LIBRARY time_monotonic CACHE INTERNAL "lgtd_time_monotonic implementation")
 
     SET(CMAKE_REQUIRED_QUIET TRUE)
-    SET(CMAKE_REQUIRED_LIBRARIES ${CLOCK_GETTIME_LIBRARY})
     MESSAGE(STATUS "Looking for clock_gettime")
     CHECK_FUNCTION_EXISTS("clock_gettime" HAVE_CLOCK_GETTIME)
-    UNSET(CMAKE_REQUIRED_LIBRARIES)
+    IF (NOT HAVE_CLOCK_GETTIME)
+        # glibc < 2.17:
+        MESSAGE(STATUS "Looking for clock_gettime again in librt")
+        UNSET(HAVE_CLOCK_GETTIME CACHE)
+        SET(TIME_MONOTONIC_LIBRARY_DEP rt CACHE INTERNAL "dependency for lgtd_time_monotonic")
+        SET(CMAKE_REQUIRED_LIBRARIES ${TIME_MONOTONIC_LIBRARY_DEP})
+        CHECK_FUNCTION_EXISTS("clock_gettime" HAVE_CLOCK_GETTIME)
+        UNSET(CMAKE_REQUIRED_LIBRARIES)
+        IF (NOT HAVE_CLOCK_GETTIME)
+            UNSET(TIME_MONOTONIC_LIBRARY_DEP CACHE)
+        ENDIF ()
+    ENDIF ()
     UNSET(CMAKE_REQUIRED_QUIET)
 
     IF (HAVE_CLOCK_GETTIME)
         MESSAGE(STATUS "Looking for clock_gettime - found")
         FILE(COPY "${GENERIC_TIME_MONOTONIC_H}" DESTINATION "${LIGHTSD_BINARY_DIR}/core/")
         SET(
-            TIME_MONOTONIC_LIBRARY time_monotonic
-            CACHE INTERNAL "lgtd_time_monotonic (POSIX generic implementation)"
+            TIME_MONOTONIC_IMPL ${GENERIC_TIME_MONOTONIC_IMPL}
+            CACHE INTERNAL "lgtd_time_monotonic (POSIX generic source)"
         )
-        ADD_LIBRARY(${TIME_MONOTONIC_LIBRARY} STATIC "${GENERIC_TIME_MONOTONIC_IMPL}")
-        TARGET_LINK_LIBRARIES(${TIME_MONOTONIC_LIBRARY} ${CLOCK_GETTIME_LIBRARY})
     ELSEIF (EXISTS "${COMPAT_TIME_MONOTONIC_IMPL}")
         MESSAGE(STATUS "Looking for clock_gettime - not found, using built-in compatibilty file")
         FILE(COPY "${COMPAT_TIME_MONOTONIC_H}" DESTINATION "${LIGHTSD_BINARY_DIR}/core/")
         SET(
-            TIME_MONOTONIC_LIBRARY time_monotonic
-            CACHE INTERNAL "lgtd_time_monotonic (${CMAKE_SYSTEM_NAME} specific implementation)"
+            TIME_MONOTONIC_IMPL "${COMPAT_TIME_MONOTONIC_IMPL}"
+            CACHE INTERNAL "lgtd_time_monotonic (${CMAKE_SYSTEM_NAME} specific source)"
         )
-        ADD_LIBRARY(${TIME_MONOTONIC_LIBRARY} STATIC "${COMPAT_TIME_MONOTONIC_IMPL}")
     ELSE ()
         MESSAGE(SEND_ERROR "Looking for clock_gettime - not found")
     ENDIF ()
 ENDIF ()
+
+ADD_LIBRARY(${TIME_MONOTONIC_LIBRARY} STATIC "${TIME_MONOTONIC_IMPL}")
+
+IF (TIME_MONOTONIC_LIBRARY_DEP)
+    TARGET_LINK_LIBRARIES(${TIME_MONOTONIC_LIBRARY} ${TIME_MONOTONIC_LIBRARY_DEP})
+ENDIF ()
diff --git a/tests/core/tests_utils.c b/tests/core/tests_utils.c
--- a/tests/core/tests_utils.c
+++ b/tests/core/tests_utils.c
@@ -50,7 +50,10 @@
     union {
         uint8_t     as_array[LGTD_LIFX_ADDR_LENGTH];
         uint64_t    as_scalar;
-    } bulb_addr = { .as_scalar = htobe64(addr) >> 16 };
+    } bulb_addr = {
+        .as_scalar = LGTD_BIG_ENDIAN_SYSTEM ?
+            htobe64(addr) << 16 : htobe64(addr) >> 16
+    };
     struct lgtd_lifx_bulb *bulb = lgtd_lifx_bulb_open(gw, bulb_addr.as_array);
 
     SLIST_INSERT_HEAD(&gw->bulbs, bulb, link_by_gw);
