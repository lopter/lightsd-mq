# HG changeset patch
# Parent  c128b73a419788def1f3d8a1b4520a842d65c14b
Setup the LIFX client source to get unicast responses.

This should significantly improve both latency and throughput.

diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,7 +5,7 @@
 
 SET(CPACK_PACKAGE_VERSION_MAJOR "1")
 SET(CPACK_PACKAGE_VERSION_MINOR "1")
-SET(CPACK_PACKAGE_VERSION_PATCH "0")
+SET(CPACK_PACKAGE_VERSION_PATCH "1")
 SET(LIGHTSD_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
 
 MESSAGE(STATUS "lightsd version: ${LIGHTSD_VERSION}")
diff --git a/core/daemon.c b/core/daemon.c
--- a/core/daemon.c
+++ b/core/daemon.c
@@ -400,6 +400,28 @@
     return written == pidlen;
 }
 
+uint32_t
+lgtd_daemon_randuint32(void)
+{
+    int fd = open("/dev/urandom", O_RDONLY);
+    if (fd == -1) {
+        lgtd_err(1, "couldn't open /dev/urandom");
+    }
+
+    uint32_t rv;
+    int nbytes = read(fd, &rv, sizeof(rv));
+    if (nbytes != sizeof(rv)) {
+        close(fd);
+        lgtd_err(
+            1, "couln't fetch %ju bytes from /dev/urandom",
+            sizeof((uintmax_t)rv)
+        );
+    }
+
+    close(fd);
+    return rv;
+}
+
 int
 lgtd_daemon_syslog_facilitytoi(const char *facility)
 {
diff --git a/core/daemon.h b/core/daemon.h
--- a/core/daemon.h
+++ b/core/daemon.h
@@ -36,6 +36,7 @@
 bool lgtd_daemon_write_pidfile(const char *);
 void lgtd_daemon_drop_privileges(void);
 bool lgtd_daemon_makedirs(const char *);
+uint32_t lgtd_daemon_randuint32(void);
 
 int lgtd_daemon_syslog_facilitytoi(const char *);
 void lgtd_daemon_syslog_open(const char *, enum lgtd_verbosity, int);
diff --git a/core/lightsd.c b/core/lightsd.c
--- a/core/lightsd.c
+++ b/core/lightsd.c
@@ -336,7 +336,7 @@
 
     lgtd_daemon_die_if_running_as_root_unless_requested(lgtd_opts.user);
 
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
     if (!lgtd_lifx_discovery_setup() || !lgtd_lifx_broadcast_setup()) {
         lgtd_err(1, "can't setup lightsd");
     }
diff --git a/core/lightsd.h b/core/lightsd.h
--- a/core/lightsd.h
+++ b/core/lightsd.h
@@ -131,6 +131,9 @@
 char *lgtd_print_duration(uint64_t, char *, int);
 #define LGTD_PRINT_DURATION(secs, arr) \
     lgtd_print_duration((secs), (arr), sizeof((arr)))
+char* lgtd_print_nsec_timestamp(uint64_t, char *, int);
+#define LGTD_LIFX_WIRE_PRINT_NSEC_TIMESTAMP(ts, arr) \
+    lgtd_print_nsec_timestamp((ts), (arr), sizeof((arr)))
 
 void lgtd_log_setup(void);
 
diff --git a/core/utils.c b/core/utils.c
--- a/core/utils.c
+++ b/core/utils.c
@@ -25,6 +25,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <time.h>
 
 #include "lightsd.h"
 
@@ -117,3 +118,22 @@
     snprintf(&buf[i], bufsz - i, "%02d:%02d", hours, minutes);
     return buf;
 }
+
+char *
+lgtd_print_nsec_timestamp(uint64_t nsec_ts, char *buf, int bufsz)
+{
+    assert(buf);
+    assert(bufsz > 0);
+
+    time_t ts = LGTD_NSECS_TO_SECS(nsec_ts);
+
+    struct tm tm_utc;
+    if (gmtime_r(&ts, &tm_utc)) {
+        int64_t usecs = LGTD_NSECS_TO_USECS(nsec_ts - LGTD_SECS_TO_NSECS(ts));
+        LGTD_TM_TO_ISOTIME(&tm_utc, buf, bufsz, usecs);
+    } else {
+        buf[0] = '\0';
+    }
+
+    return buf;
+}
diff --git a/lifx/wire_proto.c b/lifx/wire_proto.c
--- a/lifx/wire_proto.c
+++ b/lifx/wire_proto.c
@@ -27,7 +27,6 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <time.h>
 
 #include <event2/util.h>
 
@@ -35,6 +34,7 @@
 #include "core/time_monotonic.h"
 #include "bulb.h"
 #include "gateway.h"
+#include "core/daemon.h"
 #include "core/lightsd.h"
 
 const union lgtd_lifx_target LGTD_LIFX_UNSPEC_TARGET = { .tags = 0 };
@@ -50,6 +50,8 @@
    13, 18,  8, 12,  7,  6,  5, 63
 };
 
+static uint32_t lgtd_lifx_client_id = 0;
+
 static struct lgtd_lifx_packet_info_map lgtd_lifx_packet_info =
     RB_INITIALIZER(&lgtd_lifx_packets_infos);
 
@@ -95,7 +97,7 @@
     );
 }
 
-void
+static void
 lgtd_lifx_wire_load_packet_info_map(void)
 {
 #define DECODER(x)  ((void (*)(void *))(x))
@@ -465,6 +467,15 @@
     return RB_FIND(lgtd_lifx_packet_info_map, &lgtd_lifx_packet_info, &pkt_info);
 }
 
+void
+lgtd_lifx_wire_setup(void)
+{
+    lgtd_lifx_wire_load_packet_info_map();
+    do {
+        lgtd_lifx_client_id = lgtd_daemon_randuint32();
+    } while (!lgtd_lifx_client_id);
+}
+
 
 #define WAVEFORM_ENTRY(e) { .str = e, .len = sizeof(e) - 1 }
 const struct lgtd_lifx_waveform_string_id lgtd_lifx_waveform_table[] = {
@@ -493,25 +504,6 @@
     return LGTD_LIFX_WAVEFORM_INVALID;
 }
 
-char *
-lgtd_lifx_wire_print_nsec_timestamp(uint64_t nsec_ts, char *buf, int bufsz)
-{
-    assert(buf);
-    assert(bufsz > 0);
-
-    time_t ts = LGTD_NSECS_TO_SECS(nsec_ts);
-
-    struct tm tm_utc;
-    if (gmtime_r(&ts, &tm_utc)) {
-        int64_t usecs = LGTD_NSECS_TO_USECS(nsec_ts - LGTD_SECS_TO_NSECS(ts));
-        LGTD_TM_TO_ISOTIME(&tm_utc, buf, bufsz, usecs);
-    } else {
-        buf[0] = '\0';
-    }
-
-    return buf;
-}
-
 static void
 lgtd_lifx_wire_encode_header(struct lgtd_lifx_packet_header *hdr, int flags)
 {
@@ -534,6 +526,7 @@
     }
     hdr->at_time = htole64(hdr->at_time);
     hdr->packet_type = htole16(hdr->packet_type);
+    hdr->source = htole32(hdr->source); // not strictly necessary but eh.
 }
 
 // Convert all the fields in the header to the host endianness.
@@ -554,6 +547,7 @@
     }
     hdr->at_time = le64toh(hdr->at_time);
     hdr->packet_type = le16toh(hdr->packet_type);
+    hdr->source = le32toh(hdr->source);
 }
 
 const struct lgtd_lifx_packet_info *
@@ -564,6 +558,7 @@
                             enum lgtd_lifx_packet_type packet_type)
 {
     assert(hdr);
+    assert(lgtd_lifx_client_id);
 
     const struct lgtd_lifx_packet_info *pkt_info =
         lgtd_lifx_wire_get_packet_info(packet_type);
@@ -571,6 +566,7 @@
     assert(pkt_info);
 
     memset(hdr, 0, sizeof(*hdr));
+    hdr->source = lgtd_lifx_client_id;
     hdr->size = pkt_info->size + sizeof(*hdr);
     hdr->packet_type = packet_type;
     if (site) {
diff --git a/lifx/wire_proto.h b/lifx/wire_proto.h
--- a/lifx/wire_proto.h
+++ b/lifx/wire_proto.h
@@ -61,8 +61,16 @@
     //! - tagged: true when the target field holds tags;
     //! - origin: LIFX internal use, should be 0.
     uint16le_t      protocol;
-    //! Here is what LIFXKit says about it, maybe it's related to zigbee:
-    //! Message source identifier from NAT table (Internal LIFX use)
+    //! http://lan.developer.lifx.com/v2.0/docs/header-description
+    //! The source identifier allows each client to provide an unique value,
+    //! which will be included by the LIFX device in any message that is sent
+    //! in response to a message sent by the client. If the source identifier
+    //! is a non-zero value, then the LIFX device will send a unicast message
+    //! to the source IP address and port that the client used to send the
+    //! originating message. If the source identifier is a zero value, then the
+    //! LIFX device may send a broadcast message that can be received by all
+    //! clients on the same sub-net. See _ack_required_ and _res_required_
+    //! fields in the Frame Address.
     uint32le_t      source;
     union {
         //! All targeted tags ORed together.
@@ -387,12 +395,10 @@
          (tag_id_varname) = lgtd_lifx_wire_next_tag_id((tag_id_varname), (tags)))
 
 enum lgtd_lifx_waveform_type lgtd_lifx_wire_waveform_string_id_to_type(const char *, int);
-char* lgtd_lifx_wire_print_nsec_timestamp(uint64_t, char *, int);
-#define LGTD_LIFX_WIRE_PRINT_NSEC_TIMESTAMP(ts, arr) \
-    lgtd_lifx_wire_print_nsec_timestamp((ts), (arr), sizeof((arr)))
 
 const struct lgtd_lifx_packet_info *lgtd_lifx_wire_get_packet_info(enum lgtd_lifx_packet_type);
-void lgtd_lifx_wire_load_packet_info_map(void);
+
+void lgtd_lifx_wire_setup(void);
 
 const struct lgtd_lifx_packet_info *lgtd_lifx_wire_setup_header(struct lgtd_lifx_packet_header *,
                                                                  enum lgtd_lifx_target_type,
diff --git a/tests/core/client/CMakeLists.txt b/tests/core/client/CMakeLists.txt
--- a/tests/core/client/CMakeLists.txt
+++ b/tests/core/client/CMakeLists.txt
@@ -10,7 +10,6 @@
     ${LIGHTSD_SOURCE_DIR}/core/utils.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/tagging.c
-    ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
diff --git a/tests/core/daemon/CMakeLists.txt b/tests/core/daemon/CMakeLists.txt
--- a/tests/core/daemon/CMakeLists.txt
+++ b/tests/core/daemon/CMakeLists.txt
@@ -10,7 +10,6 @@
     ${LIGHTSD_SOURCE_DIR}/core/utils.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/tagging.c
-    ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
diff --git a/tests/core/daemon/test_daemon_randuint32.c b/tests/core/daemon/test_daemon_randuint32.c
new file mode 100644
--- /dev/null
+++ b/tests/core/daemon/test_daemon_randuint32.c
@@ -0,0 +1,94 @@
+#include <sys/types.h>
+
+int mock_open(const char *, int, ...);
+ssize_t mock_read(int, void *, size_t);
+int mock_close(int);
+
+#define open(fp, flags, ...) mock_open(fp, flags, ##__VA_ARGS__)
+#define read(fd, buf, sz) mock_read(fd, buf, sz)
+#define close(fd) mock_close(fd)
+
+#include "daemon.c"
+
+#include "mock_gateway.h"
+#include "mock_pipe.h"
+#include "mock_router.h"
+#include "mock_log.h"
+#include "mock_timer.h"
+
+static const int MOCK_RANDOM_NUMBER = 0x72616e64;
+
+int mock_open_call_count = 0;
+
+int
+mock_open(const char *fp, int flags, ...)
+{
+    mock_open_call_count++;
+
+    if (strcmp(fp, "/dev/urandom")) {
+        errx(1, "got fp %s (expected /dev/urandom)", fp);
+    }
+
+    if (flags != O_RDONLY) {
+        errx(1, "got flags %#x (expected %#x)", flags, O_RDONLY);
+    }
+
+    return 42;
+}
+
+int mock_read_call_count = 0;
+
+ssize_t
+mock_read(int fd, void *buf, size_t nbytes)
+{
+    mock_read_call_count++;
+
+    if (fd != 42) {
+        errx(1, "got fd %d (expected 42)", fd);
+    }
+
+    if (!buf) {
+        errx(1, "missing buf");
+    }
+
+    if (nbytes != 4) {
+        errx(1, "got nbytes %ju (expected 4)", (uintmax_t)nbytes);
+    }
+
+    memcpy(buf, &MOCK_RANDOM_NUMBER, sizeof(MOCK_RANDOM_NUMBER));
+
+    return nbytes;
+}
+
+int mock_close_call_count = 0;
+
+int
+mock_close(int fd)
+{
+    mock_close_call_count++;
+
+    if (fd != 42) {
+        errx(1, "got fd %d (expected 42)", fd);
+    }
+
+    return 0;
+}
+
+int
+main(void)
+{
+    if (lgtd_daemon_randuint32() != MOCK_RANDOM_NUMBER) {
+        errx(1, "got unexpected value from randuint32");
+    }
+    if (mock_open_call_count != 1) {
+        errx(1, "open wasn't once");
+    }
+    if (mock_read_call_count != 1) {
+        errx(1, "read wasn't once");
+    }
+    if (mock_close_call_count != 1) {
+        errx(1, "close wasn't once");
+    }
+
+    return 0;
+}
diff --git a/tests/core/daemon/test_daemon_writepidfile.c b/tests/core/daemon/test_daemon_writepidfile.c
--- a/tests/core/daemon/test_daemon_writepidfile.c
+++ b/tests/core/daemon/test_daemon_writepidfile.c
@@ -46,7 +46,7 @@
     va_end(ap);
 
     if (strcmp(fp, "/test.pid")) {
-        lgtd_errx(1, "got fp %s (expected test.pid)", fp);
+        lgtd_errx(1, "got fp %s (expected /test.pid)", fp);
     }
 
     int expected_flags = O_CREAT|O_WRONLY|O_TRUNC;
diff --git a/tests/core/jsonrpc/CMakeLists.txt b/tests/core/jsonrpc/CMakeLists.txt
--- a/tests/core/jsonrpc/CMakeLists.txt
+++ b/tests/core/jsonrpc/CMakeLists.txt
@@ -8,7 +8,6 @@
     ${LIGHTSD_SOURCE_DIR}/core/jsmn.c
     ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/core/utils.c
-    ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
diff --git a/tests/core/jsonrpc/test_jsonrpc_batch.c b/tests/core/jsonrpc/test_jsonrpc_batch.c
--- a/tests/core/jsonrpc/test_jsonrpc_batch.c
+++ b/tests/core/jsonrpc/test_jsonrpc_batch.c
@@ -5,6 +5,7 @@
 #define MOCKED_LGTD_PROTO_GET_LIGHT_STATE
 #define MOCKED_LGTD_PROTO_POWER_ON
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 static int power_on_call_count = 0;
diff --git a/tests/core/jsonrpc/test_jsonrpc_batch_notifications_only.c b/tests/core/jsonrpc/test_jsonrpc_batch_notifications_only.c
--- a/tests/core/jsonrpc/test_jsonrpc_batch_notifications_only.c
+++ b/tests/core/jsonrpc/test_jsonrpc_batch_notifications_only.c
@@ -5,6 +5,7 @@
 #define MOCKED_LGTD_PROTO_GET_LIGHT_STATE
 #define MOCKED_LGTD_PROTO_POWER_ON
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 static int power_on_call_count = 0;
diff --git a/tests/core/jsonrpc/test_jsonrpc_batch_one_invalid_request.c b/tests/core/jsonrpc/test_jsonrpc_batch_one_invalid_request.c
--- a/tests/core/jsonrpc/test_jsonrpc_batch_one_invalid_request.c
+++ b/tests/core/jsonrpc/test_jsonrpc_batch_one_invalid_request.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_POWER_ON
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 static int power_on_call_count = 0;
diff --git a/tests/core/jsonrpc/test_jsonrpc_batch_one_notification.c b/tests/core/jsonrpc/test_jsonrpc_batch_one_notification.c
--- a/tests/core/jsonrpc/test_jsonrpc_batch_one_notification.c
+++ b/tests/core/jsonrpc/test_jsonrpc_batch_one_notification.c
@@ -5,6 +5,7 @@
 #define MOCKED_LGTD_PROTO_GET_LIGHT_STATE
 #define MOCKED_LGTD_PROTO_POWER_ON
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 static int power_on_call_count = 0;
diff --git a/tests/core/jsonrpc/test_jsonrpc_build_target_list.c b/tests/core/jsonrpc/test_jsonrpc_build_target_list.c
--- a/tests/core/jsonrpc/test_jsonrpc_build_target_list.c
+++ b/tests/core/jsonrpc/test_jsonrpc_build_target_list.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_POWER_OFF
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_POWER_OFF
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_POWER_ON
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_POWER_ON
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_toggle.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_toggle.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_toggle.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_toggle.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_POWER_TOGGLE
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_label.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_label.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_label.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_label.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_SET_LABEL
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "mock_gateway.h"
 
 #include "test_jsonrpc_utils.h"
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_SET_LIGHT_FROM_HSBK
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_SET_LIGHT_FROM_HSBK
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_SET_LIGHT_FROM_HSBK
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c
@@ -4,9 +4,25 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_SET_WAVEFORM
 #include "mock_proto.h"
+#define MOCKED_LGTD_LIFX_WIRE_WAVEFORM_STRING_ID_TO_TYPE
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
+enum lgtd_lifx_waveform_type
+lgtd_lifx_wire_waveform_string_id_to_type(const char *s, int len)
+{
+    if (len != 3) {
+        errx(1, "err = %d (expected 3)", len);
+    }
+
+    if (strncmp(s, "SAW", 3)) {
+        errx(1, "s = %.3s (expected SAW)", s);
+    }
+
+    return LGTD_LIFX_WAVEFORM_SAW;
+}
+
 static bool set_waveform_called = false;
 
 void
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c
@@ -4,11 +4,20 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_SET_WAVEFORM
 #include "mock_proto.h"
+#define MOCKED_LGTD_LIFX_WIRE_WAVEFORM_STRING_ID_TO_TYPE
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
 static bool set_waveform_called = false;
 
+enum lgtd_lifx_waveform_type
+lgtd_lifx_wire_waveform_string_id_to_type(const char *s, int len)
+{
+    return len == 3 && !strncmp(s, "SAW", 3) ?
+        LGTD_LIFX_WAVEFORM_SAW : LGTD_LIFX_WAVEFORM_INVALID;
+}
+
 void
 lgtd_proto_set_waveform(struct lgtd_client *client,
                         const struct lgtd_proto_target_list *targets,
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_tag.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_tag.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_tag.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_tag.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_TAG
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "mock_gateway.h"
 
 #include "test_jsonrpc_utils.h"
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_tag_missing_params.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_tag_missing_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_tag_missing_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_tag_missing_params.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_TAG
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "mock_gateway.h"
 
 #include "test_jsonrpc_utils.h"
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_untag.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_untag.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_untag.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_untag.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_UNTAG
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "mock_gateway.h"
 
 #include "test_jsonrpc_utils.h"
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_untag_invalid_params.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_untag_invalid_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_untag_invalid_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_untag_invalid_params.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_UNTAG
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "mock_gateway.h"
 
 #include "test_jsonrpc_utils.h"
diff --git a/tests/core/jsonrpc/test_jsonrpc_consume_object_or_array.c b/tests/core/jsonrpc/test_jsonrpc_consume_object_or_array.c
--- a/tests/core/jsonrpc/test_jsonrpc_consume_object_or_array.c
+++ b/tests/core/jsonrpc/test_jsonrpc_consume_object_or_array.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_dispatch_one_no_params.c b/tests/core/jsonrpc/test_jsonrpc_dispatch_one_no_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_dispatch_one_no_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_dispatch_one_no_params.c
@@ -4,6 +4,7 @@
 #include "mock_log.h"
 #define MOCKED_LGTD_PROTO_POWER_ON
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_no_params.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_no_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_no_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_no_params.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_notification_no_params.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_notification_no_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_notification_no_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_notification_no_params.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_params_array.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_params_array.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_params_array.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_params_array.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_params_obj.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_params_obj.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_params_obj.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_params_obj.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_valid_notification.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_valid_notification.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_valid_notification.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_valid_notification.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_values_from_schema_and_array_honors_objsize.c b/tests/core/jsonrpc/test_jsonrpc_extract_values_from_schema_and_array_honors_objsize.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_values_from_schema_and_array_honors_objsize.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_values_from_schema_and_array_honors_objsize.c
@@ -5,6 +5,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_send_error.c b/tests/core/jsonrpc/test_jsonrpc_send_error.c
--- a/tests/core/jsonrpc/test_jsonrpc_send_error.c
+++ b/tests/core/jsonrpc/test_jsonrpc_send_error.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_send_response.c b/tests/core/jsonrpc/test_jsonrpc_send_response.c
--- a/tests/core/jsonrpc/test_jsonrpc_send_response.c
+++ b/tests/core/jsonrpc/test_jsonrpc_send_response.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_invalid.c b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_invalid.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_invalid.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_invalid.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_valid.c b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_valid.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_valid.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_valid.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_invalid.c b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_invalid.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_invalid.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_invalid.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_valid.c b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_valid.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_valid.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_valid.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_integer.c b/tests/core/jsonrpc/test_jsonrpc_type_integer.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_integer.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_integer.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_integer_invalid_characters.c b/tests/core/jsonrpc/test_jsonrpc_type_integer_invalid_characters.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_integer_invalid_characters.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_integer_invalid_characters.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_integer_too_big.c b/tests/core/jsonrpc/test_jsonrpc_type_integer_too_big.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_integer_too_big.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_integer_too_big.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_integer_too_small.c b/tests/core/jsonrpc/test_jsonrpc_type_integer_too_small.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_integer_too_small.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_integer_too_small.c
@@ -3,6 +3,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_uint16_range_to_float_string.c b/tests/core/jsonrpc/test_jsonrpc_uint16_range_to_float_string.c
--- a/tests/core/jsonrpc/test_jsonrpc_uint16_range_to_float_string.c
+++ b/tests/core/jsonrpc/test_jsonrpc_uint16_range_to_float_string.c
@@ -5,6 +5,7 @@
 #include "mock_client_buf.h"
 #include "mock_log.h"
 #include "mock_proto.h"
+#include "mock_wire_proto.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/mock_daemon.h b/tests/core/mock_daemon.h
--- a/tests/core/mock_daemon.h
+++ b/tests/core/mock_daemon.h
@@ -15,3 +15,11 @@
     return true;
 }
 #endif
+
+#ifndef MOCKED_DAEMON_RANDUINT32
+uint32_t
+lgtd_daemon_randuint32(void)
+{
+    return 0x72616e64;
+}
+#endif
diff --git a/tests/core/mock_log.h b/tests/core/mock_log.h
--- a/tests/core/mock_log.h
+++ b/tests/core/mock_log.h
@@ -32,10 +32,6 @@
 void
 lgtd_warn(const char *fmt, ...)
 {
-    if (lgtd_opts.verbosity > LGTD_WARN) {
-        return;
-    }
-
     fprintf(stderr, "WARN: ");
     va_list ap;
     va_start(ap, fmt);
@@ -47,10 +43,6 @@
 void
 lgtd_warnx(const char *fmt, ...)
 {
-    if (lgtd_opts.verbosity > LGTD_WARN) {
-        return;
-    }
-
     fprintf(stderr, "WARN: ");
     va_list ap;
     va_start(ap, fmt);
@@ -62,10 +54,6 @@
 void
 lgtd_info(const char *fmt, ...)
 {
-    if (lgtd_opts.verbosity > LGTD_INFO) {
-        return;
-    }
-
     fprintf(stderr, "INFO: ");
     va_list ap;
     va_start(ap, fmt);
@@ -77,10 +65,6 @@
 void
 lgtd_debug(const char *fmt, ...)
 {
-    if (lgtd_opts.verbosity > LGTD_DEBUG) {
-        return;
-    }
-
     fprintf(stderr, "DEBUG: ");
     va_list ap;
     va_start(ap, fmt);
diff --git a/tests/core/pipe/CMakeLists.txt b/tests/core/pipe/CMakeLists.txt
--- a/tests/core/pipe/CMakeLists.txt
+++ b/tests/core/pipe/CMakeLists.txt
@@ -10,7 +10,6 @@
     ${LIGHTSD_SOURCE_DIR}/core/utils.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/tagging.c
-    ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
diff --git a/tests/core/proto/CMakeLists.txt b/tests/core/proto/CMakeLists.txt
--- a/tests/core/proto/CMakeLists.txt
+++ b/tests/core/proto/CMakeLists.txt
@@ -10,7 +10,6 @@
     ${LIGHTSD_SOURCE_DIR}/core/utils.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/tagging.c
-    ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
diff --git a/tests/core/proto/test_proto_get_light_state.c b/tests/core/proto/test_proto_get_light_state.c
--- a/tests/core/proto/test_proto_get_light_state.c
+++ b/tests/core/proto/test_proto_get_light_state.c
@@ -6,6 +6,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_get_light_state_empty_device_list.c b/tests/core/proto/test_proto_get_light_state_empty_device_list.c
--- a/tests/core/proto/test_proto_get_light_state_empty_device_list.c
+++ b/tests/core/proto/test_proto_get_light_state_empty_device_list.c
@@ -5,6 +5,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_get_light_state_label_overflow.c b/tests/core/proto/test_proto_get_light_state_label_overflow.c
--- a/tests/core/proto/test_proto_get_light_state_label_overflow.c
+++ b/tests/core/proto/test_proto_get_light_state_label_overflow.c
@@ -6,6 +6,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_get_light_state_null_device_list.c b/tests/core/proto/test_proto_get_light_state_null_device_list.c
--- a/tests/core/proto/test_proto_get_light_state_null_device_list.c
+++ b/tests/core/proto/test_proto_get_light_state_null_device_list.c
@@ -5,6 +5,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_get_light_state_unknown_tag_id.c b/tests/core/proto/test_proto_get_light_state_unknown_tag_id.c
--- a/tests/core/proto/test_proto_get_light_state_unknown_tag_id.c
+++ b/tests/core/proto/test_proto_get_light_state_unknown_tag_id.c
@@ -6,6 +6,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_power_off.c b/tests/core/proto/test_proto_power_off.c
--- a/tests/core/proto/test_proto_power_off.c
+++ b/tests/core/proto/test_proto_power_off.c
@@ -5,6 +5,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_power_off_routing_error.c b/tests/core/proto/test_proto_power_off_routing_error.c
--- a/tests/core/proto/test_proto_power_off_routing_error.c
+++ b/tests/core/proto/test_proto_power_off_routing_error.c
@@ -5,6 +5,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_power_on.c b/tests/core/proto/test_proto_power_on.c
--- a/tests/core/proto/test_proto_power_on.c
+++ b/tests/core/proto/test_proto_power_on.c
@@ -5,6 +5,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_power_on_routing_error.c b/tests/core/proto/test_proto_power_on_routing_error.c
--- a/tests/core/proto/test_proto_power_on_routing_error.c
+++ b/tests/core/proto/test_proto_power_on_routing_error.c
@@ -5,6 +5,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_power_toggle.c b/tests/core/proto/test_proto_power_toggle.c
--- a/tests/core/proto/test_proto_power_toggle.c
+++ b/tests/core/proto/test_proto_power_toggle.c
@@ -6,6 +6,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_SEND_TO_DEVICE
diff --git a/tests/core/proto/test_proto_power_toggle_targets_to_device_fails.c b/tests/core/proto/test_proto_power_toggle_targets_to_device_fails.c
--- a/tests/core/proto/test_proto_power_toggle_targets_to_device_fails.c
+++ b/tests/core/proto/test_proto_power_toggle_targets_to_device_fails.c
@@ -6,6 +6,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_SEND_TO_DEVICE
diff --git a/tests/core/proto/test_proto_set_label.c b/tests/core/proto/test_proto_set_label.c
--- a/tests/core/proto/test_proto_set_label.c
+++ b/tests/core/proto/test_proto_set_label.c
@@ -5,6 +5,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_set_label_too_long.c b/tests/core/proto/test_proto_set_label_too_long.c
--- a/tests/core/proto/test_proto_set_label_too_long.c
+++ b/tests/core/proto/test_proto_set_label_too_long.c
@@ -5,6 +5,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_set_light_from_hsbk.c b/tests/core/proto/test_proto_set_light_from_hsbk.c
--- a/tests/core/proto/test_proto_set_light_from_hsbk.c
+++ b/tests/core/proto/test_proto_set_light_from_hsbk.c
@@ -7,6 +7,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c b/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
--- a/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
+++ b/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
@@ -7,6 +7,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_set_waveform.c b/tests/core/proto/test_proto_set_waveform.c
--- a/tests/core/proto/test_proto_set_waveform.c
+++ b/tests/core/proto/test_proto_set_waveform.c
@@ -7,6 +7,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_set_waveform_on_routing_error.c b/tests/core/proto/test_proto_set_waveform_on_routing_error.c
--- a/tests/core/proto/test_proto_set_waveform_on_routing_error.c
+++ b/tests/core/proto/test_proto_set_waveform_on_routing_error.c
@@ -7,6 +7,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_RESPONSE
diff --git a/tests/core/proto/test_proto_tag_create.c b/tests/core/proto/test_proto_tag_create.c
--- a/tests/core/proto/test_proto_tag_create.c
+++ b/tests/core/proto/test_proto_tag_create.c
@@ -8,6 +8,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_tag_create_lifx_gw_tag_ids_full.c b/tests/core/proto/test_proto_tag_create_lifx_gw_tag_ids_full.c
--- a/tests/core/proto/test_proto_tag_create_lifx_gw_tag_ids_full.c
+++ b/tests/core/proto/test_proto_tag_create_lifx_gw_tag_ids_full.c
@@ -8,6 +8,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_CLIENT_SEND_ERROR
diff --git a/tests/core/proto/test_proto_tag_update.c b/tests/core/proto/test_proto_tag_update.c
--- a/tests/core/proto/test_proto_tag_update.c
+++ b/tests/core/proto/test_proto_tag_update.c
@@ -8,6 +8,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_untag.c b/tests/core/proto/test_proto_untag.c
--- a/tests/core/proto/test_proto_untag.c
+++ b/tests/core/proto/test_proto_untag.c
@@ -6,6 +6,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/proto/test_proto_untag_tag_does_not_exist.c b/tests/core/proto/test_proto_untag_tag_does_not_exist.c
--- a/tests/core/proto/test_proto_untag_tag_does_not_exist.c
+++ b/tests/core/proto/test_proto_untag_tag_does_not_exist.c
@@ -6,6 +6,7 @@
 #include "mock_event2.h"
 #include "mock_log.h"
 #include "mock_timer.h"
+#include "mock_wire_proto.h"
 #include "tests_utils.h"
 
 #define MOCKED_ROUTER_TARGETS_TO_DEVICES
diff --git a/tests/core/router/test_router_send_to_broadcast.c b/tests/core/router/test_router_send_to_broadcast.c
--- a/tests/core/router/test_router_send_to_broadcast.c
+++ b/tests/core/router/test_router_send_to_broadcast.c
@@ -10,7 +10,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     lgtd_tests_insert_mock_gateway(2);
     lgtd_tests_insert_mock_gateway(1);
diff --git a/tests/core/router/test_router_send_to_device.c b/tests/core/router/test_router_send_to_device.c
--- a/tests/core/router/test_router_send_to_device.c
+++ b/tests/core/router/test_router_send_to_device.c
@@ -9,7 +9,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway *gw_1 = lgtd_tests_insert_mock_gateway(1);
     struct lgtd_lifx_bulb *bulb_1 = lgtd_tests_insert_mock_bulb(gw_1, 1);
diff --git a/tests/core/router/test_router_send_to_invalid_targets.c b/tests/core/router/test_router_send_to_invalid_targets.c
--- a/tests/core/router/test_router_send_to_invalid_targets.c
+++ b/tests/core/router/test_router_send_to_invalid_targets.c
@@ -33,7 +33,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway *gw_1 = lgtd_tests_insert_mock_gateway(1);
     lgtd_tests_insert_mock_bulb(gw_1, 1);
diff --git a/tests/core/router/test_router_send_to_label.c b/tests/core/router/test_router_send_to_label.c
--- a/tests/core/router/test_router_send_to_label.c
+++ b/tests/core/router/test_router_send_to_label.c
@@ -9,7 +9,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway *gw_1 = lgtd_tests_insert_mock_gateway(1);
     struct lgtd_lifx_bulb *bulb_1 = lgtd_tests_insert_mock_bulb(gw_1, 1);
diff --git a/tests/core/router/test_router_send_to_tag.c b/tests/core/router/test_router_send_to_tag.c
--- a/tests/core/router/test_router_send_to_tag.c
+++ b/tests/core/router/test_router_send_to_tag.c
@@ -9,7 +9,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway *gw_1 = lgtd_tests_insert_mock_gateway(1);
     struct lgtd_lifx_gateway *gw_2 = lgtd_tests_insert_mock_gateway(2);
diff --git a/tests/core/router/test_router_targets_to_devices.c b/tests/core/router/test_router_targets_to_devices.c
--- a/tests/core/router/test_router_targets_to_devices.c
+++ b/tests/core/router/test_router_targets_to_devices.c
@@ -43,7 +43,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway *gw_1 = lgtd_tests_insert_mock_gateway(1);
     struct lgtd_lifx_gateway *gw_2 = lgtd_tests_insert_mock_gateway(2);
diff --git a/tests/core/tests_shims.c b/tests/core/tests_shims.c
--- a/tests/core/tests_shims.c
+++ b/tests/core/tests_shims.c
@@ -29,6 +29,17 @@
 
 struct event_base *lgtd_ev_base = MOCK_LGTD_EV_BASE;
 
+const int LGTD_LIFX_DEBRUIJN_SEQUENCE[64] = {
+    0, 47,  1, 56, 48, 27,  2, 60,
+   57, 49, 41, 37, 28, 16,  3, 61,
+   54, 58, 35, 52, 50, 42, 21, 44,
+   38, 32, 29, 23, 17, 11,  4, 62,
+   46, 55, 26, 59, 40, 36, 15, 53,
+   34, 51, 20, 43, 31, 22, 10, 45,
+   25, 39, 14, 33, 19, 30,  9, 24,
+   13, 18,  8, 12,  7,  6,  5, 63
+};
+
 void
 lgtd_cleanup(void)
 {
diff --git a/tests/lifx/gateway/CMakeLists.txt b/tests/lifx/gateway/CMakeLists.txt
--- a/tests/lifx/gateway/CMakeLists.txt
+++ b/tests/lifx/gateway/CMakeLists.txt
@@ -18,7 +18,6 @@
     ${LIGHTSD_SOURCE_DIR}/lifx/broadcast.c
     ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
     ${LIGHTSD_SOURCE_DIR}/lifx/discovery.c
-    ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
 )
 
 FUNCTION(ADD_GATEWAY_TEST TEST_SOURCE)
diff --git a/tests/lifx/gateway/test_gateway_allocate_tag_id.c b/tests/lifx/gateway/test_gateway_allocate_tag_id.c
--- a/tests/lifx/gateway/test_gateway_allocate_tag_id.c
+++ b/tests/lifx/gateway/test_gateway_allocate_tag_id.c
@@ -42,8 +42,6 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
-
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
 
diff --git a/tests/lifx/gateway/test_gateway_allocate_tag_id_from_lifx_network.c b/tests/lifx/gateway/test_gateway_allocate_tag_id_from_lifx_network.c
--- a/tests/lifx/gateway/test_gateway_allocate_tag_id_from_lifx_network.c
+++ b/tests/lifx/gateway/test_gateway_allocate_tag_id_from_lifx_network.c
@@ -43,7 +43,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_allocate_tag_id_no_tag_id_left.c b/tests/lifx/gateway/test_gateway_allocate_tag_id_no_tag_id_left.c
--- a/tests/lifx/gateway/test_gateway_allocate_tag_id_no_tag_id_left.c
+++ b/tests/lifx/gateway/test_gateway_allocate_tag_id_no_tag_id_left.c
@@ -43,7 +43,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_deallocate_tag_id_from_lifx_network.c b/tests/lifx/gateway/test_gateway_deallocate_tag_id_from_lifx_network.c
--- a/tests/lifx/gateway/test_gateway_deallocate_tag_id_from_lifx_network.c
+++ b/tests/lifx/gateway/test_gateway_deallocate_tag_id_from_lifx_network.c
@@ -25,7 +25,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_enqueue_packet.c b/tests/lifx/gateway/test_gateway_enqueue_packet.c
--- a/tests/lifx/gateway/test_gateway_enqueue_packet.c
+++ b/tests/lifx/gateway/test_gateway_enqueue_packet.c
@@ -7,7 +7,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_enqueue_packet_ring_full.c b/tests/lifx/gateway/test_gateway_enqueue_packet_ring_full.c
--- a/tests/lifx/gateway/test_gateway_enqueue_packet_ring_full.c
+++ b/tests/lifx/gateway/test_gateway_enqueue_packet_ring_full.c
@@ -7,7 +7,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_enqueue_packet_ring_wraparound.c b/tests/lifx/gateway/test_gateway_enqueue_packet_ring_wraparound.c
--- a/tests/lifx/gateway/test_gateway_enqueue_packet_ring_wraparound.c
+++ b/tests/lifx/gateway/test_gateway_enqueue_packet_ring_wraparound.c
@@ -7,7 +7,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_handle_ambient_light.c b/tests/lifx/gateway/test_gateway_handle_ambient_light.c
--- a/tests/lifx/gateway/test_gateway_handle_ambient_light.c
+++ b/tests/lifx/gateway/test_gateway_handle_ambient_light.c
@@ -10,7 +10,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_handle_bulb_label.c b/tests/lifx/gateway/test_gateway_handle_bulb_label.c
--- a/tests/lifx/gateway/test_gateway_handle_bulb_label.c
+++ b/tests/lifx/gateway/test_gateway_handle_bulb_label.c
@@ -10,7 +10,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw = { .last_pkt_at = 42 };
 
diff --git a/tests/lifx/gateway/test_gateway_handle_ip_firmware_info.c b/tests/lifx/gateway/test_gateway_handle_ip_firmware_info.c
--- a/tests/lifx/gateway/test_gateway_handle_ip_firmware_info.c
+++ b/tests/lifx/gateway/test_gateway_handle_ip_firmware_info.c
@@ -10,7 +10,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw = { .last_pkt_at = 42 };
 
diff --git a/tests/lifx/gateway/test_gateway_handle_ip_state.c b/tests/lifx/gateway/test_gateway_handle_ip_state.c
--- a/tests/lifx/gateway/test_gateway_handle_ip_state.c
+++ b/tests/lifx/gateway/test_gateway_handle_ip_state.c
@@ -10,7 +10,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw = { .last_pkt_at = 42 };
 
diff --git a/tests/lifx/gateway/test_gateway_handle_product_info.c b/tests/lifx/gateway/test_gateway_handle_product_info.c
--- a/tests/lifx/gateway/test_gateway_handle_product_info.c
+++ b/tests/lifx/gateway/test_gateway_handle_product_info.c
@@ -10,7 +10,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw = { .last_pkt_at = 42 };
 
diff --git a/tests/lifx/gateway/test_gateway_handle_runtime_info.c b/tests/lifx/gateway/test_gateway_handle_runtime_info.c
--- a/tests/lifx/gateway/test_gateway_handle_runtime_info.c
+++ b/tests/lifx/gateway/test_gateway_handle_runtime_info.c
@@ -10,7 +10,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw = { .last_pkt_at = 42 };
 
diff --git a/tests/lifx/gateway/test_gateway_handle_tag_labels.c b/tests/lifx/gateway/test_gateway_handle_tag_labels.c
--- a/tests/lifx/gateway/test_gateway_handle_tag_labels.c
+++ b/tests/lifx/gateway/test_gateway_handle_tag_labels.c
@@ -9,7 +9,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_handle_tags.c b/tests/lifx/gateway/test_gateway_handle_tags.c
--- a/tests/lifx/gateway/test_gateway_handle_tags.c
+++ b/tests/lifx/gateway/test_gateway_handle_tags.c
@@ -10,7 +10,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_update_tag_refcounts.c b/tests/lifx/gateway/test_gateway_update_tag_refcounts.c
--- a/tests/lifx/gateway/test_gateway_update_tag_refcounts.c
+++ b/tests/lifx/gateway/test_gateway_update_tag_refcounts.c
@@ -7,7 +7,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_write_callback.c b/tests/lifx/gateway/test_gateway_write_callback.c
--- a/tests/lifx/gateway/test_gateway_write_callback.c
+++ b/tests/lifx/gateway/test_gateway_write_callback.c
@@ -45,7 +45,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_write_callback_clears_ring_full_flag.c b/tests/lifx/gateway/test_gateway_write_callback_clears_ring_full_flag.c
--- a/tests/lifx/gateway/test_gateway_write_callback_clears_ring_full_flag.c
+++ b/tests/lifx/gateway/test_gateway_write_callback_clears_ring_full_flag.c
@@ -45,7 +45,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_write_callback_last_packet_on_ring.c b/tests/lifx/gateway/test_gateway_write_callback_last_packet_on_ring.c
--- a/tests/lifx/gateway/test_gateway_write_callback_last_packet_on_ring.c
+++ b/tests/lifx/gateway/test_gateway_write_callback_last_packet_on_ring.c
@@ -44,7 +44,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_write_callback_partial_write.c b/tests/lifx/gateway/test_gateway_write_callback_partial_write.c
--- a/tests/lifx/gateway/test_gateway_write_callback_partial_write.c
+++ b/tests/lifx/gateway/test_gateway_write_callback_partial_write.c
@@ -52,7 +52,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/gateway/test_gateway_write_callback_ring_wraparound.c b/tests/lifx/gateway/test_gateway_write_callback_ring_wraparound.c
--- a/tests/lifx/gateway/test_gateway_write_callback_ring_wraparound.c
+++ b/tests/lifx/gateway/test_gateway_write_callback_ring_wraparound.c
@@ -45,7 +45,7 @@
 int
 main(void)
 {
-    lgtd_lifx_wire_load_packet_info_map();
+    lgtd_lifx_wire_setup();
 
     struct lgtd_lifx_gateway gw;
     memset(&gw, 0, sizeof(gw));
diff --git a/tests/lifx/mock_wire_proto.h b/tests/lifx/mock_wire_proto.h
new file mode 100644
--- /dev/null
+++ b/tests/lifx/mock_wire_proto.h
@@ -0,0 +1,395 @@
+#pragma once
+
+const union lgtd_lifx_target LGTD_LIFX_UNSPEC_TARGET = { .tags = 0 };
+
+#ifndef MOCKED_LGTD_LIFX_WIRE_WAVEFORM_STRING_ID_TO_TYPE
+enum lgtd_lifx_waveform_type
+lgtd_lifx_wire_waveform_string_id_to_type(const char *s, int len)
+{
+    (void)s;
+    (void)len;
+    return LGTD_LIFX_WAVEFORM_INVALID;
+}
+#endif
+
+#ifndef MOCKED_LGTD_LIFX_WIRE_NULL_PACKET_ENCODER_DECODER
+static void
+lgtd_lifx_wire_null_packet_encoder_decoder(void *pkt)
+{
+    (void)pkt;
+}
+
+static void
+lgtd_lifx_wire_null_packet_handler(struct lgtd_lifx_gateway *gw,
+                                   const struct lgtd_lifx_packet_header *hdr,
+                                   const void *pkt)
+{
+    (void)gw;
+    (void)hdr;
+    (void)pkt;
+}
+
+const struct lgtd_lifx_packet_info *
+lgtd_lifx_wire_get_packet_info(enum lgtd_lifx_packet_type packet_type)
+{
+#define UNIMPLEMENTED                                       \
+    .decode = lgtd_lifx_wire_null_packet_encoder_decoder,   \
+    .encode = lgtd_lifx_wire_null_packet_encoder_decoder,   \
+    .handle = lgtd_lifx_wire_null_packet_handler
+
+    static const struct lgtd_lifx_packet_info packet_table[] = {
+        // Gateway packets:
+        {
+            UNIMPLEMENTED,
+            .name = "GET_PAN_GATEWAY",
+            .type = LGTD_LIFX_GET_PAN_GATEWAY
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "PAN_GATEWAY",
+            .type = LGTD_LIFX_PAN_GATEWAY,
+            .size = sizeof(struct lgtd_lifx_packet_pan_gateway)
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_TAG_LABELS",
+            .type = LGTD_LIFX_SET_TAG_LABELS,
+            .size = sizeof(struct lgtd_lifx_packet_tag_labels),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_TAG_LABELS",
+            .type = LGTD_LIFX_GET_TAG_LABELS,
+            .size = sizeof(struct lgtd_lifx_packet_tags),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "TAG_LABELS",
+            .type = LGTD_LIFX_TAG_LABELS,
+            .size = sizeof(struct lgtd_lifx_packet_tag_labels)
+        },
+        // Bulb packets:
+        {
+            UNIMPLEMENTED,
+            .name = "SET_LIGHT_COLOR",
+            .type = LGTD_LIFX_SET_LIGHT_COLOR,
+            .size = sizeof(struct lgtd_lifx_packet_light_color)
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_WAVEFORM",
+            .type = LGTD_LIFX_SET_WAVEFORM,
+            .size = sizeof(struct lgtd_lifx_packet_waveform),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_LIGHT_STATUS",
+            .type = LGTD_LIFX_GET_LIGHT_STATE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "LIGHT_STATUS",
+            .type = LGTD_LIFX_LIGHT_STATUS,
+            .size = sizeof(struct lgtd_lifx_packet_light_status),
+        },
+        {
+            UNIMPLEMENTED,
+            .size = sizeof(struct lgtd_lifx_packet_power_state),
+            .name = "SET_POWER_STATE",
+            .type = LGTD_LIFX_SET_POWER_STATE,
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "POWER_STATE",
+            .type = LGTD_LIFX_POWER_STATE,
+            .size = sizeof(struct lgtd_lifx_packet_power_state),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_TAGS",
+            .type = LGTD_LIFX_SET_TAGS,
+            .size = sizeof(struct lgtd_lifx_packet_tags),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "TAGS",
+            .type = LGTD_LIFX_TAGS,
+            .size = sizeof(struct lgtd_lifx_packet_tags),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_MESH_INFO",
+            .type = LGTD_LIFX_GET_MESH_INFO
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "MESH_INFO",
+            .type = LGTD_LIFX_MESH_INFO,
+            .size = sizeof(struct lgtd_lifx_packet_ip_state),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_MESH_FIRMWARE",
+            .type = LGTD_LIFX_GET_MESH_FIRMWARE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "MESH_FIRMWARE",
+            .type = LGTD_LIFX_MESH_FIRMWARE,
+            .size = sizeof(struct lgtd_lifx_packet_ip_firmware_info),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_WIFI_INFO",
+            .type = LGTD_LIFX_GET_WIFI_INFO,
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "WIFI_INFO",
+            .type = LGTD_LIFX_WIFI_INFO,
+            .size = sizeof(struct lgtd_lifx_packet_ip_state),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_WIFI_FIRMWARE_STATE",
+            .type = LGTD_LIFX_GET_WIFI_FIRMWARE_STATE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "WIFI_FIRMWARE_STATE",
+            .type = LGTD_LIFX_WIFI_FIRMWARE_STATE,
+            .size = sizeof(struct lgtd_lifx_packet_ip_firmware_info),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_VERSION",
+            .type = LGTD_LIFX_GET_VERSION
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "VERSION_STATE",
+            .type = LGTD_LIFX_VERSION_STATE,
+            .size = sizeof(struct lgtd_lifx_packet_product_info),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_INFO",
+            .type = LGTD_LIFX_GET_INFO
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "INFO_STATE",
+            .type = LGTD_LIFX_INFO_STATE,
+            .size = sizeof(struct lgtd_lifx_packet_runtime_info),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_BULB_LABEL",
+            .type = LGTD_LIFX_SET_BULB_LABEL,
+            .size = sizeof(struct lgtd_lifx_packet_label)
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "BULB_LABEL",
+            .type = LGTD_LIFX_BULB_LABEL,
+            .size = sizeof(struct lgtd_lifx_packet_label),
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_AMBIENT_LIGHT",
+            .type = LGTD_LIFX_GET_AMBIENT_LIGHT
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "STATE_AMBIENT_LIGHT",
+            .type = LGTD_LIFX_STATE_AMBIENT_LIGHT,
+            .size = sizeof(struct lgtd_lifx_packet_ambient_light),
+        },
+        // Unimplemented but "known" packets
+        {
+            UNIMPLEMENTED,
+            .name = "GET_TIME",
+            .type = LGTD_LIFX_GET_TIME
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_TIME",
+            .type = LGTD_LIFX_SET_TIME
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "TIME_STATE",
+            .type = LGTD_LIFX_TIME_STATE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_RESET_SWITCH_STATE",
+            .type = LGTD_LIFX_GET_RESET_SWITCH_STATE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "RESET_SWITCH_STATE",
+            .type = LGTD_LIFX_RESET_SWITCH_STATE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_BULB_LABEL",
+            .type = LGTD_LIFX_GET_BULB_LABEL
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_MCU_RAIL_VOLTAGE",
+            .type = LGTD_LIFX_GET_MCU_RAIL_VOLTAGE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "MCU_RAIL_VOLTAGE",
+            .type = LGTD_LIFX_MCU_RAIL_VOLTAGE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "REBOOT",
+            .type = LGTD_LIFX_REBOOT
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_FACTORY_TEST_MODE",
+            .type = LGTD_LIFX_SET_FACTORY_TEST_MODE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "DISABLE_FACTORY_TEST_MODE",
+            .type = LGTD_LIFX_DISABLE_FACTORY_TEST_MODE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "ACK",
+            .type = LGTD_LIFX_ACK
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "ECHO_REQUEST",
+            .type = LGTD_LIFX_ECHO_REQUEST
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "ECHO_RESPONSE",
+            .type = LGTD_LIFX_ECHO_RESPONSE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_DIM_ABSOLUTE",
+            .type = LGTD_LIFX_SET_DIM_ABSOLUTE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_DIM_RELATIVE",
+            .type = LGTD_LIFX_SET_DIM_RELATIVE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_WIFI_STATE",
+            .type = LGTD_LIFX_GET_WIFI_STATE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_WIFI_STATE",
+            .type = LGTD_LIFX_SET_WIFI_STATE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "WIFI_STATE",
+            .type = LGTD_LIFX_WIFI_STATE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_ACCESS_POINTS",
+            .type = LGTD_LIFX_GET_ACCESS_POINTS
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "SET_ACCESS_POINTS",
+            .type = LGTD_LIFX_SET_ACCESS_POINTS
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "ACCESS_POINT",
+            .type = LGTD_LIFX_ACCESS_POINT
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "GET_DIMMER_VOLTAGE",
+            .type = LGTD_LIFX_GET_DIMMER_VOLTAGE
+        },
+        {
+            UNIMPLEMENTED,
+            .name = "STATE_DIMMER_VOLTAGE",
+            .type = LGTD_LIFX_STATE_DIMMER_VOLTAGE
+        }
+    };
+
+    for (int i = 0; i != sizeof(packet_table) / sizeof(packet_table[0]); i++) {
+        if (packet_table[i].type == packet_type) {
+            return &packet_table[i];
+        }
+    }
+
+    return NULL;
+}
+#endif
+
+#ifndef MOCKED_LGTD_LIFX_WIRE_SETUP_HEADER
+const struct lgtd_lifx_packet_info *
+lgtd_lifx_wire_setup_header(struct lgtd_lifx_packet_header *hdr,
+                            enum lgtd_lifx_target_type target_type,
+                            union lgtd_lifx_target target,
+                            const uint8_t *site,
+                            enum lgtd_lifx_packet_type packet_type)
+{
+    (void)hdr;
+    (void)target_type;
+    (void)target;
+    (void)site;
+    return lgtd_lifx_wire_get_packet_info(packet_type);
+}
+#endif
+
+#ifndef MOCKED_LGTD_LIFX_WIRE_DECODE_HEADER
+void
+lgtd_lifx_wire_decode_header(struct lgtd_lifx_packet_header *hdr)
+{
+    (void)hdr;
+}
+#endif
+
+#ifndef MOCKED_LGTD_LIFX_WIRE_ENCODE_LIGHT_COLOR
+void
+lgtd_lifx_wire_encode_light_color(struct lgtd_lifx_packet_light_color *pkt)
+{
+    (void)pkt;
+}
+#endif
+
+#ifndef MOCKED_LGTD_LIFX_WIRE_ENCODE_TAG_LABELS
+void
+lgtd_lifx_wire_encode_tag_labels(struct lgtd_lifx_packet_tag_labels *pkt)
+{
+    (void)pkt;
+}
+#endif
+
+#ifndef MOCKED_LGTD_LIFX_WIRE_ENCODE_TAGS
+void
+lgtd_lifx_wire_encode_tags(struct lgtd_lifx_packet_tags *pkt)
+{
+    (void)pkt;
+}
+#endif
+
+#ifndef MOCKED_LGTD_LIFX_WIRE_ENCODE_WAVEFORM
+void
+lgtd_lifx_wire_encode_waveform(struct lgtd_lifx_packet_waveform *pkt)
+{
+    (void)pkt;
+}
+#endif
diff --git a/tests/lifx/tests_shims.c b/tests/lifx/tests_shims.c
--- a/tests/lifx/tests_shims.c
+++ b/tests/lifx/tests_shims.c
@@ -15,6 +15,17 @@
 
 struct event_base *lgtd_ev_base = NULL;
 
+const int LGTD_LIFX_DEBRUIJN_SEQUENCE[64] = {
+    0, 47,  1, 56, 48, 27,  2, 60,
+   57, 49, 41, 37, 28, 16,  3, 61,
+   54, 58, 35, 52, 50, 42, 21, 44,
+   38, 32, 29, 23, 17, 11,  4, 62,
+   46, 55, 26, 59, 40, 36, 15, 53,
+   34, 51, 20, 43, 31, 22, 10, 45,
+   25, 39, 14, 33, 19, 30,  9, 24,
+   13, 18,  8, 12,  7,  6,  5, 63
+};
+
 void
 lgtd_cleanup(void)
 {
diff --git a/tests/lifx/wire_proto/CMakeLists.txt b/tests/lifx/wire_proto/CMakeLists.txt
--- a/tests/lifx/wire_proto/CMakeLists.txt
+++ b/tests/lifx/wire_proto/CMakeLists.txt
@@ -5,9 +5,7 @@
 
 ADD_CORE_LIBRARY(
     test_lifx_wire_proto_core STATIC
-    ${LIGHTSD_SOURCE_DIR}/core/stats.c
     ${LIGHTSD_SOURCE_DIR}/core/utils.c
-    ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
 )
 
 FUNCTION(ADD_WIRE_PROTO_TEST TEST_SOURCE)
diff --git a/tests/lifx/wire_proto/test_wire_proto_encode_decode_header.c b/tests/lifx/wire_proto/test_wire_proto_encode_decode_header.c
--- a/tests/lifx/wire_proto/test_wire_proto_encode_decode_header.c
+++ b/tests/lifx/wire_proto/test_wire_proto_encode_decode_header.c
@@ -2,6 +2,7 @@
 
 #include "wire_proto.c"
 
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "mock_log.h"
 
diff --git a/tests/lifx/wire_proto/test_wire_proto_waveform_table.c b/tests/lifx/wire_proto/test_wire_proto_waveform_table.c
--- a/tests/lifx/wire_proto/test_wire_proto_waveform_table.c
+++ b/tests/lifx/wire_proto/test_wire_proto_waveform_table.c
@@ -1,7 +1,7 @@
 #include "wire_proto.c"
 
+#include "mock_daemon.h"
 #include "mock_gateway.h"
-
 #include "mock_log.h"
 
 int
