# HG changeset patch
# Parent 848cc88992fca97c1f1b4167f413c5c276f6a71e
Use __attribute__((format (printf...))) and fix warnings/errors

diff --git a/core/bulb.c b/core/bulb.c
--- a/core/bulb.c
+++ b/core/bulb.c
@@ -89,7 +89,7 @@
     SLIST_REMOVE(&bulb->gw->bulbs, bulb, lifxd_bulb, link_by_gw);
     lifxd_info(
         "closed bulb \"%.*s\" on [%s]:%hu",
-        sizeof(bulb->state.label),
+        LIFXD_LABEL_SIZE,
         bulb->state.label,
         bulb->gw->ip_addr,
         bulb->gw->port
diff --git a/core/gateway.c b/core/gateway.c
--- a/core/gateway.c
+++ b/core/gateway.c
@@ -311,10 +311,10 @@
     lifxd_debug(
         "SET_LIGHT_STATE <-- [%s]:%hu - %s "
         "hue=%#hx, saturation=%#hx, brightness=%#hx, "
-        "kelvin=%d, dim=%#hx, power=%#hx, label=%.*s, tags=%#lx",
+        "kelvin=%d, dim=%#hx, power=%#hx, label=%.*s, tags=%#llx",
         gw->ip_addr, gw->port, lifxd_addrtoa(hdr->target.device_addr),
         pkt->hue, pkt->saturation, pkt->brightness, pkt->kelvin,
-        pkt->dim, pkt->power, sizeof(pkt->label), pkt->label, pkt->tags
+        pkt->dim, pkt->power, LIFXD_LABEL_SIZE, pkt->label, pkt->tags
     );
 
     struct lifxd_bulb *b = lifxd_gateway_get_or_open_bulb(
diff --git a/core/lifxd.h b/core/lifxd.h
--- a/core/lifxd.h
+++ b/core/lifxd.h
@@ -29,6 +29,10 @@
 
 #pragma once
 
+#ifndef __attribute__
+# define __atttribute__(e)
+#endif
+
 #define LIFXD_ABS(v) ((v) >= 0 ? (v) : (v) * -1)
 #define LIFXD_ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))
 #define LIFXD_MSECS_TO_TIMEVAL(v) { \
@@ -59,14 +63,16 @@
 void lifxd_sockaddrtoa(const struct sockaddr_storage *, char *buf, int buflen);
 short lifxd_sockaddrport(const struct sockaddr_storage *);
 
-void _lifxd_err(void (*)(int, const char *, ...), int, const char *, ...);
+void _lifxd_err(void (*)(int, const char *, ...), int, const char *, ...)
+    __attribute__((format(printf, 3, 4)));
 #define lifxd_err(eval, fmt, ...) _lifxd_err(err, (eval), (fmt), ##__VA_ARGS__);
 #define lifxd_errx(eval, fmt, ...) _lifxd_err(errx, (eval), (fmt), ##__VA_ARGS__);
-void _lifxd_warn(void (*)(const char *, va_list), const char *, ...);
+void _lifxd_warn(void (*)(const char *, va_list), const char *, ...)
+    __attribute__((format(printf, 2, 3)));
 #define lifxd_warn(fmt, ...) _lifxd_warn(vwarn, (fmt), ##__VA_ARGS__);
 #define lifxd_warnx(fmt, ...) _lifxd_warn(vwarnx, (fmt), ##__VA_ARGS__);
-void lifxd_info(const char *, ...);
-void lifxd_debug(const char *, ...);
+void lifxd_info(const char *, ...) __attribute__((format(printf, 1, 2)));
+void lifxd_debug(const char *, ...) __attribute__((format(printf, 1, 2)));
 void lifxd_libevent_log(int, const char *);
 
 void lifxd_cleanup(void);
diff --git a/core/log.c b/core/log.c
--- a/core/log.c
+++ b/core/log.c
@@ -181,10 +181,10 @@
 lifxd_libevent_log(int severity, const char *msg)
 {
     switch (severity) {
-    case EVENT_LOG_DEBUG:   lifxd_debug(msg);   break;
-    case EVENT_LOG_MSG:     lifxd_info(msg);    break;
-    case EVENT_LOG_WARN:    lifxd_warnx(msg)    break;
-    case EVENT_LOG_ERR:     lifxd_warnx(msg);   break;
-    default:                                    break;
+    case EVENT_LOG_DEBUG:   lifxd_debug("%s", msg); break;
+    case EVENT_LOG_MSG:     lifxd_info("%s", msg);  break;
+    case EVENT_LOG_WARN:    lifxd_warnx("%s", msg)  break;
+    case EVENT_LOG_ERR:     lifxd_warnx("%s", msg); break;
+    default:                                        break;
     }
 }
diff --git a/core/timer.c b/core/timer.c
--- a/core/timer.c
+++ b/core/timer.c
@@ -98,10 +98,8 @@
         int light_state_lag = now - bulb->last_light_state_at;
         if (light_state_lag >= LIFXD_TIMER_DEVICE_TIMEOUT_MSECS) {
             lifxd_info(
-                "closing bulb \"%.s\" that hasn't been updated for %dms",
-                sizeof(bulb->state.label),
-                bulb->state.label,
-                light_state_lag
+                "closing bulb \"%.*s\" that hasn't been updated for %dms",
+                LIFXD_LABEL_SIZE, bulb->state.label, light_state_lag
             );
             lifxd_bulb_close(bulb);
             start_discovery = true;
