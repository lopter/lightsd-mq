# HG changeset patch
# Parent 0000000000000000000000000000000000000000

diff --git a/.hgignore b/.hgignore
new file mode 100644
--- /dev/null
+++ b/.hgignore
@@ -0,0 +1,2 @@
+.*\.sw[p-z]$
+^build
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,26 @@
+CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
+
+PROJECT(LIFXD C)
+
+SET(CPACK_PACKAGE_VERSION_MAJOR "0")
+SET(CPACK_PACKAGE_VERSION_MINOR "0")
+SET(CPACK_PACKAGE_VERSION_PATCH "1")
+SET(LIFXD_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
+
+MESSAGE(STATUS "CMake version: ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}")
+MESSAGE(STATUS "lifxd version: ${LIFXD_VERSION}")
+MESSAGE(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
+MESSAGE(STATUS "System: ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION}")
+MESSAGE(STATUS "Install prefix: ${CMAKE_INSTALL_PREFIX}")
+MESSAGE(STATUS "Source directory: ${LIFXD_SOURCE_DIR}")
+
+SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${LIFXD_SOURCE_DIR}/CMakeScripts)
+
+SET(CMAKE_C_FLAGS "-pipe -Wextra -Wall -Wstrict-prototypes")
+
+INCLUDE_DIRECTORIES(
+    ${LIFXD_SOURCE_DIR}/core
+    ${LIFXD_BINARY_DIR}/core
+)
+
+ADD_SUBDIRECTORY(core)
diff --git a/core/CMakeLists.txt b/core/CMakeLists.txt
new file mode 100644
--- /dev/null
+++ b/core/CMakeLists.txt
@@ -0,0 +1,7 @@
+CONFIGURE_FILE(version.h.in ${CMAKE_CURRENT_BINARY_DIR}/version.h)
+
+ADD_EXECUTABLE(
+    lifxd
+    lifxd.c
+    log.c
+)
diff --git a/core/lifxd.c b/core/lifxd.c
new file mode 100644
--- /dev/null
+++ b/core/lifxd.c
@@ -0,0 +1,71 @@
+#include <errno.h>
+#include <getopt.h>
+#include <stdbool.h>
+#include <stdlib.h>
+
+#include "lifxd.h"
+#include "version.h"
+
+struct lifxd_opts lifxd_opts = {
+    .daemon = true,
+    .master_host = NULL,
+    .master_port = 0, 
+    .verbosity = LIFXD_DEBUG
+}; 
+
+void
+lifxd_cleanup(void)
+{
+}
+
+int
+main(int argc, char *argv[])
+{
+    static const struct option opts[] = {
+        {"daemon",      no_argument,       NULL, 'd'},
+        {"master-host", required_argument, NULL, 'h'},
+        {"master-port", required_argument, NULL, 'p'},
+        {"verbosity",   required_argument, NULL, 'v'},
+        {NULL,          0,                 NULL, 0}
+    };
+
+    for (int rv = getopt_long(argc, argv, "dh:p:v:", opts, NULL);
+         rv != -1;
+         rv = getopt_long(argc, argv, "dh:p:v:", opts, NULL)) {
+        switch (rv) {
+        case 'd':
+            lifxd_opts.daemon = true;
+            break ;
+        case 'h':
+            lifxd_opts.master_host = optarg;
+            break ;
+        case 'p':
+            errno = 0;
+            long port = strtol(optarg, NULL, 10);
+            if (!errno && port <= UINT16_MAX)
+                lifxd_opts.master_port = port;
+            else
+                lifxd_err(
+                    1, "The master port must be between 0 and %d", UINT16_MAX
+                );
+            break ;
+        case 'v':
+            const char *verbose_levels[] = { "debug", "info", "warning", "error" };
+            int i = 0;
+            for (i; i != LIFXD_ARRAY_SIZE(verbose_levels); i++) {
+                if (optarg == verbose_levels[i]) {
+                    lifxd_opts.verbosity = i;
+                    break ;
+                }
+            }
+            if (i == LIFXD_ARRAY_SIZE(verbose_levels))
+                lifxd_err(1, "Unknown verbosity level: %s", optarg);
+            break ;
+        }
+    }
+
+    argc -= optind;
+    argv += optind;
+
+    return 0;
+}
diff --git a/core/lifxd.h b/core/lifxd.h
new file mode 100644
--- /dev/null
+++ b/core/lifxd.h
@@ -0,0 +1,26 @@
+#pragma once
+
+#define LIFXD_ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))
+
+enum lifxd_verbosity {
+    LIFXD_DEBUG = 0,
+    LIFXD_INFO,
+    LIFXD_WARN,
+    LIFXD_ERR
+};
+
+struct lifxd_opts {
+    bool                    daemon;
+    const char              *master_host;
+    uint16_t                master_port;
+    enum lifxd_verbosity    verbosity;
+};
+
+extern struct lifxd_opts lifxd_opts;
+
+void lifxd_err(int, const char *, ...);
+void lifxd_warn(const char *, ...);
+void lifxd_info(const char *, ...);
+void lifxd_debug(const char *, ...);
+
+void lifxd_cleanup(void);
diff --git a/core/log.c b/core/log.c
new file mode 100644
--- /dev/null
+++ b/core/log.c
@@ -0,0 +1,57 @@
+#include <err.h>
+#include <errno.h>
+#include <stdarg.h>
+#include <stdbool.h>
+#include <stdio.h>
+
+#include "lifxd.h"
+
+void
+lifxd_err(int eval, const char *fmt, ...)
+{
+    va_list ap;
+    va_start(ap, fmt);
+    int errsave = errno;
+    lifxd_cleanup();
+    errno = errsave;
+    fprintf(stderr, "[ERR] lifxd: ");
+    verr(eval, fmt, ap);
+}
+
+void
+lifxd_warn(const char *fmt, ...)
+{
+    if (lifxd_opts.verbosity <= LIFXD_WARN) {
+        va_list ap;
+        va_start(ap, fmt);
+        fprintf(stderr, "[WARN] lifxd: ");
+        vwarn(fmt, ap);
+        va_end(ap);
+    }
+}
+
+void
+lifxd_info(const char *fmt, ...)
+{
+    if (lifxd_opts.verbosity <= LIFXD_INFO) {
+        va_list ap;
+        va_start(ap, fmt);
+        fprintf(stderr, "[INFO] lifxd: ");
+        vfprintf(stderr, fmt, ap);
+        va_end(ap);
+        fprintf(stderr, "\n");
+    }
+}
+
+void
+lifxd_debug(const char *fmt, ...)
+{
+    if (lifxd_opts.verbosity <= LIFXD_DEBUG) {
+        va_list ap;
+        va_start(ap, fmt);
+        fprintf(stderr, "[DEBUG] lifxd: ");
+        vfprintf(stderr, fmt, ap);
+        va_end(ap);
+        fprintf(stderr, "\n");
+    }
+}
diff --git a/core/version.h.in b/core/version.h.in
new file mode 100644
--- /dev/null
+++ b/core/version.h.in
@@ -0,0 +1,3 @@
+#pragma once
+
+const char LIFXD_VERSION[] = "@LIFXD_VERSION@";
