# HG changeset patch
# Parent  7c1d6c519fbaa88658df72e6cfb0c9a24a2fb5e9
Fix broadcast and multicast (aka tagged) routing to LIFX bulbs

diff --git a/lifx/wire_proto.c b/lifx/wire_proto.c
--- a/lifx/wire_proto.c
+++ b/lifx/wire_proto.c
@@ -226,19 +226,19 @@
 
     switch (target_type) {
     case LGTD_LIFX_TARGET_SITE:
+    case LGTD_LIFX_TARGET_ALL_DEVICES:
         hdr->protocol.tagged = true;
+        hdr->protocol.addressable = true;
         break;
     case LGTD_LIFX_TARGET_TAGS:
         hdr->protocol.tagged = true;
+        hdr->protocol.addressable = true;
         hdr->target.tags = target.tags;
         break;
     case LGTD_LIFX_TARGET_DEVICE:
         hdr->protocol.addressable = true;
         memcpy(hdr->target.device_addr, target.addr, LGTD_LIFX_ADDR_LENGTH);
         break;
-    case LGTD_LIFX_TARGET_ALL_DEVICES:
-        hdr->protocol.tagged = true;
-        break;
     }
 
     lgtd_lifx_wire_encode_header(hdr);
diff --git a/lifx/wire_proto.h b/lifx/wire_proto.h
--- a/lifx/wire_proto.h
+++ b/lifx/wire_proto.h
@@ -43,7 +43,8 @@
         //! LIFX internal use should be 0.
         uint16le_t  origin:2;
     }               protocol;
-    //! This seems to be for LIFX internal use only.
+    //! Here is what LIFXKit says about it, maybe it's related to zigbee:
+    //! Message source identifier from NAT table (Internal LIFX use)
     uint32le_t      source;
     union {
         //! All targeted tags ORed together.
diff --git a/tests/core/router/test_router_broadcast.c b/tests/core/router/test_router_broadcast.c
--- a/tests/core/router/test_router_broadcast.c
+++ b/tests/core/router/test_router_broadcast.c
@@ -32,7 +32,7 @@
         }
         const struct lgtd_lifx_packet_header *hdr;
         hdr = lgtd_tests_gw_pkt_queue[i].hdr;
-        if (!hdr->protocol.tagged || hdr->protocol.addressable) {
+        if (!hdr->protocol.tagged || !hdr->protocol.addressable) {
             lgtd_errx(1, "packet header doesn't have the right bits set");
         }
         if (hdr->target.tags != 0) {
