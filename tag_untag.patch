# HG changeset patch
# Parent  09ca1bf96d2b1c29a57e2373798673dbfff4a706
Add the ability to tag (group) or untag (ungroup) bulbs

diff --git a/core/jsonrpc.c b/core/jsonrpc.c
--- a/core/jsonrpc.c
+++ b/core/jsonrpc.c
@@ -950,6 +950,90 @@
     lgtd_proto_target_list_clear(&targets);
 }
 
+static void
+lgtd_jsonrpc_check_and_call_proto_tag_or_untag(struct lgtd_client *client,
+                                               void (*lgtd_proto_fn)(struct lgtd_client *,
+                                                          const struct lgtd_proto_target_list *,
+                                                          const char *))
+
+{
+    struct lgtd_jsonrpc_target_args {
+        const jsmntok_t *target;
+        int             target_ntokens;
+        const jsmntok_t *tag;
+    } params = { NULL, 0, NULL };
+    static const struct lgtd_jsonrpc_node schema[] = {
+        LGTD_JSONRPC_NODE(
+            "target",
+            offsetof(struct lgtd_jsonrpc_target_args, target),
+            offsetof(struct lgtd_jsonrpc_target_args, target_ntokens),
+            lgtd_jsonrpc_type_string_number_or_array,
+            false
+        ),
+        LGTD_JSONRPC_NODE(
+            "tag",
+            offsetof(struct lgtd_jsonrpc_target_args, tag),
+            -1,
+            lgtd_jsonrpc_type_string,
+            false
+        )
+    };
+
+    struct lgtd_jsonrpc_request *req = client->current_request;
+    bool ok = lgtd_jsonrpc_extract_and_validate_params_against_schema(
+        &params,
+        schema,
+        LGTD_ARRAY_SIZE(schema),
+        req->params,
+        req->params_ntokens,
+        client->json
+    );
+    if (!ok) {
+        lgtd_jsonrpc_send_error(
+            client, LGTD_JSONRPC_INVALID_PARAMS, "Invalid parameters"
+        );
+        return;
+    }
+
+    struct lgtd_proto_target_list targets = SLIST_HEAD_INITIALIZER(&targets);
+    ok = lgtd_jsonrpc_build_target_list(
+        &targets, client, params.target, params.target_ntokens
+    );
+    if (!ok) {
+        return;
+    }
+
+    char *tag = strndup(
+        &client->json[params.tag->start], LGTD_JSONRPC_TOKEN_LEN(params.tag)
+    );
+    if (!tag) {
+        lgtd_warn("can't allocate a tag");
+        lgtd_jsonrpc_send_error(
+            client, LGTD_JSONRPC_INTERNAL_ERROR, "Can't allocate memory"
+        );
+        goto error_strdup;
+    }
+
+    lgtd_proto_fn(client, &targets, tag);
+
+    free(tag);
+
+error_strdup:
+    lgtd_proto_target_list_clear(&targets);
+}
+
+static void
+lgtd_jsonrpc_check_and_call_tag(struct lgtd_client *client)
+{
+    return lgtd_jsonrpc_check_and_call_proto_tag_or_untag(client, lgtd_proto_tag);
+}
+
+static void
+lgtd_jsonrpc_check_and_call_untag(struct lgtd_client *client)
+{
+    return lgtd_jsonrpc_check_and_call_proto_tag_or_untag(client, lgtd_proto_untag);
+}
+
 void
 lgtd_jsonrpc_dispatch_request(struct lgtd_client *client, int parsed)
 {
@@ -974,6 +1058,14 @@
         LGTD_JSONRPC_METHOD(
             "get_light_state", 1, // t
             lgtd_jsonrpc_check_and_call_get_light_state
+        ),
+        LGTD_JSONRPC_METHOD(
+            "tag", 2, // t, tag
+            lgtd_jsonrpc_check_and_call_tag
+        ),
+        LGTD_JSONRPC_METHOD(
+            "untag", 2, // t, tag
+            lgtd_jsonrpc_check_and_call_untag
         )
     };
 
diff --git a/core/proto.c b/core/proto.c
--- a/core/proto.c
+++ b/core/proto.c
@@ -224,3 +224,30 @@
 
     lgtd_router_device_list_free(devices);
 }
+
+void lgtd_proto_tag(struct lgtd_client *client,
+                    const struct lgtd_proto_target_list *targets,
+                    const char *tag_label)
+{
+    assert(client);
+    assert(targets);
+    assert(tag_label);
+
+    struct lgtd_lifx_tag *tag = lgtd_lifx_tagging_find_tag(tag_label);
+
+    SEND_RESULT(client, true);
+}
+
+void lgtd_proto_untag(struct lgtd_client *client,
+                      const struct lgtd_proto_target_list *targets,
+                      const char *tag_label)
+{
+    assert(client);
+    assert(targets);
+    assert(tag_label);
+
+    struct lgtd_lifx_tag *tag = lgtd_lifx_tagging_find_tag(tag_label);
+    if (!tag) {
+        SEND_RESULT(client, true);
+    }
+}
diff --git a/core/proto.h b/core/proto.h
--- a/core/proto.h
+++ b/core/proto.h
@@ -39,3 +39,5 @@
 void lgtd_proto_power_on(struct lgtd_client *, const struct lgtd_proto_target_list *);
 void lgtd_proto_power_off(struct lgtd_client *, const struct lgtd_proto_target_list *);
 void lgtd_proto_get_light_state(struct lgtd_client *, const struct lgtd_proto_target_list *);
+void lgtd_proto_tag(struct lgtd_client *, const struct lgtd_proto_target_list *, const char *);
+void lgtd_proto_untag(struct lgtd_client *, const struct lgtd_proto_target_list *, const char *);
diff --git a/tests/core/jsonrpc/test_jsonrpc_utils.h b/tests/core/jsonrpc/test_jsonrpc_utils.h
--- a/tests/core/jsonrpc/test_jsonrpc_utils.h
+++ b/tests/core/jsonrpc/test_jsonrpc_utils.h
@@ -95,3 +95,27 @@
     (void)targets;
 }
 #endif
+
+#ifndef MOCKED_LGTD_TAG
+void
+lgtd_proto_tag(struct lgtd_client *client,
+               const struct lgtd_proto_target_list *targets,
+               const char *tag_label)
+{
+    (void)client;
+    (void)targets;
+    (void)tag_label;
+}
+#endif
+
+#ifndef MOCKED_LGTD_UNTAG
+void
+lgtd_proto_untag(struct lgtd_client *client,
+                 const struct lgtd_proto_target_list *targets,
+                 const char *tag_label)
+{
+    (void)client;
+    (void)targets;
+    (void)tag_label;
+}
+#endif
