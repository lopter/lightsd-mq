# HG changeset patch
# Parent  da1d06eec3d2fa35a9e3f8afc473e25c07224f33

diff --git a/README.rst b/README.rst
--- a/README.rst
+++ b/README.rst
@@ -32,8 +32,8 @@
 - tag/untag (group/ungroup bulbs together);
 - toggle (power on if off and vice-versa, coming up).
 
-The JSON-RPC interface works on top on IPv4/v6, over a command (named) pipe
-(coming up) and Unix sockets (coming up).
+The JSON-RPC interface works on top on IPv4/v6, over a command (named) pipe and
+Unix sockets (coming up).
 
 lightsd can target single or multiple bulbs at once:
 
diff --git a/core/CMakeLists.txt b/core/CMakeLists.txt
--- a/core/CMakeLists.txt
+++ b/core/CMakeLists.txt
@@ -15,6 +15,7 @@
 ADD_EXECUTABLE(
     lightsd
     client.c
+    daemon.c
     jsmn.c
     jsonrpc.c
     listen.c
diff --git a/core/client.c b/core/client.c
--- a/core/client.c
+++ b/core/client.c
@@ -34,6 +34,8 @@
 #include "jsonrpc.h"
 #include "client.h"
 #include "proto.h"
+#include "stats.h"
+#include "daemon.h"
 #include "lightsd.h"
 
 struct lgtd_client_list lgtd_clients = LIST_HEAD_INITIALIZER(&lgtd_clients);
@@ -44,6 +46,8 @@
     assert(client);
     assert(client->io);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(clients, -1);
+
     LIST_REMOVE(client, link);
     bufferevent_free(client->io);
     free(client);
@@ -217,6 +221,8 @@
 
     LIST_INSERT_HEAD(&lgtd_clients, client, link);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(clients, 1);
+
     return client;
 }
 
diff --git a/core/daemon.c b/core/daemon.c
new file mode 100644
--- /dev/null
+++ b/core/daemon.c
@@ -0,0 +1,155 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+//
+// This file is part of lighstd.
+//
+// lighstd is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// lighstd is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with lighstd.  If not, see <http://www.gnu.org/licenses/>.
+
+#include <sys/queue.h>
+#include <sys/tree.h>
+#include <sys/types.h>
+#include <endian.h>
+#include <fcntl.h>
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#if LGTD_HAVE_LIBBSD
+#include <bsd/bsd.h>
+#endif
+
+#include <event2/util.h>
+
+#include "time_monotonic.h"
+#include "lifx/wire_proto.h"
+#include "lifx/bulb.h"
+#include "lifx/gateway.h"
+#include "jsmn.h"
+#include "jsonrpc.h"
+#include "client.h"
+#include "listen.h"
+#include "daemon.h"
+#include "pipe.h"
+#include "stats.h"
+#include "lightsd.h"
+
+bool
+lgtd_daemon_unleash(void)
+{
+    if (chdir("/")) {
+        return false;
+    }
+
+    int null = open("/dev/null", O_RDWR);
+    if (null == -1) {
+        return false;
+    }
+
+    const int fds[] = { STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO };
+    for (int i = 0; i != LGTD_ARRAY_SIZE(fds); ++i) {
+        if (dup2(null, fds[i]) == -1) {
+            close(null);
+            return false;
+        }
+    }
+    close(null);
+
+#define SUMMON()  do {        \
+    switch (fork()) {       \
+        case 0:             \
+            break;          \
+        case -1:            \
+            return false;   \
+        default:            \
+            exit(0);        \
+    }                       \
+} while (0)
+
+    SUMMON(); // \_o< !
+    setsid();
+
+    SUMMON(); // \_o< !!
+
+    return true; // welcome to UNIX!
+}
+
+void
+lgtd_daemon_setup_proctitle(int argc, char *argv[], char *envp[])
+{
+#if LGTD_HAVE_LIBBSD
+    setproctitle_init(argc, argv, envp);
+    lgtd_daemon_update_proctitle();
+#else
+    (void)argc;
+    (void)argv;
+    (void)envp;
+#endif
+}
+
+void
+lgtd_daemon_update_proctitle(void)
+{
+#if LGTD_HAVE_PROCTITLE
+    char title[LGTD_DAEMON_TITLE_SIZE] = { 0 };
+    int i = 0;
+
+#define TITLE_APPEND(fmt, ...) do {                                         \
+    int n = snprintf((&title[i]), (sizeof(title) - i), (fmt), __VA_ARGS__); \
+    i = LGTD_MIN(i + n, (int)sizeof(title));                                \
+} while (0)
+
+#define PREFIX(fmt, ...) TITLE_APPEND(                              \
+    "%s" fmt, (i && title[i - 1] == ')' ? "; " : ""), __VA_ARGS__   \
+)
+
+#define ADD_ITEM(fmt, ...) TITLE_APPEND(                            \
+    "%s" fmt, (i && title[i - 1] != '(' ? ", " : ""), __VA_ARGS__   \
+)
+#define LOOP(list_type, list, elem_type, prefix, ...) do {    \
+    if (!list_type ## _EMPTY(list)) {                         \
+        PREFIX("%s(", prefix);                                \
+        elem_type *it;                                        \
+        list_type ## _FOREACH(it, list, link) {               \
+            ADD_ITEM(__VA_ARGS__);                            \
+        }                                                     \
+        TITLE_APPEND("%s", ")");                              \
+    }                                                         \
+} while (0)
+
+    LOOP(
+        SLIST, &lgtd_listeners, struct lgtd_listen,
+        "listening_on", "%s:[%s]", it->addr, it->port
+    );
+
+    LOOP(
+        SLIST, &lgtd_command_pipes, struct lgtd_command_pipe,
+        "command_pipes", "%s", it->path
+    );
+
+    if (!LIST_EMPTY(&lgtd_lifx_gateways)) {
+        PREFIX("lifx_gateways(found=%d)", LGTD_STATS_GET(gateways));
+    }
+
+    PREFIX(
+        "bulbs(found=%d, on=%d)",
+        LGTD_STATS_GET(bulbs), LGTD_STATS_GET(bulbs_powered_on)
+    );
+
+    PREFIX("clients(connected=%d)", LGTD_STATS_GET(clients));
+
+    setproctitle("%s", title);
+#endif
+}
diff --git a/core/daemon.h b/core/daemon.h
new file mode 100644
--- /dev/null
+++ b/core/daemon.h
@@ -0,0 +1,24 @@
+// Copyright (c) 2015, Louis Opter <kalessin@kalessin.fr>
+//
+// This file is part of lighstd.
+//
+// lighstd is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// lighstd is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with lighstd.  If not, see <http://www.gnu.org/licenses/>.
+
+#pragma once
+
+enum { LGTD_DAEMON_TITLE_SIZE = 2048 };
+
+bool lgtd_daemon_unleash(void); // \_o<
+void lgtd_daemon_setup_proctitle(int, char *[], char *[]);
+void lgtd_daemon_update_proctitle(void);
diff --git a/core/lightsd.c b/core/lightsd.c
--- a/core/lightsd.c
+++ b/core/lightsd.c
@@ -17,13 +17,11 @@
 
 #include <sys/queue.h>
 #include <sys/tree.h>
-#include <sys/types.h>
 #include <arpa/inet.h>
 #include <assert.h>
 #include <endian.h>
 #include <err.h>
 #include <errno.h>
-#include <fcntl.h>
 #include <getopt.h>
 #include <signal.h>
 #include <stdarg.h>
@@ -33,11 +31,6 @@
 #include <stdlib.h>
 #include <string.h>
 #include <strings.h>
-#include <unistd.h>
-
-#if LGTD_HAVE_LIBBSD
-#include <bsd/bsd.h>
-#endif
 
 #include <event2/event.h>
 #include <event2/event_struct.h>
@@ -54,6 +47,7 @@
 #include "client.h"
 #include "pipe.h"
 #include "listen.h"
+#include "daemon.h"
 #include "lightsd.h"
 
 struct lgtd_opts lgtd_opts = {
@@ -64,8 +58,6 @@
 
 struct event_base *lgtd_ev_base = NULL;
 
-const char *lgtd_binds;
-
 void
 lgtd_cleanup(void)
 {
@@ -151,57 +143,11 @@
     exit(0);
 }
 
-static bool
-lgtd_daemonize(void)
-{
-    if (chdir("/")) {
-        return false;
-    }
-
-    int null = open("/dev/null", O_RDWR);
-    if (null == -1) {
-        return false;
-    }
-
-    const int fds[] = { STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO };
-    for (int i = 0; i != LGTD_ARRAY_SIZE(fds); ++i) {
-        if (dup2(null, fds[i]) == -1) {
-            close(null);
-            return false;
-        }
-    }
-    close(null);
-
-#define FORK()  do {        \
-    switch (fork()) {       \
-        case 0:             \
-            break;          \
-        case -1:            \
-            return false;   \
-        default:            \
-            exit(0);        \
-    }                       \
-} while (0)
-
-    FORK();
-    setsid();
-
-    FORK();
-
-    return true;
-}
-
 int
 main(int argc, char *argv[], char *envp[])
 {
-    char binds[512] = { 0 };
-    lgtd_binds = binds;
+    lgtd_daemon_setup_proctitle(argc, argv, envp);
 
-#if LGTD_HAVE_LIBBSD
-    setproctitle_init(argc, argv, envp);
-#else
-    (void)envp;
-#endif
     lgtd_configure_libevent();
     lgtd_configure_signal_handling();
 
@@ -231,17 +177,10 @@
             if (!sep || !sep[1]) {
                 lgtd_usage(argv[0]);
             }
-            strncat(binds, optarg, LGTD_MIN(
-                sizeof(binds) - strlen(binds) - 1, strlen(optarg)
-            ));
-            strncat(binds, ", ", LGTD_MIN(
-                sizeof(binds) - strlen(binds) - 1, 2
-            ));
             *sep = '\0';
             if (!lgtd_listen_open(optarg, sep + 1)) {
                 exit(1);
             }
-            *sep = ':';
             break;
         case 'c':
             if (!lgtd_command_pipe_open(optarg)) {
@@ -278,12 +217,6 @@
         }
     }
 
-    binds[LGTD_MAX(strlen(binds) - 1, 0)] = '\0';
-    binds[LGTD_MAX(strlen(binds) - 2, 0)] = '\0';
-    if (binds[sizeof(binds) - 2]) {
-        memset(binds + sizeof(binds) - 4, '.', 3);
-    }
-
     argc -= optind;
     argv += optind;
 
@@ -292,7 +225,7 @@
         lgtd_err(1, "can't setup lightsd");
     }
 
-    if (!lgtd_opts.foreground && !lgtd_daemonize()) {
+    if (!lgtd_opts.foreground && !lgtd_daemon_unleash()) {
         lgtd_err(1, "can't fork to the background");
     }
 
diff --git a/core/lightsd.h b/core/lightsd.h
--- a/core/lightsd.h
+++ b/core/lightsd.h
@@ -47,7 +47,6 @@
     enum lgtd_verbosity verbosity;
 };
 
-extern const char *lgtd_binds;
 extern struct lgtd_opts lgtd_opts;
 extern struct event_base *lgtd_ev_base;
 
@@ -66,6 +65,5 @@
 void lgtd_info(const char *, ...) __attribute__((format(printf, 1, 2)));
 void lgtd_debug(const char *, ...) __attribute__((format(printf, 1, 2)));
 void lgtd_libevent_log(int, const char *);
-void lgtd_update_proctitle(void);
 
 void lgtd_cleanup(void);
diff --git a/core/listen.c b/core/listen.c
--- a/core/listen.c
+++ b/core/listen.c
@@ -30,6 +30,7 @@
 #include "jsonrpc.h"
 #include "client.h"
 #include "listen.h"
+#include "daemon.h"
 #include "lightsd.h"
 
 struct lgtd_listen_list lgtd_listeners =
@@ -69,6 +70,8 @@
         evconnlistener_free(listener->evlistener);
         free(listener);
     }
+
+    lgtd_daemon_update_proctitle();
 }
 
 bool
@@ -130,6 +133,8 @@
 
     evutil_freeaddrinfo(res);
 
+    lgtd_daemon_update_proctitle();
+
     return true;
 
 error:
diff --git a/core/listen.h b/core/listen.h
--- a/core/listen.h
+++ b/core/listen.h
@@ -17,6 +17,8 @@
 
 #pragma once
 
+struct evconnlistener;
+
 struct lgtd_listen {
     SLIST_ENTRY(lgtd_listen)    link;
     const char                  *addr;
@@ -25,5 +27,7 @@
 };
 SLIST_HEAD(lgtd_listen_list, lgtd_listen);
 
+extern struct lgtd_listen_list lgtd_listeners;
+
 bool lgtd_listen_open(const char *, const char *);
 void lgtd_listen_close_all(void);
diff --git a/core/log.c b/core/log.c
--- a/core/log.c
+++ b/core/log.c
@@ -180,17 +180,3 @@
     default:                                       break;
     }
 }
-
-void
-lgtd_update_proctitle(void)
-{
-#if LGTD_HAVE_PROCTITLE
-    setproctitle(
-        "listening_on(%s); lifx_gateways(found=%d); bulbs(found=%d, on=%d)",
-        lgtd_binds,
-        LGTD_STATS_GET(gateways),
-        LGTD_STATS_GET(bulbs),
-        LGTD_STATS_GET(bulbs_powered_on)
-    );
-#endif
-}
diff --git a/core/pipe.c b/core/pipe.c
--- a/core/pipe.c
+++ b/core/pipe.c
@@ -37,7 +37,7 @@
 #include "pipe.h"
 #include "lightsd.h"
 
-static struct lgtd_command_pipe_list lgtd_command_pipes =
+struct lgtd_command_pipe_list lgtd_command_pipes =
     SLIST_HEAD_INITIALIZER(&lgtd_command_pipes);
 
 static void
diff --git a/core/pipe.h b/core/pipe.h
--- a/core/pipe.h
+++ b/core/pipe.h
@@ -27,5 +27,7 @@
 };
 SLIST_HEAD(lgtd_command_pipe_list, lgtd_command_pipe);
 
+extern struct lgtd_command_pipe_list lgtd_command_pipes;
+
 bool lgtd_command_pipe_open(const char *);
 void lgtd_command_pipe_close_all(void);
diff --git a/core/stats.h b/core/stats.h
--- a/core/stats.h
+++ b/core/stats.h
@@ -21,13 +21,15 @@
     int gateways;
     int bulbs;
     int bulbs_powered_on;
+    int clients;
 };
 
 void lgtd_stats_add(int, int);
 int lgtd_stats_get(int);
 
 #define LGTD_STATS_GET(name) lgtd_stats_get(offsetof(struct lgtd_stats, name))
-#define LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(name, value) do {                        \
-    lgtd_stats_add(offsetof(struct lgtd_stats, name), (value)); \
-    lgtd_update_proctitle();                                    \
+
+#define LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(name, value) do {           \
+    lgtd_stats_add(offsetof(struct lgtd_stats, name), (value));         \
+    lgtd_daemon_update_proctitle();                                     \
 } while (0)
diff --git a/lifx/bulb.c b/lifx/bulb.c
--- a/lifx/bulb.c
+++ b/lifx/bulb.c
@@ -32,6 +32,7 @@
 #include "core/time_monotonic.h"
 #include "bulb.h"
 #include "gateway.h"
+#include "core/daemon.h"
 #include "core/stats.h"
 #include "core/lightsd.h"
 
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -45,6 +45,7 @@
 #include "core/proto.h"
 #include "core/router.h"
 #include "core/stats.h"
+#include "core/daemon.h"
 #include "core/lightsd.h"
 
 struct lgtd_lifx_gateway_list lgtd_lifx_gateways =
diff --git a/tests/core/daemon/CMakeLists.txt b/tests/core/daemon/CMakeLists.txt
new file mode 100644
--- /dev/null
+++ b/tests/core/daemon/CMakeLists.txt
@@ -0,0 +1,24 @@
+INCLUDE_DIRECTORIES(
+    ${CMAKE_CURRENT_SOURCE_DIR}
+    ${CMAKE_CURRENT_BINARY_DIR}
+)
+
+ADD_CORE_LIBRARY(
+    test_core_daemon STATIC
+    ${LIGHTSD_SOURCE_DIR}/core/log.c
+    ${LIGHTSD_SOURCE_DIR}/core/stats.c
+    ${LIGHTSD_SOURCE_DIR}/lifx/bulb.c
+    ${LIGHTSD_SOURCE_DIR}/lifx/wire_proto.c
+    ${LIGHTSD_SOURCE_DIR}/lifx/tagging.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/../tests_shims.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
+)
+
+FUNCTION(ADD_DAEMON_TEST TEST_SOURCE)
+    ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_core_daemon)
+ENDFUNCTION()
+
+FILE(GLOB TESTS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "test_*.c")
+FOREACH(TEST ${TESTS})
+    ADD_DAEMON_TEST(${TEST})
+ENDFOREACH()
diff --git a/tests/core/daemon/mock_pipe.h b/tests/core/daemon/mock_pipe.h
new file mode 100644
--- /dev/null
+++ b/tests/core/daemon/mock_pipe.h
@@ -0,0 +1,4 @@
+#pragma once
+
+struct lgtd_command_pipe_list lgtd_command_pipes =
+    SLIST_HEAD_INITIALIZER(&lgtd_command_pipes);
diff --git a/tests/core/daemon/test_daemon_update_proctitle.c b/tests/core/daemon/test_daemon_update_proctitle.c
new file mode 100644
--- /dev/null
+++ b/tests/core/daemon/test_daemon_update_proctitle.c
@@ -0,0 +1,92 @@
+#undef HAVE_LIBBSD
+#define setproctitle mock_setproctitle
+#include "daemon.c"
+
+#include "mock_gateway.h"
+#include "mock_pipe.h"
+
+#include "tests_utils.h"
+
+void mock_setproctitle(const char *fmt, ...)
+    __attribute__((format(printf, 1, 2)));
+
+const char *expected = "";
+int setproctitle_call_count = 0;
+
+void
+mock_setproctitle(const char *fmt, ...)
+{
+    if (strcmp(fmt, "%s")) {
+        errx(1, "unexepected format %s (expected %%s)", fmt);
+    }
+
+    va_list ap;
+    va_start(ap, fmt);
+    const char *title = va_arg(ap, const char *);
+    va_end(ap);
+
+    if (strcmp(title, expected)) {
+        errx(1, "unexpected title: %s (expected %s)", title, expected);
+    }
+
+    setproctitle_call_count++;
+}
+
+int
+main(void)
+{
+    expected = "bulbs(found=0, on=0); clients(connected=0)";
+    lgtd_daemon_update_proctitle();
+    if (setproctitle_call_count != 1) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    expected = (
+        "lifx_gateways(found=1); "
+        "bulbs(found=0, on=0); "
+        "clients(connected=0)"
+    );
+    struct lgtd_lifx_gateway *gw_1 = lgtd_tests_insert_mock_gateway(1);
+    if (setproctitle_call_count != 2) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    expected = (
+        "lifx_gateways(found=1); "
+        "bulbs(found=2, on=0); "
+        "clients(connected=0)"
+    );
+    struct lgtd_lifx_bulb *bulb_2 = lgtd_tests_insert_mock_bulb(gw_1, 2);
+    lgtd_tests_insert_mock_bulb(gw_1, 3);
+    lgtd_daemon_update_proctitle();
+    if (setproctitle_call_count != 3) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    expected = (
+        "listening_on(foobar.com:[1234]); "
+        "lifx_gateways(found=1); "
+        "bulbs(found=2, on=0); "
+        "clients(connected=0)"
+    );
+    lgtd_tests_insert_mock_listener("foobar.com", "1234");
+    lgtd_daemon_update_proctitle();
+    if (setproctitle_call_count != 4) {
+        errx(1, "setproctitle should have been called");
+    }
+
+    expected = (
+        "listening_on(foobar.com:[1234]); "
+        "lifx_gateways(found=1); "
+        "bulbs(found=2, on=1); "
+        "clients(connected=1)"
+    );
+    bulb_2->state.power = LGTD_LIFX_POWER_ON;
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(clients, 1);
+    if (setproctitle_call_count != 5) {
+        errx(1, "setproctitle should have been called");
+    }
+
+
+    return 0;
+}
diff --git a/tests/core/mock_daemon.h b/tests/core/mock_daemon.h
new file mode 100644
--- /dev/null
+++ b/tests/core/mock_daemon.h
@@ -0,0 +1,8 @@
+#pragma once
+
+#ifndef MOCKED_DAEMON_UPDATE_PROCTITLE
+void
+lgtd_daemon_update_proctitle(void)
+{
+}
+#endif
diff --git a/tests/core/proto/CMakeLists.txt b/tests/core/proto/CMakeLists.txt
--- a/tests/core/proto/CMakeLists.txt
+++ b/tests/core/proto/CMakeLists.txt
@@ -16,11 +16,11 @@
     ${CMAKE_CURRENT_SOURCE_DIR}/../tests_utils.c
 )
 
-FUNCTION(ADD_ROUTER_TEST TEST_SOURCE)
+FUNCTION(ADD_PROTO_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_core_proto)
 ENDFUNCTION()
 
 FILE(GLOB TESTS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "test_*.c")
 FOREACH(TEST ${TESTS})
-    ADD_ROUTER_TEST(${TEST})
+    ADD_PROTO_TEST(${TEST})
 ENDFOREACH()
diff --git a/tests/core/proto/test_proto_get_light_state.c b/tests/core/proto/test_proto_get_light_state.c
--- a/tests/core/proto/test_proto_get_light_state.c
+++ b/tests/core/proto/test_proto_get_light_state.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_get_light_state_empty_device_list.c b/tests/core/proto/test_proto_get_light_state_empty_device_list.c
--- a/tests/core/proto/test_proto_get_light_state_empty_device_list.c
+++ b/tests/core/proto/test_proto_get_light_state_empty_device_list.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_get_light_state_null_device_list.c b/tests/core/proto/test_proto_get_light_state_null_device_list.c
--- a/tests/core/proto/test_proto_get_light_state_null_device_list.c
+++ b/tests/core/proto/test_proto_get_light_state_null_device_list.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_power_off.c b/tests/core/proto/test_proto_power_off.c
--- a/tests/core/proto/test_proto_power_off.c
+++ b/tests/core/proto/test_proto_power_off.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_power_off_routing_error.c b/tests/core/proto/test_proto_power_off_routing_error.c
--- a/tests/core/proto/test_proto_power_off_routing_error.c
+++ b/tests/core/proto/test_proto_power_off_routing_error.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_power_on.c b/tests/core/proto/test_proto_power_on.c
--- a/tests/core/proto/test_proto_power_on.c
+++ b/tests/core/proto/test_proto_power_on.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_power_on_routing_error.c b/tests/core/proto/test_proto_power_on_routing_error.c
--- a/tests/core/proto/test_proto_power_on_routing_error.c
+++ b/tests/core/proto/test_proto_power_on_routing_error.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_set_light_from_hsbk.c b/tests/core/proto/test_proto_set_light_from_hsbk.c
--- a/tests/core/proto/test_proto_set_light_from_hsbk.c
+++ b/tests/core/proto/test_proto_set_light_from_hsbk.c
@@ -3,6 +3,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c b/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
--- a/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
+++ b/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
@@ -3,6 +3,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_set_waveform.c b/tests/core/proto/test_proto_set_waveform.c
--- a/tests/core/proto/test_proto_set_waveform.c
+++ b/tests/core/proto/test_proto_set_waveform.c
@@ -3,6 +3,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_set_waveform_on_routing_error.c b/tests/core/proto/test_proto_set_waveform_on_routing_error.c
--- a/tests/core/proto/test_proto_set_waveform_on_routing_error.c
+++ b/tests/core/proto/test_proto_set_waveform_on_routing_error.c
@@ -3,6 +3,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_tag_create.c b/tests/core/proto/test_proto_tag_create.c
--- a/tests/core/proto/test_proto_tag_create.c
+++ b/tests/core/proto/test_proto_tag_create.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #define MOCKED_LIFX_GATEWAY_SEND_TO_SITE
 #define MOCKED_LIFX_GATEWAY_ALLOCATE_TAG_ID
 #include "mock_gateway.h"
diff --git a/tests/core/proto/test_proto_tag_create_lifx_gw_tag_ids_full.c b/tests/core/proto/test_proto_tag_create_lifx_gw_tag_ids_full.c
--- a/tests/core/proto/test_proto_tag_create_lifx_gw_tag_ids_full.c
+++ b/tests/core/proto/test_proto_tag_create_lifx_gw_tag_ids_full.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #define MOCKED_LIFX_GATEWAY_SEND_TO_SITE
 #define MOCKED_LIFX_GATEWAY_ALLOCATE_TAG_ID
 #include "mock_gateway.h"
diff --git a/tests/core/proto/test_proto_tag_update.c b/tests/core/proto/test_proto_tag_update.c
--- a/tests/core/proto/test_proto_tag_update.c
+++ b/tests/core/proto/test_proto_tag_update.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #define MOCKED_LIFX_GATEWAY_SEND_TO_SITE
 #define MOCKED_LIFX_GATEWAY_ALLOCATE_TAG_ID
 #include "mock_gateway.h"
diff --git a/tests/core/proto/test_proto_untag.c b/tests/core/proto/test_proto_untag.c
--- a/tests/core/proto/test_proto_untag.c
+++ b/tests/core/proto/test_proto_untag.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/proto/test_proto_untag_tag_does_not_exist.c b/tests/core/proto/test_proto_untag_tag_does_not_exist.c
--- a/tests/core/proto/test_proto_untag_tag_does_not_exist.c
+++ b/tests/core/proto/test_proto_untag_tag_does_not_exist.c
@@ -1,6 +1,7 @@
 #include "proto.c"
 
 #include "mock_client_buf.h"
+#include "mock_daemon.h"
 #include "mock_gateway.h"
 #include "tests_utils.h"
 
diff --git a/tests/core/router/test_router_send_to_broadcast.c b/tests/core/router/test_router_send_to_broadcast.c
--- a/tests/core/router/test_router_send_to_broadcast.c
+++ b/tests/core/router/test_router_send_to_broadcast.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 
 #include "tests_router_utils.h"
diff --git a/tests/core/router/test_router_send_to_device.c b/tests/core/router/test_router_send_to_device.c
--- a/tests/core/router/test_router_send_to_device.c
+++ b/tests/core/router/test_router_send_to_device.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/router/test_router_send_to_invalid_targets.c b/tests/core/router/test_router_send_to_invalid_targets.c
--- a/tests/core/router/test_router_send_to_invalid_targets.c
+++ b/tests/core/router/test_router_send_to_invalid_targets.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/router/test_router_send_to_label.c b/tests/core/router/test_router_send_to_label.c
--- a/tests/core/router/test_router_send_to_label.c
+++ b/tests/core/router/test_router_send_to_label.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/router/test_router_send_to_tag.c b/tests/core/router/test_router_send_to_tag.c
--- a/tests/core/router/test_router_send_to_tag.c
+++ b/tests/core/router/test_router_send_to_tag.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/router/test_router_targets_to_devices.c b/tests/core/router/test_router_targets_to_devices.c
--- a/tests/core/router/test_router_targets_to_devices.c
+++ b/tests/core/router/test_router_targets_to_devices.c
@@ -1,5 +1,6 @@
 #include "router.c"
 
+#include "mock_daemon.h"
 #include "tests_utils.h"
 #include "tests_router_utils.h"
 
diff --git a/tests/core/tests_shims.h b/tests/core/tests_shims.h
new file mode 100644
--- /dev/null
+++ b/tests/core/tests_shims.h
@@ -0,0 +1,23 @@
+#pragma once
+
+struct lgtd_opts lgtd_opts = {
+    .foreground = false,
+    .log_timestamps = false,
+    .verbosity = LGTD_DEBUG
+};
+
+struct event_base *lgtd_ev_base = NULL;
+
+const char *lgtd_binds = NULL;
+
+void
+lgtd_cleanup(void)
+{
+}
+
+#ifndef MOCKED_DAEMON_UPDATE_PROCTITLE
+void
+lgtd_daemon_update_proctitle(void)
+{
+}
+#endif
diff --git a/tests/core/tests_utils.c b/tests/core/tests_utils.c
--- a/tests/core/tests_utils.c
+++ b/tests/core/tests_utils.c
@@ -19,6 +19,9 @@
 #include "core/jsonrpc.h"
 #include "core/client.h"
 #include "core/proto.h"
+#include "core/listen.h"
+#include "core/daemon.h"
+#include "core/stats.h"
 #include "lifx/bulb.h"
 #include "lifx/gateway.h"
 #include "tests_utils.h"
@@ -26,6 +29,9 @@
 struct lgtd_lifx_gateway_list lgtd_lifx_gateways =
     LIST_HEAD_INITIALIZER(&lgtd_lifx_gateways);
 
+struct lgtd_listen_list lgtd_listeners =
+    SLIST_HEAD_INITIALIZER(&lgtd_listeners);
+
 struct lgtd_lifx_gateway *
 lgtd_tests_insert_mock_gateway(int id)
 {
@@ -36,6 +42,8 @@
 
     LIST_INSERT_HEAD(&lgtd_lifx_gateways, gw, link);
 
+    LGTD_STATS_ADD_AND_UPDATE_PROCTITLE(gateways, 1);
+
     return gw;
 }
 
@@ -112,3 +120,14 @@
 
     return site;
 }
+
+struct lgtd_listen *
+lgtd_tests_insert_mock_listener(const char *addr, const char *port)
+{
+    struct lgtd_listen *listener = calloc(1, sizeof(*listener));
+    listener->addr = addr;
+    listener->port = port;
+    SLIST_INSERT_HEAD(&lgtd_listeners, listener, link);
+
+    return listener;
+}
diff --git a/tests/core/tests_utils.h b/tests/core/tests_utils.h
--- a/tests/core/tests_utils.h
+++ b/tests/core/tests_utils.h
@@ -37,3 +37,4 @@
 struct lgtd_lifx_site *lgtd_tests_add_tag_to_gw(struct lgtd_lifx_tag *,
                                                 struct lgtd_lifx_gateway *,
                                                 int);
+struct lgtd_listen *lgtd_tests_insert_mock_listener(const char *addr, const char *port);
diff --git a/tests/lifx/tests_shims.c b/tests/lifx/tests_shims.c
--- a/tests/lifx/tests_shims.c
+++ b/tests/lifx/tests_shims.c
@@ -37,3 +37,8 @@
         return ntohs(in6_peer->sin6_port);
     }
 }
+
+void
+lgtd_daemon_update_proctitle(void)
+{
+}
