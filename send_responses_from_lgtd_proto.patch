# HG changeset patch
# Parent  aa16f28ea6309ec7a3c2b5df71b70585a9acad7e
Return responses and errors from lgtd_proto

We'll need this for debugging soon enough and to return real responses
as well.

diff --git a/core/client.c b/core/client.c
--- a/core/client.c
+++ b/core/client.c
@@ -16,6 +16,7 @@
 // along with lighstd.  If not, see <http://www.gnu.org/licenses/>.
 
 #include <sys/queue.h>
+#include <sys/tree.h>
 #include <assert.h>
 #include <err.h>
 #include <stdbool.h>
@@ -26,9 +27,11 @@
 #include <event2/bufferevent.h>
 #include <event2/event.h>
 
+#include "lifx/wire_proto.h"
 #include "jsmn.h"
+#include "jsonrpc.h"
 #include "client.h"
-#include "jsonrpc.h"
+#include "proto.h"
 #include "lightsd.h"
 
 struct lgtd_client_list lgtd_clients = LIST_HEAD_INITIALIZER(&lgtd_clients);
@@ -107,7 +110,9 @@
         bufsz = evbuffer_get_length(input);
         goto retry_after_pullup;
     default:
-        lgtd_jsonrpc_dispatch_request(client, buf, rv);
+        client->json = buf;
+        lgtd_jsonrpc_dispatch_request(client, rv);
+        client->json = NULL;
         evbuffer_drain(input, bufsz);
         jsmn_init(&client->jsmn_ctx);
         break;
@@ -131,6 +136,20 @@
     }
 }
 
+void
+lgtd_client_send_response(struct lgtd_client *client, const char *msg)
+{
+    lgtd_jsonrpc_send_response(client, msg);
+}
+
+void
+lgtd_client_send_error(struct lgtd_client *client,
+                       enum lgtd_client_error_code error,
+                       const char *msg)
+{
+    lgtd_jsonrpc_send_error(client, (enum lgtd_jsonrpc_error_code)error, msg);
+}
+
 struct lgtd_client *
 lgtd_client_open(evutil_socket_t peer, const struct sockaddr_storage *peer_addr)
 {
diff --git a/core/client.h b/core/client.h
--- a/core/client.h
+++ b/core/client.h
@@ -20,13 +20,25 @@
 enum { LGTD_CLIENT_JSMN_TOKENS_NUM = 48 };
 enum { LGTD_CLIENT_MAX_REQUEST_BUF_SIZE = 2048 };
 
+enum lgtd_client_error_code {
+    LGTD_CLIENT_SUCCESS = LGTD_JSONRPC_SUCCESS,
+    LGTD_CLIENT_PARSE_ERROR = LGTD_JSONRPC_PARSE_ERROR,
+    LGTD_CLIENT_INVALID_REQUEST = LGTD_JSONRPC_INVALID_REQUEST,
+    LGTD_CLIENT_METHOD_NOT_FOUND = LGTD_JSONRPC_METHOD_NOT_FOUND,
+    LGTD_CLIENT_INVALID_PARAMS = LGTD_JSONRPC_INVALID_PARAMS,
+    LGTD_CLIENT_INTERNAL_ERROR = LGTD_JSONRPC_INTERNAL_ERROR,
+    LGTD_CLIENT_SERVER_ERROR = LGTD_JSONRPC_SERVER_ERROR
+};
+
 struct lgtd_client {
-    LIST_ENTRY(lgtd_client)  link;
-    struct bufferevent      *io;
-    char                    ip_addr[INET6_ADDRSTRLEN];
-    uint16_t                port;
-    jsmn_parser             jsmn_ctx;
-    jsmntok_t               jsmn_tokens[LGTD_CLIENT_JSMN_TOKENS_NUM];
+    LIST_ENTRY(lgtd_client)      link;
+    struct bufferevent          *io;
+    char                        ip_addr[INET6_ADDRSTRLEN];
+    uint16_t                    port;
+    jsmn_parser                 jsmn_ctx;
+    jsmntok_t                   jsmn_tokens[LGTD_CLIENT_JSMN_TOKENS_NUM];
+    const char                  *json;
+    struct lgtd_jsonrpc_request *current_request;
 };
 LIST_HEAD(lgtd_client_list, lgtd_client);
 
@@ -36,3 +48,6 @@
 
 struct lgtd_client *lgtd_client_open(evutil_socket_t, const struct sockaddr_storage *);
 void lgtd_client_close_all(void);
+
+void lgtd_client_send_response(struct lgtd_client *, const char *);
+void lgtd_client_send_error(struct lgtd_client *, enum lgtd_client_error_code, const char *);
diff --git a/core/jsonrpc.c b/core/jsonrpc.c
--- a/core/jsonrpc.c
+++ b/core/jsonrpc.c
@@ -32,8 +32,8 @@
 
 #include "lifx/wire_proto.h"
 #include "jsmn.h"
+#include "jsonrpc.h"
 #include "client.h"
-#include "jsonrpc.h"
 #include "proto.h"
 #include "lightsd.h"
 
@@ -408,35 +408,31 @@
 }
 
 static void
-lgtd_jsonrpc_write_id(struct lgtd_client *client,
-                      const struct lgtd_jsonrpc_request *request,
-                      const char *json)
+lgtd_jsonrpc_write_id(struct lgtd_client *client)
 {
-    if (!request->id) {
+    if (!client->current_request->id) {
         LGTD_CLIENT_WRITE_STRING(client, "null");
         return;
     }
 
     int start, stop;
-    if (request->id->type == JSMN_STRING) { // get the quotes
-        start = request->id->start - 1;
-        stop = request->id->end + 1;
+    if (client->current_request->id->type == JSMN_STRING) { // get the quotes
+        start = client->current_request->id->start - 1;
+        stop = client->current_request->id->end + 1;
     } else {
-        start = request->id->start;
-        stop = request->id->end;
+        start = client->current_request->id->start;
+        stop = client->current_request->id->end;
     }
-    bufferevent_write(client->io, &json[start], stop - start);
+    bufferevent_write(client->io, &client->json[start], stop - start);
 }
 
 void
 lgtd_jsonrpc_send_error(struct lgtd_client *client,
-                        const struct lgtd_jsonrpc_request *request,
-                        const char *json,
                         enum lgtd_jsonrpc_error_code code,
                         const char *message)
 {
     LGTD_CLIENT_WRITE_STRING(client, "{\"jsonrpc\": \"2.0\", \"id\": ");
-    lgtd_jsonrpc_write_id(client, request, json);
+    lgtd_jsonrpc_write_id(client);
     LGTD_CLIENT_WRITE_STRING(client, ", \"error\": {\"code\": ");
     char str_code[8] = { 0 };
     snprintf(str_code, sizeof(str_code), "%d", code);
@@ -448,12 +444,10 @@
 
 void
 lgtd_jsonrpc_send_response(struct lgtd_client *client,
-                           const struct lgtd_jsonrpc_request *request,
-                           const char *json,
                            const char *result)
 {
     LGTD_CLIENT_WRITE_STRING(client, "{\"jsonrpc\": \"2.0\", \"id\": ");
-    lgtd_jsonrpc_write_id(client, request, json);
+    lgtd_jsonrpc_write_id(client);
     LGTD_CLIENT_WRITE_STRING(client, ", \"result\": ");
     LGTD_CLIENT_WRITE_STRING(client, result);
     LGTD_CLIENT_WRITE_STRING(client, "}");
@@ -505,45 +499,41 @@
 static bool
 lgtd_jsonrpc_build_target_list(struct lgtd_proto_target_list *targets,
                                struct lgtd_client *client,
-                               const struct lgtd_jsonrpc_request *request,
                                const jsmntok_t *target,
-                               int target_ntokens,
-                               const char *json)
+                               int target_ntokens)
 {
     assert(targets);
     assert(client);
-    assert(request);
     assert(target);
     assert(target_ntokens >= 1);
-    assert(json);
 
-    if (lgtd_jsonrpc_type_array(target, json)) {
+    if (lgtd_jsonrpc_type_array(target, client->json)) {
         target_ntokens -= 1;
         target++;
     }
 
     for (int ti = target_ntokens; ti--;) {
         int token_len = LGTD_JSONRPC_TOKEN_LEN(&target[ti]);
-        if (lgtd_jsonrpc_type_string_or_number(&target[ti], json)) {
+        if (lgtd_jsonrpc_type_string_or_number(&target[ti], client->json)) {
             struct lgtd_proto_target *t = malloc(sizeof(*t) + token_len + 1);
             if (!t) {
                 lgtd_warn("can't allocate a new target");
                 lgtd_jsonrpc_send_error(
-                    client, request, json, LGTD_JSONRPC_INTERNAL_ERROR,
-                    "Can't allocate memory"
+                    client, LGTD_JSONRPC_INTERNAL_ERROR, "Can't allocate memory"
                 );
                 goto error;
             }
-            memcpy(t->target, json + target[ti].start, token_len);
+            memcpy(t->target, client->json + target[ti].start, token_len);
             t->target[token_len] = '\0';
             SLIST_INSERT_HEAD(targets, t, link);
         } else {
             lgtd_debug(
-                "invalid target value %.*s", token_len, json + target[ti].start
+                "invalid target value %.*s",
+                token_len,
+                client->json + target[ti].start
             );
             lgtd_jsonrpc_send_error(
-                client, request, json, LGTD_JSONRPC_INVALID_PARAMS,
-                "Invalid parameters"
+                client, LGTD_JSONRPC_INVALID_PARAMS, "Invalid parameters"
             );
             goto error;
         }
@@ -557,9 +547,7 @@
 }
 
 static void
-lgtd_jsonrpc_check_and_call_set_light_from_hsbk(struct lgtd_client *client,
-                                                const struct lgtd_jsonrpc_request *request,
-                                                const char *json)
+lgtd_jsonrpc_check_and_call_set_light_from_hsbk(struct lgtd_client *client)
 {
     struct lgtd_jsonrpc_set_light_from_hsbk_args {
         const jsmntok_t *target;
@@ -619,120 +607,53 @@
         &params,
         schema,
         LGTD_ARRAY_SIZE(schema),
-        request->params,
-        request->params_ntokens,
-        json
+        client->current_request->params,
+        client->current_request->params_ntokens,
+        client->json
     );
     if (!ok) {
         goto error_invalid_params;
     }
 
     int h = lgtd_jsonrpc_float_range_to_uint16(
-        &json[params.h->start], LGTD_JSONRPC_TOKEN_LEN(params.h), 0, 360
+        &client->json[params.h->start], LGTD_JSONRPC_TOKEN_LEN(params.h), 0, 360
     );
     int s = lgtd_jsonrpc_float_range_to_uint16(
-        &json[params.s->start], LGTD_JSONRPC_TOKEN_LEN(params.s), 0, 1
+        &client->json[params.s->start], LGTD_JSONRPC_TOKEN_LEN(params.s), 0, 1
     );
     int b = lgtd_jsonrpc_float_range_to_uint16(
-        &json[params.b->start], LGTD_JSONRPC_TOKEN_LEN(params.b), 0, 1
+        &client->json[params.b->start], LGTD_JSONRPC_TOKEN_LEN(params.b), 0, 1
     );
     errno = 0;
-    int k = strtol(&json[params.k->start], NULL, 10);
+    int k = strtol(&client->json[params.k->start], NULL, 10);
     if (k < 2500 || k > 9000 || errno == ERANGE) {
         goto error_invalid_params;
     }
-    int t = strtol(&json[params.t->start], NULL, 10);
+    int t = strtol(&client->json[params.t->start], NULL, 10);
     if (t < 0 || errno == ERANGE) {
         goto error_invalid_params;
     }
 
     struct lgtd_proto_target_list targets = SLIST_HEAD_INITIALIZER(&targets);
     ok = lgtd_jsonrpc_build_target_list(
-        &targets, client, request, params.target, params.target_ntokens, json
+        &targets, client, params.target, params.target_ntokens
     );
     if (!ok) {
         return;
     }
 
-    ok = lgtd_proto_set_light_from_hsbk(&targets, h, s, b, k, t);
+    lgtd_proto_set_light_from_hsbk(client, &targets, h, s, b, k, t);
     lgtd_proto_target_list_clear(&targets);
-    if (ok) {
-        lgtd_jsonrpc_send_response(client, request, json, "true");
-        return;
-    }
+    return;
 
 error_invalid_params:
     lgtd_jsonrpc_send_error(
-        client, request, json, LGTD_JSONRPC_INVALID_PARAMS,
-        "Invalid parameters"
-    );
-}
-
-static bool
-lgtd_jsonrpc_extract_target_list(struct lgtd_proto_target_list *targets,
-                                 struct lgtd_client *client,
-                                 const struct lgtd_jsonrpc_request *request,
-                                 const char *json)
-{
-    struct lgtd_jsonrpc_target_args {
-        const jsmntok_t *target;
-        int             target_ntokens;
-    } params = { NULL, 0 };
-    static const struct lgtd_jsonrpc_node schema[] = {
-        LGTD_JSONRPC_NODE(
-            "target",
-            offsetof(struct lgtd_jsonrpc_target_args, target),
-            offsetof(struct lgtd_jsonrpc_target_args, target_ntokens),
-            lgtd_jsonrpc_type_string_number_or_array,
-            false
-        )
-    };
-
-    bool ok = lgtd_jsonrpc_extract_and_validate_params_against_schema(
-        &params, schema, 1, request->params, request->params_ntokens, json
-    );
-    if (!ok) {
-        lgtd_jsonrpc_send_error(
-            client, request, json, LGTD_JSONRPC_INVALID_PARAMS,
-            "Invalid parameters"
-        );
-        return false;
-    }
-
-    return lgtd_jsonrpc_build_target_list(
-        targets, client, request, params.target, params.target_ntokens, json
+        client, LGTD_JSONRPC_INVALID_PARAMS, "Invalid parameters"
     );
 }
 
 static void
-lgtd_jsonrpc_check_and_call_power_on(struct lgtd_client *client,
-                                     const struct lgtd_jsonrpc_request *request,
-                                     const char *json)
-{
-
-    struct lgtd_proto_target_list targets = SLIST_HEAD_INITIALIZER(&targets);
-    bool ok = lgtd_jsonrpc_extract_target_list(&targets, client, request, json);
-    if (!ok) {
-        return;
-    }
-
-    ok = lgtd_proto_power_on(&targets);
-    lgtd_proto_target_list_clear(&targets);
-    if (ok) {
-        lgtd_jsonrpc_send_response(client, request, json, "true");
-        return;
-    }
-
-    lgtd_jsonrpc_send_error(
-        client, request, json, LGTD_JSONRPC_INVALID_PARAMS,
-        "Invalid parameters"
-    );
-}
-
-static void
-lgtd_jsonrpc_check_and_call_set_waveform(struct lgtd_client *client,
-                                         const struct lgtd_jsonrpc_request *request,
-                                         const char *json)
+lgtd_jsonrpc_check_and_call_set_waveform(struct lgtd_client *client)
 {
     struct lgtd_jsonrpc_set_waveform_args {
         const jsmntok_t *target;
@@ -824,9 +745,9 @@
         &params,
         schema,
         LGTD_ARRAY_SIZE(schema),
-        request->params,
-        request->params_ntokens,
-        json
+        client->current_request->params,
+        client->current_request->params_ntokens,
+        client->json
     );
     if (!ok) {
         goto error_invalid_params;
@@ -834,95 +755,128 @@
 
     enum lgtd_lifx_waveform_type waveform;
     waveform = lgtd_lifx_wire_waveform_string_id_to_type(
-        &json[params.waveform->start], LGTD_JSONRPC_TOKEN_LEN(params.waveform)
+        &client->json[params.waveform->start], LGTD_JSONRPC_TOKEN_LEN(params.waveform)
     );
     if (waveform == LGTD_LIFX_WAVEFORM_INVALID) {
         goto error_invalid_params;
     }
 
     int h = lgtd_jsonrpc_float_range_to_uint16(
-        &json[params.h->start], LGTD_JSONRPC_TOKEN_LEN(params.h), 0, 360
+        &client->json[params.h->start], LGTD_JSONRPC_TOKEN_LEN(params.h), 0, 360
     );
     int s = lgtd_jsonrpc_float_range_to_uint16(
-        &json[params.s->start], LGTD_JSONRPC_TOKEN_LEN(params.s), 0, 1
+        &client->json[params.s->start], LGTD_JSONRPC_TOKEN_LEN(params.s), 0, 1
     );
     int b = lgtd_jsonrpc_float_range_to_uint16(
-        &json[params.b->start], LGTD_JSONRPC_TOKEN_LEN(params.b), 0, 1
+        &client->json[params.b->start], LGTD_JSONRPC_TOKEN_LEN(params.b), 0, 1
     );
     errno = 0;
-    int k = strtol(&json[params.k->start], NULL, 10);
+    int k = strtol(&client->json[params.k->start], NULL, 10);
     if (k < 2500 || k > 9000 || errno == ERANGE) {
         goto error_invalid_params;
     }
-    int period = strtol(&json[params.period->start], NULL, 10);
+    int period = strtol(&client->json[params.period->start], NULL, 10);
     if (period <= 0 || errno == ERANGE) {
         goto error_invalid_params;
     }
-    int cycles = strtol(&json[params.cycles->start], NULL, 10);
+    int cycles = strtol(&client->json[params.cycles->start], NULL, 10);
     if (cycles <= 0 || errno == ERANGE) {
         goto error_invalid_params;
     }
     int skew_ratio = lgtd_jsonrpc_float_range_to_uint16(
-        &json[params.skew_ratio->start],
+        &client->json[params.skew_ratio->start],
         LGTD_JSONRPC_TOKEN_LEN(params.skew_ratio),
         0, 1
     );
     skew_ratio -= UINT16_MAX / 2;
-    bool transient = json[params.transient->start] == 't';
+    bool transient = client->json[params.transient->start] == 't';
 
     struct lgtd_proto_target_list targets = SLIST_HEAD_INITIALIZER(&targets);
     ok = lgtd_jsonrpc_build_target_list(
-        &targets, client, request, params.target, params.target_ntokens, json
+        &targets, client, params.target, params.target_ntokens
     );
     if (!ok) {
         return;
     }
 
-    ok = lgtd_proto_set_waveform(
-        &targets, waveform, h, s, b, k, period, cycles, skew_ratio, transient
+    lgtd_proto_set_waveform(
+        client, &targets,
+        waveform, h, s, b, k,
+        period, cycles, skew_ratio, transient
     );
     lgtd_proto_target_list_clear(&targets);
-    if (ok) {
-        lgtd_jsonrpc_send_response(client, request, json, "true");
-        return;
-    }
+    return;
 
 error_invalid_params:
     lgtd_jsonrpc_send_error(
-        client, request, json, LGTD_JSONRPC_INVALID_PARAMS,
-        "Invalid parameters"
+        client, LGTD_JSONRPC_INVALID_PARAMS, "Invalid parameters"
+    );
+}
+
+static bool
+lgtd_jsonrpc_extract_target_list(struct lgtd_proto_target_list *targets,
+                                 struct lgtd_client *client)
+{
+    struct lgtd_jsonrpc_target_args {
+        const jsmntok_t *target;
+        int             target_ntokens;
+    } params = { NULL, 0 };
+    static const struct lgtd_jsonrpc_node schema[] = {
+        LGTD_JSONRPC_NODE(
+            "target",
+            offsetof(struct lgtd_jsonrpc_target_args, target),
+            offsetof(struct lgtd_jsonrpc_target_args, target_ntokens),
+            lgtd_jsonrpc_type_string_number_or_array,
+            false
+        )
+    };
+
+    struct lgtd_jsonrpc_request *req = client->current_request;
+    bool ok = lgtd_jsonrpc_extract_and_validate_params_against_schema(
+        &params, schema, 1, req->params, req->params_ntokens, client->json
+    );
+    if (!ok) {
+        lgtd_jsonrpc_send_error(
+            client, LGTD_JSONRPC_INVALID_PARAMS, "Invalid parameters"
+        );
+        return false;
+    }
+
+    return lgtd_jsonrpc_build_target_list(
+        targets, client, params.target, params.target_ntokens
     );
 }
 
 static void
-lgtd_jsonrpc_check_and_call_power_off(struct lgtd_client *client,
-                                      const struct lgtd_jsonrpc_request *request,
-                                      const char *json)
+lgtd_jsonrpc_check_and_call_power_on(struct lgtd_client *client)
 {
 
     struct lgtd_proto_target_list targets = SLIST_HEAD_INITIALIZER(&targets);
-    bool ok = lgtd_jsonrpc_extract_target_list(&targets, client, request, json);
+    bool ok = lgtd_jsonrpc_extract_target_list(&targets, client);
     if (!ok) {
         return;
     }
 
-    ok = lgtd_proto_power_off(&targets);
+    lgtd_proto_power_on(client, &targets);
     lgtd_proto_target_list_clear(&targets);
-    if (ok) {
-        lgtd_jsonrpc_send_response(client, request, json, "true");
+}
+
+static void
+lgtd_jsonrpc_check_and_call_power_off(struct lgtd_client *client)
+{
+
+    struct lgtd_proto_target_list targets = SLIST_HEAD_INITIALIZER(&targets);
+    bool ok = lgtd_jsonrpc_extract_target_list(&targets, client);
+    if (!ok) {
         return;
     }
 
-    lgtd_jsonrpc_send_error(
-        client, request, json, LGTD_JSONRPC_INVALID_PARAMS,
-        "Invalid parameters"
-    );
+    lgtd_proto_power_off(client, &targets);
+    lgtd_proto_target_list_clear(&targets);
 }
 
 void
-lgtd_jsonrpc_dispatch_request(struct lgtd_client *client,
-                              const char *json,
-                              int parsed)
+lgtd_jsonrpc_dispatch_request(struct lgtd_client *client, int parsed)
 {
     static const struct lgtd_jsonrpc_method methods[] = {
         LGTD_JSONRPC_METHOD(
@@ -947,22 +901,20 @@
     assert(client);
     assert(parsed >= 0);
 
-    const jsmntok_t *tokens = client->jsmn_tokens;
-
     // TODO: batch requests
 
     struct lgtd_jsonrpc_request request;
     memset(&request, 0, sizeof(request));
     bool ok = lgtd_jsonrpc_check_and_extract_request(
         &request,
-        tokens,
+        client->jsmn_tokens,
         parsed,
-        json
+        client->json
     );
+    client->current_request = &request;
     if (!ok) {
         lgtd_jsonrpc_send_error(
-            client, &request, json, LGTD_JSONRPC_INVALID_REQUEST,
-            "Invalid request"
+            client, LGTD_JSONRPC_INVALID_REQUEST, "Invalid request"
         );
         return;
     }
@@ -976,24 +928,26 @@
             continue;
         }
         int diff = memcmp(
-            methods[i].name, &json[request.method->start], methods[i].namelen
+            methods[i].name, &client->json[request.method->start], methods[i].namelen
         );
         if (!diff) {
             int params_count = request.params->size;
             if (params_count != methods[i].params_count) {
                 lgtd_jsonrpc_send_error(
-                    client, &request, json, LGTD_JSONRPC_INVALID_PARAMS,
+                    client, LGTD_JSONRPC_INVALID_PARAMS,
                     "Invalid number of parameters"
                 );
-                return;
+                goto error;
             }
-            methods[i].method(client, &request, json);
+            methods[i].method(client);
+            client->current_request = NULL;
             return;
         }
     }
 
     lgtd_jsonrpc_send_error(
-        client, &request, json, LGTD_JSONRPC_METHOD_NOT_FOUND,
-        "Method not found"
+        client, LGTD_JSONRPC_METHOD_NOT_FOUND, "Method not found"
     );
+error:
+    client->current_request = NULL;
 }
diff --git a/core/jsonrpc.h b/core/jsonrpc.h
--- a/core/jsonrpc.h
+++ b/core/jsonrpc.h
@@ -17,6 +17,8 @@
 
 #pragma once
 
+struct lgtd_client;
+
 struct lgtd_jsonrpc_request {
     const jsmntok_t *method;
     const jsmntok_t *params;
@@ -59,9 +61,7 @@
     const char  *name;
     int         namelen;
     int         params_count;
-    void        (*method)(struct lgtd_client *,
-                          const struct lgtd_jsonrpc_request *,
-                          const char *);
+    void        (*method)(struct lgtd_client *);
 };
 
 #define LGTD_JSONRPC_METHOD(name_, params_count_, method_) {    \
@@ -81,14 +81,10 @@
     LGTD_JSONRPC_SERVER_ERROR = -32000 // (to -32099)
 };
 
-void lgtd_jsonrpc_dispatch_request(struct lgtd_client *, const char *, int);
+void lgtd_jsonrpc_dispatch_request(struct lgtd_client *, int);
 
 void lgtd_jsonrpc_send_error(struct lgtd_client *,
-                             const struct lgtd_jsonrpc_request *,
-                             const char *,
                              enum lgtd_jsonrpc_error_code,
                              const char *);
 void lgtd_jsonrpc_send_response(struct lgtd_client *,
-                                const struct lgtd_jsonrpc_request *,
-                                const char *,
                                 const char *);
diff --git a/core/lightsd.c b/core/lightsd.c
--- a/core/lightsd.c
+++ b/core/lightsd.c
@@ -42,6 +42,7 @@
 #include "lifx/timer.h"
 #include "version.h"
 #include "jsmn.h"
+#include "jsonrpc.h"
 #include "client.h"
 #include "listen.h"
 #include "lightsd.h"
diff --git a/core/listen.c b/core/listen.c
--- a/core/listen.c
+++ b/core/listen.c
@@ -26,6 +26,7 @@
 #include <event2/util.h>
 
 #include "jsmn.h"
+#include "jsonrpc.h"
 #include "client.h"
 #include "listen.h"
 #include "lightsd.h"
diff --git a/core/proto.c b/core/proto.c
--- a/core/proto.c
+++ b/core/proto.c
@@ -26,14 +26,24 @@
 #include <stdint.h>
 #include <string.h>
 
+#include <event2/util.h>
+
 #include "lifx/wire_proto.h"
 #include "time_monotonic.h"
 #include "lifx/bulb.h"
+#include "jsmn.h"
+#include "jsonrpc.h"
+#include "client.h"
 #include "proto.h"
 #include "router.h"
 #include "lightsd.h"
 
-void lgtd_proto_target_list_clear(struct lgtd_proto_target_list *targets)
+#define SEND_RESULT(client, ok) do {                                \
+    lgtd_jsonrpc_send_response((client), (ok) ? "true" : "false");  \
+} while(0)
+
+void
+lgtd_proto_target_list_clear(struct lgtd_proto_target_list *targets)
 {
     assert(targets);
 
@@ -44,26 +54,33 @@
     }
 }
 
-bool
-lgtd_proto_power_on(const struct lgtd_proto_target_list *targets)
+void
+lgtd_proto_power_on(struct lgtd_client *client,
+                    const struct lgtd_proto_target_list *targets)
 {
     assert(targets);
 
     struct lgtd_lifx_packet_power_state pkt = { .power = LGTD_LIFX_POWER_ON };
-    return lgtd_router_send(targets, LGTD_LIFX_SET_POWER_STATE, &pkt);
+    SEND_RESULT(
+        client, lgtd_router_send(targets, LGTD_LIFX_SET_POWER_STATE, &pkt)
+    );
 }
 
-bool
-lgtd_proto_power_off(const struct lgtd_proto_target_list *targets)
+void
+lgtd_proto_power_off(struct lgtd_client *client,
+                     const struct lgtd_proto_target_list *targets)
 {
     assert(targets);
 
     struct lgtd_lifx_packet_power_state pkt = { .power = LGTD_LIFX_POWER_OFF };
-    return lgtd_router_send(targets, LGTD_LIFX_SET_POWER_STATE, &pkt);
+    SEND_RESULT(
+        client, lgtd_router_send(targets, LGTD_LIFX_SET_POWER_STATE, &pkt)
+    );
 }
 
-bool
-lgtd_proto_set_light_from_hsbk(const struct lgtd_proto_target_list *targets,
+void
+lgtd_proto_set_light_from_hsbk(struct lgtd_client *client,
+                               const struct lgtd_proto_target_list *targets,
                                int hue,
                                int saturation,
                                int brightness,
@@ -85,16 +102,21 @@
         .kelvin = kelvin,
         .transition = transition_msecs
     };
+
     lgtd_lifx_wire_encode_light_color(&pkt);
-    return lgtd_router_send(targets, LGTD_LIFX_SET_LIGHT_COLOR, &pkt);
+    SEND_RESULT(
+        client, lgtd_router_send(targets, LGTD_LIFX_SET_LIGHT_COLOR, &pkt))
+    ;
 }
 
-bool lgtd_proto_set_waveform(const struct lgtd_proto_target_list *targets,
-                             enum lgtd_lifx_waveform_type waveform,
-                             int hue, int saturation,
-                             int brightness, int kelvin,
-                             int period, float cycles,
-                             int skew_ratio, bool transient)
+void
+lgtd_proto_set_waveform(struct lgtd_client *client,
+                        const struct lgtd_proto_target_list *targets,
+                        enum lgtd_lifx_waveform_type waveform,
+                        int hue, int saturation,
+                        int brightness, int kelvin,
+                        int period, float cycles,
+                        int skew_ratio, bool transient)
 {
     assert(targets);
     assert(hue >= 0 && hue <= UINT16_MAX);
@@ -120,5 +142,7 @@
     };
 
     lgtd_lifx_wire_encode_waveform(&pkt);
-    return lgtd_router_send(targets, LGTD_LIFX_SET_WAVEFORM, &pkt);
+    SEND_RESULT(
+        client, lgtd_router_send(targets, LGTD_LIFX_SET_WAVEFORM, &pkt)
+    );
 }
diff --git a/core/proto.h b/core/proto.h
--- a/core/proto.h
+++ b/core/proto.h
@@ -24,13 +24,17 @@
 SLIST_HEAD(lgtd_proto_target_list, lgtd_proto_target);
 
 void lgtd_proto_target_list_clear(struct lgtd_proto_target_list *);
-const struct lgtd_proto_target *lgtd_proto_target_list_add(struct lgtd_proto_target_list *,
+const struct lgtd_proto_target *lgtd_proto_target_list_add(struct lgtd_client *,
+                                                           struct lgtd_proto_target_list *,
                                                            const char *, int);
 
-bool lgtd_proto_set_light_from_hsbk(const struct lgtd_proto_target_list *, int, int, int, int, int);
-bool lgtd_proto_set_waveform(const struct lgtd_proto_target_list *,
+void lgtd_proto_set_light_from_hsbk(struct lgtd_client *,
+                                    const struct lgtd_proto_target_list *,
+                                    int, int, int, int, int);
+void lgtd_proto_set_waveform(struct lgtd_client *,
+                             const struct lgtd_proto_target_list *,
                              enum lgtd_lifx_waveform_type,
                              int, int, int, int,
                              int, float, int, bool);
-bool lgtd_proto_power_on(const struct lgtd_proto_target_list *);
-bool lgtd_proto_power_off(const struct lgtd_proto_target_list *);
+void lgtd_proto_power_on(struct lgtd_client *, const struct lgtd_proto_target_list *);
+void lgtd_proto_power_off(struct lgtd_client *, const struct lgtd_proto_target_list *);
diff --git a/core/router.c b/core/router.c
--- a/core/router.c
+++ b/core/router.c
@@ -34,6 +34,9 @@
 #include "lifx/wire_proto.h"
 #include "time_monotonic.h"
 #include "lifx/bulb.h"
+#include "jsmn.h"
+#include "jsonrpc.h"
+#include "client.h"
 #include "proto.h"
 #include "router.h"
 #include "lifx/gateway.h"
diff --git a/docs/protocol.rst b/docs/protocol.rst
--- a/docs/protocol.rst
+++ b/docs/protocol.rst
@@ -60,4 +60,8 @@
                           end of the waveform, otherwise it will revert back to
                           its original state.
 
+.. function:: tag_list(tag)
+
+    Return an array of labels or adresses of the devices having the given tag.
+
 .. vim: set tw=80 spelllang=en spell:
diff --git a/lifx/gateway.c b/lifx/gateway.c
--- a/lifx/gateway.c
+++ b/lifx/gateway.c
@@ -38,6 +38,9 @@
 #include "gateway.h"
 #include "broadcast.h"
 #include "timer.h"
+#include "core/jsmn.h"
+#include "core/jsonrpc.h"
+#include "core/client.h"
 #include "core/proto.h"
 #include "core/router.h"
 #include "core/lightsd.h"
diff --git a/tests/core/jsonrpc/test_jsonrpc_build_target_list.c b/tests/core/jsonrpc/test_jsonrpc_build_target_list.c
--- a/tests/core/jsonrpc/test_jsonrpc_build_target_list.c
+++ b/tests/core/jsonrpc/test_jsonrpc_build_target_list.c
@@ -5,8 +5,10 @@
 static void
 test_params(const char *json, const char **expected_targets)
 {
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request request = { .id = NULL };
+    struct lgtd_client client = {
+        .io = NULL, .json = json, .current_request = &request
+    };
 
     jsmntok_t tokens[32];
     int parsed = parse_json(
@@ -17,9 +19,7 @@
 
     reset_client_write_buf();
 
-    bool ok = lgtd_jsonrpc_build_target_list(
-        &targets, &client, &request, tokens, parsed, json
-    );
+    bool ok = lgtd_jsonrpc_build_target_list(&targets, &client, tokens, parsed);
 
     if (!expected_targets && !SLIST_EMPTY(&targets)) {
         if (ok) {
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c
@@ -5,9 +5,12 @@
 
 static bool power_off_called = false;
 
-bool
-lgtd_proto_power_off(const struct lgtd_proto_target_list *targets)
+void
+lgtd_proto_power_off(struct lgtd_client *client,
+                     const struct lgtd_proto_target_list *targets)
 {
+    assert(client);
+
     if (strcmp(SLIST_FIRST(targets)->target, "*")) {
         errx(
             1, "Invalid target [%s] (expected=[*])",
@@ -15,7 +18,6 @@
         );
     }
     power_off_called = true;
-    return true;
 }
 
 int
@@ -33,27 +35,16 @@
     );
 
     bool ok;
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request req = TEST_REQUEST_INITIALIZER;
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     ok = lgtd_jsonrpc_check_and_extract_request(&req, tokens, parsed, json);
     if (!ok) {
         errx(1, "can't parse request");
     }
 
-    lgtd_jsonrpc_check_and_call_power_off(&client, &req, json);
-
-    const char response[] = ("{"
-        "\"jsonrpc\": \"2.0\", "
-        "\"id\": \"42\", "
-        "\"result\": true"
-    "}");
-
-    if (strcmp(client_write_buf, response)) {
-        errx(
-            1, "invalid response: %s (expected: %s)",
-            client_write_buf, response
-        );
-    }
+    lgtd_jsonrpc_check_and_call_power_off(&client);
 
     if (!power_off_called) {
         errx(1, "lgtd_proto_power_off wasn't called");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c
@@ -5,12 +5,13 @@
 
 static bool power_off_called = false;
 
-bool
-lgtd_proto_power_off(const struct lgtd_proto_target_list *targets)
+void
+lgtd_proto_power_off(struct lgtd_client *client,
+                     const struct lgtd_proto_target_list *targets)
 {
     (void)targets;
+    (void)client;
     power_off_called = true;
-    return true;
 }
 
 int
@@ -28,14 +29,16 @@
     );
 
     bool ok;
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request req = TEST_REQUEST_INITIALIZER;
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     ok = lgtd_jsonrpc_check_and_extract_request(&req, tokens, parsed, json);
     if (!ok) {
         errx(1, "can't parse request");
     }
 
-    lgtd_jsonrpc_check_and_call_power_off(&client, &req, json);
+    lgtd_jsonrpc_check_and_call_power_off(&client);
 
     if (!strstr(client_write_buf, "-32602")) {
         errx(1, "no error returned");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c
@@ -5,9 +5,12 @@
 
 static bool power_on_called = false;
 
-bool
-lgtd_proto_power_on(const struct lgtd_proto_target_list *targets)
+void
+lgtd_proto_power_on(struct lgtd_client *client,
+                    const struct lgtd_proto_target_list *targets)
 {
+    assert(client);
+
     if (strcmp(SLIST_FIRST(targets)->target, "*")) {
         errx(
             1, "Invalid target [%s] (expected=[*])",
@@ -15,7 +18,6 @@
         );
     }
     power_on_called = true;
-    return true;
 }
 
 int
@@ -33,27 +35,16 @@
     );
 
     bool ok;
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request req = TEST_REQUEST_INITIALIZER;
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     ok = lgtd_jsonrpc_check_and_extract_request(&req, tokens, parsed, json);
     if (!ok) {
         errx(1, "can't parse request");
     }
 
-    lgtd_jsonrpc_check_and_call_power_on(&client, &req, json);
-
-    const char response[] = ("{"
-        "\"jsonrpc\": \"2.0\", "
-        "\"id\": \"42\", "
-        "\"result\": true"
-    "}");
-
-    if (strcmp(client_write_buf, response)) {
-        errx(
-            1, "invalid response: %s (expected: %s)",
-            client_write_buf, response
-        );
-    }
+    lgtd_jsonrpc_check_and_call_power_on(&client);
 
     if (!power_on_called) {
         errx(1, "lgtd_proto_power_on wasn't called");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c
@@ -5,12 +5,13 @@
 
 static bool power_on_called = false;
 
-bool
-lgtd_proto_power_on(const struct lgtd_proto_target_list *targets)
+void
+lgtd_proto_power_on(struct lgtd_client *client,
+                    const struct lgtd_proto_target_list *targets)
 {
+    (void)client;
     (void)targets;
     power_on_called = true;
-    return true;
 }
 
 int
@@ -28,14 +29,16 @@
     );
 
     bool ok;
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request req = TEST_REQUEST_INITIALIZER;
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     ok = lgtd_jsonrpc_check_and_extract_request(&req, tokens, parsed, json);
     if (!ok) {
         errx(1, "can't parse request");
     }
 
-    lgtd_jsonrpc_check_and_call_power_on(&client, &req, json);
+    lgtd_jsonrpc_check_and_call_power_on(&client);
 
     if (!strstr(client_write_buf, "-32602")) {
         errx(1, "no error returned");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
@@ -5,14 +5,17 @@
 
 static bool set_light_called = false;
 
-bool
-lgtd_proto_set_light_from_hsbk(const struct lgtd_proto_target_list *targets,
+void
+lgtd_proto_set_light_from_hsbk(struct lgtd_client *client,
+                               const struct lgtd_proto_target_list *targets,
                                int hue,
                                int saturation,
                                int brightness,
                                int kelvin,
                                int transition_msecs)
 {
+    assert(client);
+
     if (strcmp(SLIST_FIRST(targets)->target, "*")) {
         errx(
             1, "Invalid target [%s] (expected=[*])",
@@ -51,7 +54,6 @@
         );
     }
     set_light_called = true;
-    return true;
 }
 
 int
@@ -76,27 +78,16 @@
     );
 
     bool ok;
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request req = TEST_REQUEST_INITIALIZER;
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     ok = lgtd_jsonrpc_check_and_extract_request(&req, tokens, parsed, json);
     if (!ok) {
         errx(1, "can't parse request");
     }
 
-    lgtd_jsonrpc_check_and_call_set_light_from_hsbk(&client, &req, json);
-
-    const char response[] = ("{"
-        "\"jsonrpc\": \"2.0\", "
-        "\"id\": \"42\", "
-        "\"result\": true"
-    "}");
-
-    if (strcmp(client_write_buf, response)) {
-        errx(
-            1, "invalid response: %s (expected: %s)",
-            client_write_buf, response
-        );
-    }
+    lgtd_jsonrpc_check_and_call_set_light_from_hsbk(&client);
 
     if (!set_light_called) {
         errx(1, "lgtd_proto_set_light_from_hsbk wasn't called");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
@@ -5,14 +5,17 @@
 
 static bool set_light_called = false;
 
-bool
-lgtd_proto_set_light_from_hsbk(const struct lgtd_proto_target_list *targets,
+void
+lgtd_proto_set_light_from_hsbk(struct lgtd_client *client,
+                               const struct lgtd_proto_target_list *targets,
                                int hue,
                                int saturation,
                                int brightness,
                                int kelvin,
                                int transition_msecs)
 {
+    assert(client);
+
     if (strcmp(SLIST_FIRST(targets)->target, "*")) {
         errx(
             1, "Invalid target [%s] (expected=[*])",
@@ -51,7 +54,6 @@
         );
     }
     set_light_called = true;
-    return true;
 }
 
 int
@@ -71,27 +73,16 @@
     );
 
     bool ok;
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request req = TEST_REQUEST_INITIALIZER;
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     ok = lgtd_jsonrpc_check_and_extract_request(&req, tokens, parsed, json);
     if (!ok) {
         errx(1, "can't parse request");
     }
 
-    lgtd_jsonrpc_check_and_call_set_light_from_hsbk(&client, &req, json);
-
-    const char response[] = ("{"
-        "\"jsonrpc\": \"2.0\", "
-        "\"id\": \"42\", "
-        "\"result\": true"
-    "}");
-
-    if (strcmp(client_write_buf, response)) {
-        errx(
-            1, "invalid response: %s (expected: %s)",
-            client_write_buf, response
-        );
-    }
+    lgtd_jsonrpc_check_and_call_set_light_from_hsbk(&client);
 
     if (!set_light_called) {
         errx(1, "lgtd_proto_set_light_from_hsbk wasn't called");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
@@ -5,14 +5,16 @@
 
 static bool set_light_called = false;
 
-bool
-lgtd_proto_set_light_from_hsbk(const struct lgtd_proto_target_list *targets,
+void
+lgtd_proto_set_light_from_hsbk(struct lgtd_client *client,
+                               const struct lgtd_proto_target_list *targets,
                                int hue,
                                int saturation,
                                int brightness,
                                int kelvin,
                                int transition_msecs)
 {
+    (void)client;
     (void)targets;
     (void)hue;
     (void)saturation;
@@ -20,7 +22,6 @@
     (void)kelvin;
     (void)transition_msecs;
     set_light_called = true;
-    return true;
 }
 
 static void
@@ -32,18 +33,16 @@
     );
 
     bool ok;
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request req = TEST_REQUEST_INITIALIZER;
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     ok = lgtd_jsonrpc_check_and_extract_request(&req, tokens, parsed, json);
     if (!ok) {
         errx(1, "can't parse request");
     }
 
-    lgtd_jsonrpc_check_and_call_set_light_from_hsbk(&client, &req, json);
-
-    if (!strstr(client_write_buf, "-32602")) {
-        errx(1, "no error returned, client_write_buf=[%s]", client_write_buf);
-    }
+    lgtd_jsonrpc_check_and_call_set_light_from_hsbk(&client);
 
     if (set_light_called) {
         errx(1, "lgtd_proto_power_off was called");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c
@@ -5,14 +5,17 @@
 
 static bool set_waveform_called = false;
 
-bool
-lgtd_proto_set_waveform(const struct lgtd_proto_target_list *targets,
+void
+lgtd_proto_set_waveform(struct lgtd_client *client,
+                        const struct lgtd_proto_target_list *targets,
                         enum lgtd_lifx_waveform_type waveform,
                         int hue, int saturation,
                         int brightness, int kelvin,
                         int period, float cycles,
                         int skew_ratio, bool transient)
 {
+    assert(client);
+
     if (strcmp(SLIST_FIRST(targets)->target, "*")) {
         errx(
             1, "Invalid target [%s] (expected=[*])",
@@ -64,7 +67,6 @@
         );
     }
     set_waveform_called = true;
-    return true;
 }
 
 int
@@ -93,27 +95,16 @@
     );
 
     bool ok;
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request req = TEST_REQUEST_INITIALIZER;
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     ok = lgtd_jsonrpc_check_and_extract_request(&req, tokens, parsed, json);
     if (!ok) {
         errx(1, "can't parse request");
     }
 
-    lgtd_jsonrpc_check_and_call_set_waveform(&client, &req, json);
-
-    const char response[] = ("{"
-        "\"jsonrpc\": \"2.0\", "
-        "\"id\": \"42\", "
-        "\"result\": true"
-    "}");
-
-    if (strcmp(client_write_buf, response)) {
-        errx(
-            1, "invalid response: %s (expected: %s)",
-            client_write_buf, response
-        );
-    }
+    lgtd_jsonrpc_check_and_call_set_waveform(&client);
 
     if (!set_waveform_called) {
         errx(1, "lgtd_proto_set_waveform wasn't called");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c
@@ -5,14 +5,16 @@
 
 static bool set_waveform_called = false;
 
-bool
-lgtd_proto_set_waveform(const struct lgtd_proto_target_list *targets,
+void
+lgtd_proto_set_waveform(struct lgtd_client *client,
+                        const struct lgtd_proto_target_list *targets,
                         enum lgtd_lifx_waveform_type waveform,
                         int hue, int saturation,
                         int brightness, int kelvin,
                         int period, float cycles,
                         int skew_ratio, bool transient)
 {
+    (void)client;
     (void)targets;
     (void)waveform;
     (void)hue;
@@ -24,7 +26,6 @@
     (void)skew_ratio;
     (void)transient;
     set_waveform_called = true;
-    return true;
 }
 
 static void
@@ -36,18 +37,16 @@
     );
 
     bool ok;
-    struct lgtd_client client = { .io = NULL };
     struct lgtd_jsonrpc_request req = TEST_REQUEST_INITIALIZER;
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     ok = lgtd_jsonrpc_check_and_extract_request(&req, tokens, parsed, json);
     if (!ok) {
         errx(1, "can't parse request");
     }
 
-    lgtd_jsonrpc_check_and_call_set_waveform(&client, &req, json);
-
-    if (!strstr(client_write_buf, "-32602")) {
-        errx(1, "no error returned, client_write_buf=[%s]", client_write_buf);
-    }
+    lgtd_jsonrpc_check_and_call_set_waveform(&client);
 
     if (set_waveform_called) {
         errx(1, "lgtd_proto_power_off was called");
diff --git a/tests/core/jsonrpc/test_jsonrpc_send_error.c b/tests/core/jsonrpc/test_jsonrpc_send_error.c
--- a/tests/core/jsonrpc/test_jsonrpc_send_error.c
+++ b/tests/core/jsonrpc/test_jsonrpc_send_error.c
@@ -5,11 +5,12 @@
 int
 main(void)
 {
-    struct lgtd_client client = { .io = NULL };
-
     const char *json = "\"42\"";
     jsmntok_t token = { .start = 1, .end = 3, .type = JSMN_STRING };
     struct lgtd_jsonrpc_request req = { .id = &token };
+    struct lgtd_client client = {
+        .io = NULL, .current_request = &req, .json = json
+    };
     const char *expected = (
         "{"
         "\"jsonrpc\": \"2.0\", "
@@ -18,7 +19,7 @@
         "}"
     );
     lgtd_jsonrpc_send_error(
-        &client, &req, json, LGTD_JSONRPC_INVALID_REQUEST, "Invalid Request"
+        &client, LGTD_JSONRPC_INVALID_REQUEST, "Invalid Request"
     );
     int diff = memcmp(client_write_buf, expected, strlen(expected));
     if (diff) {
@@ -38,7 +39,7 @@
         "}"
     );
     lgtd_jsonrpc_send_error(
-        &client, &req, NULL, LGTD_JSONRPC_INVALID_REQUEST, "Invalid Request"
+        &client, LGTD_JSONRPC_INVALID_REQUEST, "Invalid Request"
     );
     diff = memcmp(client_write_buf, expected, strlen(expected));
     if (diff) {
diff --git a/tests/core/jsonrpc/test_jsonrpc_utils.h b/tests/core/jsonrpc/test_jsonrpc_utils.h
--- a/tests/core/jsonrpc/test_jsonrpc_utils.h
+++ b/tests/core/jsonrpc/test_jsonrpc_utils.h
@@ -30,56 +30,63 @@
     return 0;
 }
 
-void lgtd_proto_target_list_clear(struct lgtd_proto_target_list *targets)
+void
+lgtd_proto_target_list_clear(struct lgtd_proto_target_list *targets)
 {
     assert(targets);
 }
 
 #ifndef LGTD_TESTING_SET_LIGHT_FROM_HSBK
-bool
-lgtd_proto_set_light_from_hsbk(const struct lgtd_proto_target_list *targets,
+void
+lgtd_proto_set_light_from_hsbk(struct lgtd_client *client,
+                               const struct lgtd_proto_target_list *targets,
                                int hue,
                                int saturation,
                                int brightness,
                                int kelvin,
                                int transition_msecs)
 {
+    (void)client;
     (void)targets;
     (void)hue;
     (void)saturation;
     (void)brightness;
     (void)kelvin;
     (void)transition_msecs;
-    return true;
 }
 #endif
 
 #ifndef LGTD_TESTING_POWER_ON
-bool
-lgtd_proto_power_on(const struct lgtd_proto_target_list *targets)
+void
+lgtd_proto_power_on(struct lgtd_client *client,
+                    const struct lgtd_proto_target_list *targets)
 {
+    (void)client;
     (void)targets;
-    return true;
 }
 #endif
 
 #ifndef LGTD_TESTING_POWER_OFF
-bool
-lgtd_proto_power_off(const struct lgtd_proto_target_list *targets)
+void
+lgtd_proto_power_off(struct lgtd_client *client,
+                     const struct lgtd_proto_target_list *targets)
 {
+    (void)client;
     (void)targets;
-    return true;
 }
 #endif
 
 #ifndef LGTD_TESTING_SET_WAVEFORM
-bool lgtd_proto_set_waveform(const struct lgtd_proto_target_list *targets,
-                             enum lgtd_lifx_waveform_type waveform,
-                             int hue, int saturation,
-                             int brightness, int kelvin,
-                             int period, float cycles,
-                             int skew_ratio, bool transient)
+void
+lgtd_proto_set_waveform(struct lgtd_client *client,
+                        const struct lgtd_proto_target_list *targets,
+                        enum lgtd_lifx_waveform_type waveform,
+                        int hue, int saturation,
+                        int brightness, int kelvin,
+                        int period, float cycles,
+                        int skew_ratio, bool transient)
 {
+    (void)client;
     (void)targets;
     (void)waveform;
     (void)hue;
@@ -90,6 +97,5 @@
     (void)cycles;
     (void)skew_ratio;
     (void)transient;
-    return true;
 }
 #endif
diff --git a/tests/core/tests_utils.c b/tests/core/tests_utils.c
--- a/tests/core/tests_utils.c
+++ b/tests/core/tests_utils.c
@@ -14,6 +14,9 @@
 
 #include "lifx/wire_proto.h"
 #include "core/time_monotonic.h"
+#include "core/jsmn.h"
+#include "core/jsonrpc.h"
+#include "core/client.h"
 #include "core/proto.h"
 #include "lifx/bulb.h"
 #include "lifx/gateway.h"
