# HG changeset patch
# Parent 94766dce679132c997bf13377d0cb17e778a17b5
Fix build on GNU/Linux

diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,10 +24,18 @@
 
 SET(CMAKE_C_FLAGS "-pipe -Wextra -Wall -Wstrict-prototypes -std=c99")
 
-ADD_DEFINITIONS("-D_POSIX_C_SOURCE=200809L" "-D_BSD_SOURCE=1")
+# Only relevant for the GNU libc:
+ADD_DEFINITIONS(
+    "-D_POSIX_C_SOURCE=200809L"
+    "-D_BSD_SOURCE=1"
+    "-D_DEFAULT_SOURCE=1"
+)
 
 IF (CMAKE_BUILD_TYPE MATCHES "DEBUG")
     ADD_DEFINITIONS("-DQUEUE_MACRO_DEBUG=1")
+    IF (CMAKE_COMPILER_IS_GNUCC)
+        ADD_DEFINITIONS("-g3" "-ggdb")
+    ENDIF ()
 ENDIF ()
 
 INCLUDE_DIRECTORIES(${LIFXD_SOURCE_DIR}/compat/generic ${LIFXD_BINARY_DIR}/compat)
diff --git a/core/broadcast.c b/core/broadcast.c
--- a/core/broadcast.c
+++ b/core/broadcast.c
@@ -68,6 +68,10 @@
 
     while (true) {
         struct sockaddr_storage peer;
+        // if we get back from recvfrom with a sockaddr_in the end of the struct
+        // will not be initialized and we will be comparing unintialized stuff
+        // in lifxd_gateway_get:
+        memset(&peer, 0, sizeof(peer));
         ev_socklen_t addrlen = sizeof(peer);
         union {
             char buf[LIFXD_MAX_PACKET_SIZE];
@@ -165,7 +169,6 @@
     assert(lifxd_broadcast_endpoint.socket != -1);
 
     struct sockaddr_in lifx_addr = {
-        .sin_len = sizeof(lifx_addr),
         .sin_family = AF_INET,
         .sin_addr = { INADDR_BROADCAST },
         .sin_port = htons(lifxd_opts.master_port)
@@ -284,7 +287,6 @@
     }
 
     struct sockaddr_in lifx_addr = {
-        .sin_len = sizeof(lifx_addr),
         .sin_family = AF_INET,
         .sin_addr = { INADDR_ANY },
         .sin_port = htons(lifxd_opts.master_port)
diff --git a/core/gateway.c b/core/gateway.c
--- a/core/gateway.c
+++ b/core/gateway.c
@@ -179,7 +179,7 @@
         lifxd_warn("can't open a new socket");
         goto error_socket;
     }
-    if (connect(gw->socket, (const struct sockaddr *)peer, peer->ss_len) == -1
+    if (connect(gw->socket, (const struct sockaddr *)peer, sizeof(*peer)) == -1
         || evutil_make_socket_nonblocking(gw->socket) == -1) {
         lifxd_warn("can't open a new socket");
         goto error_connect;
@@ -195,7 +195,7 @@
     gw->refresh_ev = evtimer_new(
         lifxd_ev_base, lifxd_gateway_refresh_callback, gw
     );
-    memcpy(&gw->peer, peer, peer->ss_len);
+    memcpy(&gw->peer, peer, sizeof(gw->peer));
     lifxd_sockaddrtoa(peer, gw->ip_addr, sizeof(gw->ip_addr));
     gw->port = lifxd_sockaddrport(peer);
     memcpy(gw->site, site, sizeof(gw->site));
@@ -250,7 +250,7 @@
     struct lifxd_gateway *gw, *next_gw;
     LIST_FOREACH_SAFE(gw, &lifxd_gateways, link, next_gw) {
         if (peer->ss_family == gw->peer.ss_family
-            && !memcmp(&gw->peer, peer, peer->ss_len)) {
+            && !memcmp(&gw->peer, peer, sizeof(*peer))) {
             return gw;
         }
     }
@@ -275,11 +275,12 @@
 {
     assert(gw);
     assert(hdr);
+    assert(pkt_size >= 0 && pkt_size < LIFXD_MAX_PACKET_SIZE);
     assert(!memcmp(hdr->site, gw->site, LIFXD_ADDR_LENGTH));
 
     evbuffer_add(gw->write_buf, hdr, sizeof(*hdr));
     if (pkt) {
-        assert(pkt_size == le16toh(hdr->size) - sizeof(*hdr));
+        assert((unsigned)pkt_size == le16toh(hdr->size) - sizeof(*hdr));
         evbuffer_add(gw->write_buf, pkt, pkt_size);
     }
     event_add(gw->write_ev, NULL);
diff --git a/core/log.c b/core/log.c
--- a/core/log.c
+++ b/core/log.c
@@ -60,7 +60,7 @@
     }
     // '2015-01-02T10:13:16.132222+00:00'
     snprintf(
-        strbuf, bufsz, "%d-%02d-%02dT%02d:%02d:%02d.%d+%02ld:%02ld",
+        strbuf, bufsz, "%d-%02d-%02dT%02d:%02d:%02d.%ld+%02ld:%02ld",
         1900 + tm_now.tm_year, 1 + tm_now.tm_mon, tm_now.tm_mday,
         tm_now.tm_hour, tm_now.tm_min, tm_now.tm_sec,
         now.tv_usec, tm_now.tm_gmtoff / 60 / 60,
