# HG changeset patch
# Parent  143363ac9292488627f1239cc6fff06bca6e32dc
Add the list_tags command

diff --git a/core/client.c b/core/client.c
--- a/core/client.c
+++ b/core/client.c
@@ -143,6 +143,18 @@
 }
 
 void
+lgtd_client_start_send_response(struct lgtd_client *client)
+{
+    lgtd_jsonrpc_start_send_response(client);
+}
+
+void
+lgtd_client_end_send_response(struct lgtd_client *client)
+{
+    lgtd_jsonrpc_end_send_response(client);
+}
+
+void
 lgtd_client_send_error(struct lgtd_client *client,
                        enum lgtd_client_error_code error,
                        const char *msg)
diff --git a/core/client.h b/core/client.h
--- a/core/client.h
+++ b/core/client.h
@@ -31,7 +31,7 @@
 };
 
 struct lgtd_client {
-    LIST_ENTRY(lgtd_client)      link;
+    LIST_ENTRY(lgtd_client)     link;
     struct bufferevent          *io;
     char                        ip_addr[INET6_ADDRSTRLEN];
     uint16_t                    port;
@@ -50,4 +50,6 @@
 void lgtd_client_close_all(void);
 
 void lgtd_client_send_response(struct lgtd_client *, const char *);
+void lgtd_client_start_send_response(struct lgtd_client *);
+void lgtd_client_end_send_response(struct lgtd_client *);
 void lgtd_client_send_error(struct lgtd_client *, enum lgtd_client_error_code, const char *);
diff --git a/core/jsonrpc.c b/core/jsonrpc.c
--- a/core/jsonrpc.c
+++ b/core/jsonrpc.c
@@ -459,6 +459,22 @@
     LGTD_CLIENT_WRITE_STRING(client, "}");
 }
 
+void
+lgtd_jsonrpc_start_send_response(struct lgtd_client *client)
+{
+    assert(client);
+
+    LGTD_CLIENT_WRITE_STRING(client, "{\"jsonrpc\": \"2.0\", \"id\": ");
+    lgtd_jsonrpc_write_id(client);
+    LGTD_CLIENT_WRITE_STRING(client, ", \"result\": ");
+}
+
+void
+lgtd_jsonrpc_end_send_response(struct lgtd_client *client)
+{
+    LGTD_CLIENT_WRITE_STRING(client, "}");
+}
+
 static bool
 lgtd_jsonrpc_check_and_extract_request(struct lgtd_jsonrpc_request *request,
                                        const jsmntok_t *tokens,
@@ -856,7 +872,6 @@
 static void
 lgtd_jsonrpc_check_and_call_power_on(struct lgtd_client *client)
 {
-
     struct lgtd_proto_target_list targets = SLIST_HEAD_INITIALIZER(&targets);
     bool ok = lgtd_jsonrpc_extract_target_list(&targets, client);
     if (!ok) {
@@ -870,7 +885,6 @@
 static void
 lgtd_jsonrpc_check_and_call_power_off(struct lgtd_client *client)
 {
-
     struct lgtd_proto_target_list targets = SLIST_HEAD_INITIALIZER(&targets);
     bool ok = lgtd_jsonrpc_extract_target_list(&targets, client);
     if (!ok) {
@@ -902,6 +916,7 @@
             "set_waveform", 10,
             lgtd_jsonrpc_check_and_call_set_waveform
         ),
+        LGTD_JSONRPC_METHOD("list_tags", 0, lgtd_proto_list_tags),
     };
 
     assert(client);
diff --git a/core/jsonrpc.h b/core/jsonrpc.h
--- a/core/jsonrpc.h
+++ b/core/jsonrpc.h
@@ -88,3 +88,5 @@
                              const char *);
 void lgtd_jsonrpc_send_response(struct lgtd_client *,
                                 const char *);
+void lgtd_jsonrpc_start_send_response(struct lgtd_client *);
+void lgtd_jsonrpc_end_send_response(struct lgtd_client *);
diff --git a/core/proto.c b/core/proto.c
--- a/core/proto.c
+++ b/core/proto.c
@@ -26,11 +26,13 @@
 #include <stdint.h>
 #include <string.h>
 
+#include <event2/bufferevent.h>
 #include <event2/util.h>
 
 #include "lifx/wire_proto.h"
 #include "time_monotonic.h"
 #include "lifx/bulb.h"
+#include "lifx/tagging.h"
 #include "jsmn.h"
 #include "jsonrpc.h"
 #include "client.h"
@@ -39,7 +41,7 @@
 #include "lightsd.h"
 
 #define SEND_RESULT(client, ok) do {                                \
-    lgtd_jsonrpc_send_response((client), (ok) ? "true" : "false");  \
+    lgtd_client_send_response((client), (ok) ? "true" : "false");   \
 } while(0)
 
 void
@@ -105,8 +107,8 @@
 
     lgtd_lifx_wire_encode_light_color(&pkt);
     SEND_RESULT(
-        client, lgtd_router_send(targets, LGTD_LIFX_SET_LIGHT_COLOR, &pkt))
-    ;
+        client, lgtd_router_send(targets, LGTD_LIFX_SET_LIGHT_COLOR, &pkt)
+    );
 }
 
 void
@@ -146,3 +148,20 @@
         client, lgtd_router_send(targets, LGTD_LIFX_SET_WAVEFORM, &pkt)
     );
 }
+
+void
+lgtd_proto_list_tags(struct lgtd_client *client)
+{
+    lgtd_client_start_send_response(client);
+
+    LGTD_CLIENT_WRITE_STRING(client, "[");
+    struct lgtd_lifx_tag *tag;
+    LIST_FOREACH(tag, &lgtd_lifx_tags, link) {
+        LGTD_CLIENT_WRITE_STRING(client, "\"");
+        LGTD_CLIENT_WRITE_STRING(client, tag->label);
+        LGTD_CLIENT_WRITE_STRING(client, LIST_NEXT(tag, link) ? "\", " : "\"");
+    }
+    LGTD_CLIENT_WRITE_STRING(client, "]");
+
+    lgtd_client_end_send_response(client);
+}
diff --git a/core/proto.h b/core/proto.h
--- a/core/proto.h
+++ b/core/proto.h
@@ -38,3 +38,4 @@
                              int, float, int, bool);
 void lgtd_proto_power_on(struct lgtd_client *, const struct lgtd_proto_target_list *);
 void lgtd_proto_power_off(struct lgtd_client *, const struct lgtd_proto_target_list *);
+void lgtd_proto_list_tags(struct lgtd_client *);
diff --git a/core/router.h b/core/router.h
--- a/core/router.h
+++ b/core/router.h
@@ -17,6 +17,12 @@
 
 #pragma once
 
+// TODO: return that from the functions in there and handle it:
+enum lgtd_router_error {
+    LGTD_ROUTER_INVALID_TARGET_ERROR,
+    LGTD_ROUTER_CANNOT_ENQUEUE_PACKET_ERROR
+};
+
 bool lgtd_router_send(const struct lgtd_proto_target_list *, enum lgtd_lifx_packet_type, void *);
 void lgtd_router_send_to_device(struct lgtd_lifx_bulb *, enum lgtd_lifx_packet_type, void *);
 void lgtd_router_broadcast(enum lgtd_lifx_packet_type, void *);
diff --git a/docs/protocol.rst b/docs/protocol.rst
--- a/docs/protocol.rst
+++ b/docs/protocol.rst
@@ -60,8 +60,9 @@
                           end of the waveform, otherwise it will revert back to
                           its original state.
 
-.. function:: tag_list(tag)
+.. function:: list_tags()
 
-    Return an array of labels or adresses of the devices having the given tag.
+    Return a dictionnary with tags as keys and arrays of devices addresses or
+    labels as values.
 
 .. vim: set tw=80 spelllang=en spell:
diff --git a/lifx/CMakeLists.txt b/lifx/CMakeLists.txt
--- a/lifx/CMakeLists.txt
+++ b/lifx/CMakeLists.txt
@@ -10,6 +10,7 @@
     broadcast.c
     bulb.c
     gateway.c
+    tagging.c
     timer.c
     wire_proto.c
 )
diff --git a/lifx/wire_proto.h b/lifx/wire_proto.h
--- a/lifx/wire_proto.h
+++ b/lifx/wire_proto.h
@@ -267,4 +267,6 @@
 void lgtd_lifx_wire_decode_power_state(struct lgtd_lifx_packet_power_state *);
 
 void lgtd_lifx_wire_encode_light_color(struct lgtd_lifx_packet_light_color *);
-void lgtd_lifx_wire_encode_waveform(struct lgtd_lifx_packet_waveform *pkt);
+void lgtd_lifx_wire_encode_waveform(struct lgtd_lifx_packet_waveform *);
+
+void lgtd_lifx_wire_decode_tag_labels(struct lgtd_lifx_packet_tag_labels *);
diff --git a/tests/core/jsonrpc/test_jsonrpc_build_target_list.c b/tests/core/jsonrpc/test_jsonrpc_build_target_list.c
--- a/tests/core/jsonrpc/test_jsonrpc_build_target_list.c
+++ b/tests/core/jsonrpc/test_jsonrpc_build_target_list.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off.c
@@ -1,5 +1,7 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
+
 #define LGTD_TESTING_POWER_OFF
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_off_missing_target.c
@@ -1,5 +1,7 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
+
 #define LGTD_TESTING_POWER_OFF
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on.c
@@ -1,5 +1,7 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
+
 #define LGTD_TESTING_POWER_ON
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_power_on_missing_target.c
@@ -1,5 +1,7 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
+
 #define LGTD_TESTING_POWER_ON
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
@@ -1,5 +1,7 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
+
 #define LGTD_TESTING_SET_LIGHT_FROM_HSBK
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
@@ -1,5 +1,7 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
+
 #define LGTD_TESTING_SET_LIGHT_FROM_HSBK
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
@@ -1,5 +1,7 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
+
 #define LGTD_TESTING_SET_LIGHT_FROM_HSBK
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform.c
@@ -1,5 +1,7 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
+
 #define LGTD_TESTING_SET_WAVEFORM
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_waveform_invalid_params.c
@@ -1,5 +1,7 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
+
 #define LGTD_TESTING_SET_WAVEFORM
 #include "test_jsonrpc_utils.h"
 
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_no_params.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_no_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_no_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_no_params.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_notification_no_params.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_notification_no_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_notification_no_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_notification_no_params.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_params_array.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_params_array.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_params_array.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_params_array.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_params_obj.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_params_obj.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_params_obj.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_params_obj.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_extract_request_valid_notification.c b/tests/core/jsonrpc/test_jsonrpc_extract_request_valid_notification.c
--- a/tests/core/jsonrpc/test_jsonrpc_extract_request_valid_notification.c
+++ b/tests/core/jsonrpc/test_jsonrpc_extract_request_valid_notification.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_send_error.c b/tests/core/jsonrpc/test_jsonrpc_send_error.c
--- a/tests/core/jsonrpc/test_jsonrpc_send_error.c
+++ b/tests/core/jsonrpc/test_jsonrpc_send_error.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_send_response.c b/tests/core/jsonrpc/test_jsonrpc_send_response.c
--- a/tests/core/jsonrpc/test_jsonrpc_send_response.c
+++ b/tests/core/jsonrpc/test_jsonrpc_send_response.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_invalid.c b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_invalid.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_invalid.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_invalid.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_valid.c b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_valid.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_valid.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_1_valid.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_invalid.c b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_invalid.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_invalid.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_invalid.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_valid.c b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_valid.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_valid.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_float_between_0_and_360_valid.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 static void
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_integer.c b/tests/core/jsonrpc/test_jsonrpc_type_integer.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_integer.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_integer.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_integer_invalid_characters.c b/tests/core/jsonrpc/test_jsonrpc_type_integer_invalid_characters.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_integer_invalid_characters.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_integer_invalid_characters.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_integer_too_big.c b/tests/core/jsonrpc/test_jsonrpc_type_integer_too_big.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_integer_too_big.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_integer_too_big.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_type_integer_too_small.c b/tests/core/jsonrpc/test_jsonrpc_type_integer_too_small.c
--- a/tests/core/jsonrpc/test_jsonrpc_type_integer_too_small.c
+++ b/tests/core/jsonrpc/test_jsonrpc_type_integer_too_small.c
@@ -1,5 +1,6 @@
 #include "jsonrpc.c"
 
+#include "mock_client_buf.h"
 #include "test_jsonrpc_utils.h"
 
 int
diff --git a/tests/core/jsonrpc/test_jsonrpc_utils.h b/tests/core/jsonrpc/test_jsonrpc_utils.h
--- a/tests/core/jsonrpc/test_jsonrpc_utils.h
+++ b/tests/core/jsonrpc/test_jsonrpc_utils.h
@@ -10,32 +10,18 @@
     return jsmn_parse(&ctx, json, len, tokens, capacity);
 }
 
-static char client_write_buf[4096] = { 0 };
-static int client_write_buf_idx = 0;
-
-static inline void
-reset_client_write_buf(void)
-{
-    memset(client_write_buf, 0, sizeof(client_write_buf));
-    client_write_buf_idx = 0;
-}
-
-int
-bufferevent_write(struct bufferevent *bev, const void *data, size_t nbytes)
-{
-    (void)bev;
-    int to_write = LGTD_MIN(nbytes, sizeof(client_write_buf));
-    memcpy(&client_write_buf[client_write_buf_idx], data, to_write);
-    client_write_buf_idx += to_write;
-    return 0;
-}
-
 void
 lgtd_proto_target_list_clear(struct lgtd_proto_target_list *targets)
 {
     assert(targets);
 }
 
+void
+lgtd_proto_list_tags(struct lgtd_client *client)
+{
+    assert(client);
+}
+
 #ifndef LGTD_TESTING_SET_LIGHT_FROM_HSBK
 void
 lgtd_proto_set_light_from_hsbk(struct lgtd_client *client,
diff --git a/tests/core/proto/CMakeLists.txt b/tests/core/proto/CMakeLists.txt
--- a/tests/core/proto/CMakeLists.txt
+++ b/tests/core/proto/CMakeLists.txt
@@ -14,8 +14,6 @@
     ${TIME_MONOTONIC_IMPL}
 )
 
-TARGET_LINK_LIBRARIES(test_core_proto ${EVENT2_CORE_LIBRARY})
-
 FUNCTION(ADD_ROUTER_TEST TEST_SOURCE)
     ADD_TEST_FROM_C_SOURCES(${TEST_SOURCE} test_core_proto)
 ENDFUNCTION()
diff --git a/tests/core/proto/test_proto_power_off.c b/tests/core/proto/test_proto_power_off.c
--- a/tests/core/proto/test_proto_power_off.c
+++ b/tests/core/proto/test_proto_power_off.c
@@ -1,7 +1,12 @@
 #include "proto.c"
 
+#include "mock_client_buf.h"
 #include "tests_utils.h"
 
+#define MOCKED_CLIENT_SEND_RESPONSE
+#define MOCKED_ROUTER_SEND
+#include "tests_proto_utils.h"
+
 bool
 lgtd_router_send(const struct lgtd_proto_target_list *targets,
                  enum lgtd_lifx_packet_type pkt_type,
@@ -30,7 +35,7 @@
 }
 
 void
-lgtd_jsonrpc_send_response(struct lgtd_client *client, const char *msg)
+lgtd_client_send_response(struct lgtd_client *client, const char *msg)
 {
     if (!client) {
         errx(1, "client shouldn't ne NULL");
diff --git a/tests/core/proto/test_proto_power_off_routing_error.c b/tests/core/proto/test_proto_power_off_routing_error.c
--- a/tests/core/proto/test_proto_power_off_routing_error.c
+++ b/tests/core/proto/test_proto_power_off_routing_error.c
@@ -1,7 +1,12 @@
 #include "proto.c"
 
+#include "mock_client_buf.h"
 #include "tests_utils.h"
 
+#define MOCKED_CLIENT_SEND_RESPONSE
+#define MOCKED_ROUTER_SEND
+#include "tests_proto_utils.h"
+
 bool
 lgtd_router_send(const struct lgtd_proto_target_list *targets,
                  enum lgtd_lifx_packet_type pkt_type,
@@ -30,7 +35,7 @@
 }
 
 void
-lgtd_jsonrpc_send_response(struct lgtd_client *client, const char *msg)
+lgtd_client_send_response(struct lgtd_client *client, const char *msg)
 {
     if (!client) {
         errx(1, "client shouldn't ne NULL");
diff --git a/tests/core/proto/test_proto_power_on.c b/tests/core/proto/test_proto_power_on.c
--- a/tests/core/proto/test_proto_power_on.c
+++ b/tests/core/proto/test_proto_power_on.c
@@ -1,7 +1,12 @@
 #include "proto.c"
 
+#include "mock_client_buf.h"
 #include "tests_utils.h"
 
+#define MOCKED_CLIENT_SEND_RESPONSE
+#define MOCKED_ROUTER_SEND
+#include "tests_proto_utils.h"
+
 bool
 lgtd_router_send(const struct lgtd_proto_target_list *targets,
                  enum lgtd_lifx_packet_type pkt_type,
@@ -30,7 +35,7 @@
 }
 
 void
-lgtd_jsonrpc_send_response(struct lgtd_client *client, const char *msg)
+lgtd_client_send_response(struct lgtd_client *client, const char *msg)
 {
     if (!client) {
         errx(1, "client shouldn't ne NULL");
diff --git a/tests/core/proto/test_proto_power_on_routing_error.c b/tests/core/proto/test_proto_power_on_routing_error.c
--- a/tests/core/proto/test_proto_power_on_routing_error.c
+++ b/tests/core/proto/test_proto_power_on_routing_error.c
@@ -1,7 +1,12 @@
 #include "proto.c"
 
+#include "mock_client_buf.h"
 #include "tests_utils.h"
 
+#define MOCKED_CLIENT_SEND_RESPONSE
+#define MOCKED_ROUTER_SEND
+#include "tests_proto_utils.h"
+
 bool
 lgtd_router_send(const struct lgtd_proto_target_list *targets,
                  enum lgtd_lifx_packet_type pkt_type,
@@ -30,7 +35,7 @@
 }
 
 void
-lgtd_jsonrpc_send_response(struct lgtd_client *client, const char *msg)
+lgtd_client_send_response(struct lgtd_client *client, const char *msg)
 {
     if (!client) {
         errx(1, "client shouldn't ne NULL");
diff --git a/tests/core/proto/test_proto_set_light_from_hsbk.c b/tests/core/proto/test_proto_set_light_from_hsbk.c
--- a/tests/core/proto/test_proto_set_light_from_hsbk.c
+++ b/tests/core/proto/test_proto_set_light_from_hsbk.c
@@ -2,8 +2,13 @@
 
 #include "proto.c"
 
+#include "mock_client_buf.h"
 #include "tests_utils.h"
 
+#define MOCKED_CLIENT_SEND_RESPONSE
+#define MOCKED_ROUTER_SEND
+#include "tests_proto_utils.h"
+
 bool
 lgtd_router_send(const struct lgtd_proto_target_list *targets,
                  enum lgtd_lifx_packet_type pkt_type,
@@ -50,7 +55,7 @@
 }
 
 void
-lgtd_jsonrpc_send_response(struct lgtd_client *client, const char *msg)
+lgtd_client_send_response(struct lgtd_client *client, const char *msg)
 {
     if (!client) {
         errx(1, "client shouldn't ne NULL");
diff --git a/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c b/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
--- a/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
+++ b/tests/core/proto/test_proto_set_light_from_hsbk_on_routing_error.c
@@ -2,8 +2,13 @@
 
 #include "proto.c"
 
+#include "mock_client_buf.h"
 #include "tests_utils.h"
 
+#define MOCKED_CLIENT_SEND_RESPONSE
+#define MOCKED_ROUTER_SEND
+#include "tests_proto_utils.h"
+
 bool
 lgtd_router_send(const struct lgtd_proto_target_list *targets,
                  enum lgtd_lifx_packet_type pkt_type,
@@ -50,7 +55,7 @@
 }
 
 void
-lgtd_jsonrpc_send_response(struct lgtd_client *client, const char *msg)
+lgtd_client_send_response(struct lgtd_client *client, const char *msg)
 {
     if (!client) {
         errx(1, "client shouldn't ne NULL");
diff --git a/tests/core/proto/test_proto_set_waveform.c b/tests/core/proto/test_proto_set_waveform.c
--- a/tests/core/proto/test_proto_set_waveform.c
+++ b/tests/core/proto/test_proto_set_waveform.c
@@ -2,8 +2,13 @@
 
 #include "proto.c"
 
+#include "mock_client_buf.h"
 #include "tests_utils.h"
 
+#define MOCKED_CLIENT_SEND_RESPONSE
+#define MOCKED_ROUTER_SEND
+#include "tests_proto_utils.h"
+
 bool
 lgtd_router_send(const struct lgtd_proto_target_list *targets,
                  enum lgtd_lifx_packet_type pkt_type,
@@ -65,7 +70,7 @@
 }
 
 void
-lgtd_jsonrpc_send_response(struct lgtd_client *client, const char *msg)
+lgtd_client_send_response(struct lgtd_client *client, const char *msg)
 {
     if (!client) {
         errx(1, "client shouldn't ne NULL");
diff --git a/tests/core/proto/test_proto_set_waveform_on_routing_error.c b/tests/core/proto/test_proto_set_waveform_on_routing_error.c
--- a/tests/core/proto/test_proto_set_waveform_on_routing_error.c
+++ b/tests/core/proto/test_proto_set_waveform_on_routing_error.c
@@ -2,8 +2,13 @@
 
 #include "proto.c"
 
+#include "mock_client_buf.h"
 #include "tests_utils.h"
 
+#define MOCKED_CLIENT_SEND_RESPONSE
+#define MOCKED_ROUTER_SEND
+#include "tests_proto_utils.h"
+
 bool
 lgtd_router_send(const struct lgtd_proto_target_list *targets,
                  enum lgtd_lifx_packet_type pkt_type,
@@ -65,7 +70,7 @@
 }
 
 void
-lgtd_jsonrpc_send_response(struct lgtd_client *client, const char *msg)
+lgtd_client_send_response(struct lgtd_client *client, const char *msg)
 {
     if (!client) {
         errx(1, "client shouldn't ne NULL");
diff --git a/tests/lightsc b/tests/lightsc
--- a/tests/lightsc
+++ b/tests/lightsc
@@ -62,6 +62,10 @@
 def power_off(socket, id, target):
     jsonrpc_call(socket, id, "power_off", {"target": target})
 
+
+def list_tags(socket, id):
+    jsonrpc_call(socket, id, "list_tags", [])
+
 if __name__ == "__main__":
     s = socket.create_connection(("localhost", 1234))
     h = 0
