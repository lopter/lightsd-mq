# HG changeset patch
# Parent adff18ab9e26c2852555e13b051bb23acb5339e7
wip

diff --git a/core/jsonrpc.c b/core/jsonrpc.c
--- a/core/jsonrpc.c
+++ b/core/jsonrpc.c
@@ -492,7 +492,8 @@
         const jsmntok_t *s;
         const jsmntok_t *b;
         const jsmntok_t *k;
-    } params = { NULL, NULL, NULL, NULL, NULL };
+        const jsmntok_t *t;
+    } params = { NULL, NULL, NULL, NULL, NULL, NULL };
     static const struct lgtd_jsonrpc_node schema[] = {
         LGTD_JSONRPC_NODE(
             "target",
@@ -524,6 +525,12 @@
             lgtd_jsonrpc_type_integer,
             false
         ),
+        LGTD_JSONRPC_NODE(
+            "transition",
+            offsetof(struct lgtd_jsonrpc_set_brightness_args, t),
+            lgtd_jsonrpc_type_integer,
+            false
+        ),
     };
 
     bool ok = lgtd_jsonrpc_extract_and_validate_params_against_schema(
@@ -552,14 +559,19 @@
     if (k < 2500 || k > 9000 || errno == ERANGE) {
         goto error_invalid_params;
     }
+    int t = strtol(&json[params.t->start], NULL, 10);
+    if (t < 0 || errno == ERANGE) {
+        goto error_invalid_params;
+    }
 
-    char *t = lgtd_jsonrpc_dup_target(client, request, json, params.target);
-    if (!t) {
+    char *target;
+    target = lgtd_jsonrpc_dup_target(client, request, json, params.target);
+    if (!target) {
         return;
     }
 
-    ok = lgtd_proto_set_light_from_hsbk(t, h, s, b, k, 0);
-    free(t);
+    ok = lgtd_proto_set_light_from_hsbk(target, h, s, b, k, t);
+    free(target);
     if (ok) {
         lgtd_jsonrpc_send_response(client, request, json, "true");
         return;
@@ -659,7 +671,7 @@
             lgtd_jsonrpc_check_and_call_power_off
         ),
         LGTD_JSONRPC_METHOD(
-            "set_light_from_hsbk", 5, // t, h, s, b, k
+            "set_light_from_hsbk", 6, // t, h, s, b, k, t
             lgtd_jsonrpc_check_and_call_set_light_from_hsbk
         ),
     };
diff --git a/docs/protocol.rst b/docs/protocol.rst
--- a/docs/protocol.rst
+++ b/docs/protocol.rst
@@ -32,10 +32,13 @@
 
    Power on the given bulb(s).
 
-.. function:: set_light_from_hsbk(target, h, s, b, k)
+.. function:: set_light_from_hsbk(target, h, s, b, k, t)
 
    :param float h: Hue from 0 to 360.
    :param float s: Saturation from 0 to 1.
    :param float b: Brightness from 0 to 1.
+   :param int k: Temperature in Kelvin from 2500 to 9000.
+   :param int t: Transition duration to this color in ms.
+
 
 .. vim: set tw=80 spelllang=en spell:
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk.c
@@ -42,9 +42,9 @@
             1, "Invalid temperature: %d, expected: 4200", kelvin
         );
     }
-    if (transition_msecs != 0) {
+    if (transition_msecs != 60) {
         errx(
-            1, "Invalid transition duration: %d, expected: 0", transition_msecs
+            1, "Invalid transition duration: %d, expected: 60", transition_msecs
         );
     }
     set_light_called = true;
@@ -63,7 +63,8 @@
             "\"hue\": 324.2341514, "
             "\"saturation\": 0.234, "
             "\"brightness\": 1.0, "
-            "\"kelvin\": 4200"
+            "\"kelvin\": 4200,"
+            "\"transition\": 60"
         "},"
         "\"id\": \"42\""
     "}");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_from_array.c
@@ -59,7 +59,7 @@
         "\"jsonrpc\": \"2.0\","
         "\"method\": \"set_light_from_hsbk\","
         "\"params\": ["
-            "\"*\", 324.2341514, 0.234, 1.0, 4200"
+            "\"*\", 324.2341514, 0.234, 1.0, 4200, 0"
         "],"
         "\"id\": \"42\""
     "}");
diff --git a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
--- a/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
+++ b/tests/core/jsonrpc/test_jsonrpc_check_and_call_set_light_from_hsbk_invalid_params.c
@@ -64,7 +64,8 @@
             "\"hue\": 324.2341514, "
             "\"saturation\": 0.234, "
             "\"brightness\": 1.0, "
-            "\"kelvin\": -4200"
+            "\"kelvin\": -4200,"
+            "\"transition\": 42"
         "},"
         "\"id\": \"42\""
     "}");
@@ -78,7 +79,8 @@
             "\"hue\": 324.2341514, "
             "\"saturation\": 3.234, "
             "\"brightness\": 1.0, "
-            "\"kelvin\": 4200"
+            "\"kelvin\": 4200,"
+            "\"transition\": 42"
         "},"
         "\"id\": \"42\""
     "}");
@@ -92,7 +94,8 @@
             "\"hue\": 424.2341514, "
             "\"saturation\": 0.234, "
             "\"brightness\": 1.0, "
-            "\"kelvin\": 4200"
+            "\"kelvin\": 4200,"
+            "\"transition\": 42"
         "},"
         "\"id\": \"42\""
     "}");
@@ -106,10 +109,25 @@
             "\"hue\": 224.2341514, "
             "\"saturation\": 0.234, "
             "\"brightness\": -1.0, "
-            "\"kelvin\": 4200"
+            "\"kelvin\": 4200,"
+            "\"transition\": 42"
         "},"
         "\"id\": \"42\""
     "}");
 
+    // negative transition
+    test_request("{"
+        "\"jsonrpc\": \"2.0\","
+        "\"method\": \"set_light_from_hsbk\","
+        "\"params\": {"
+            "\"target\": \"*\", "
+            "\"hue\": 224.2341514, "
+            "\"saturation\": 0.234, "
+            "\"brightness\": -1.0, "
+            "\"kelvin\": 4200,"
+            "\"transition\": -42"
+        "},"
+        "\"id\": \"42\""
+    "}");
     return 0;
 }
diff --git a/tests/lightsc b/tests/lightsc
--- a/tests/lightsc
+++ b/tests/lightsc
@@ -18,9 +18,9 @@
     print(response)
 
 
-def set_light_from_hsbk(socket, id, target, h, s, b, k):
+def set_light_from_hsbk(socket, id, target, h, s, b, k, t):
     jsonrpc_call(socket, id, "set_light_from_hsbk", [
-        target, h, s, b, k
+        target, h, s, b, k, t
     ])
 
 
@@ -42,10 +42,10 @@
     try:
         power_on(s, id, target)
         while True:
-            h = (h + 1) % 360
+            h = (h + 5) % 360
             id += 1
-            set_light_from_hsbk(s, id, target, h, 0.7, 0.02, 2500)
-            time.sleep(0.1)
+            set_light_from_hsbk(s, id, target, h, 0.8, 0.1, 2500, 450)
+            time.sleep(0.5)
     finally:
         power_off(s, id, target)
         s.close()
